#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ParallelRuntime

#include "Basic.hpp"

#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Class ParallelRuntime.FortSwingingLayerAnimInstance
// 0x0160 (0x0520 - 0x03C0)
class UFortSwingingLayerAnimInstance final : public UFortBaseLayerAnimInstance
{
public:
	class UAnimInstance*                          MainAnimBP;                                        // 0x03B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawnAthena*                  Player;                                            // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGroundSwing;                                     // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFemale;                                          // 0x03C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3CA[0x2];                                      // 0x03CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerDistanceToGround;                            // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CalculateRotation;                                 // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ForwardInfluenceOnRotation;                        // 0x03D8(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TimeForMaxRotationSpeed;                           // 0x0400(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxRotationSpeed;                                  // 0x0428(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScalableFloat                         RotationSpeedWhileNotAttached;                     // 0x0450(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScalableFloat                         RotationSpeedWhileNotRotated;                      // 0x0478(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class AActor*                                 GetAttachedActor;                                  // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFreeFalling;                                     // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAttached;                                        // 0x04A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNotAttachedToCliff;                              // 0x04AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AB[0x1];                                      // 0x04AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x04AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                XYVelocity;                                        // 0x04B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VecFromPlayerToAttachPoint;                        // 0x04C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchAngleFromAttachPoint;                         // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollAngle;                                         // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawAngleToAttachTarget;                            // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveName_SwingPhase;                              // 0x04DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveName_BlendOut;                                // 0x04E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwingPhase;                                        // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CurrentRootRotation;                               // 0x04F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CurrentRootTranslation;                            // 0x04FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingRelease1;                                   // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingRelease2;                                   // 0x0509(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingRelease3;                                   // 0x050A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingRelease4;                                   // 0x050B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingRelease5;                                   // 0x050C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingReleaseSkid;                                // 0x050D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMovingAttachPoint;                               // 0x050E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBlendOut;                                        // 0x050F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WebCastAttachDirection;                            // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWebCastDown;                                     // 0x0514(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingOneHand;                                    // 0x0515(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRandomHandBool;                                  // 0x0516(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRandomSwingReleaseBool;                          // 0x0517(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRandomeReleaseBool;                              // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWithin100UnitsOfGround;                          // 0x0519(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHanging;                                         // 0x051A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFallRelease;                                     // 0x051B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOnGroundWebCast;                                 // 0x051C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingNearGroundToSkid;                           // 0x051D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHangToSwingInAir;                                // 0x051E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHangToSwingNearGround;                           // 0x051F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	struct FVector GetAttachVectorInPlayerSpace(const struct FVector& InPlayerToAttachPoint);
	void GetPlayerAnglesFromAttachPoint(float* Pitch, float* Roll, float* Yaw);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSwingingLayerAnimInstance">();
	}
	static class UFortSwingingLayerAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSwingingLayerAnimInstance>();
	}
};
static_assert(alignof(UFortSwingingLayerAnimInstance) == 0x000010, "Wrong alignment on UFortSwingingLayerAnimInstance");
static_assert(sizeof(UFortSwingingLayerAnimInstance) == 0x000520, "Wrong size on UFortSwingingLayerAnimInstance");
static_assert(offsetof(UFortSwingingLayerAnimInstance, MainAnimBP) == 0x0003B8, "Member 'UFortSwingingLayerAnimInstance::MainAnimBP' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, Player) == 0x0003C0, "Member 'UFortSwingingLayerAnimInstance::Player' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsGroundSwing) == 0x0003C8, "Member 'UFortSwingingLayerAnimInstance::IsGroundSwing' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsFemale) == 0x0003C9, "Member 'UFortSwingingLayerAnimInstance::IsFemale' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, PlayerDistanceToGround) == 0x0003CC, "Member 'UFortSwingingLayerAnimInstance::PlayerDistanceToGround' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, CalculateRotation) == 0x0003D0, "Member 'UFortSwingingLayerAnimInstance::CalculateRotation' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, ForwardInfluenceOnRotation) == 0x0003D8, "Member 'UFortSwingingLayerAnimInstance::ForwardInfluenceOnRotation' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, TimeForMaxRotationSpeed) == 0x000400, "Member 'UFortSwingingLayerAnimInstance::TimeForMaxRotationSpeed' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, MaxRotationSpeed) == 0x000428, "Member 'UFortSwingingLayerAnimInstance::MaxRotationSpeed' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, RotationSpeedWhileNotAttached) == 0x000450, "Member 'UFortSwingingLayerAnimInstance::RotationSpeedWhileNotAttached' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, RotationSpeedWhileNotRotated) == 0x000478, "Member 'UFortSwingingLayerAnimInstance::RotationSpeedWhileNotRotated' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, GetAttachedActor) == 0x0004A0, "Member 'UFortSwingingLayerAnimInstance::GetAttachedActor' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsFreeFalling) == 0x0004A8, "Member 'UFortSwingingLayerAnimInstance::IsFreeFalling' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsAttached) == 0x0004A9, "Member 'UFortSwingingLayerAnimInstance::IsAttached' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsNotAttachedToCliff) == 0x0004AA, "Member 'UFortSwingingLayerAnimInstance::IsNotAttachedToCliff' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, Velocity) == 0x0004AC, "Member 'UFortSwingingLayerAnimInstance::Velocity' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, XYVelocity) == 0x0004B8, "Member 'UFortSwingingLayerAnimInstance::XYVelocity' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, VecFromPlayerToAttachPoint) == 0x0004C4, "Member 'UFortSwingingLayerAnimInstance::VecFromPlayerToAttachPoint' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, PitchAngleFromAttachPoint) == 0x0004D0, "Member 'UFortSwingingLayerAnimInstance::PitchAngleFromAttachPoint' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, RollAngle) == 0x0004D4, "Member 'UFortSwingingLayerAnimInstance::RollAngle' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, YawAngleToAttachTarget) == 0x0004D8, "Member 'UFortSwingingLayerAnimInstance::YawAngleToAttachTarget' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, CurveName_SwingPhase) == 0x0004DC, "Member 'UFortSwingingLayerAnimInstance::CurveName_SwingPhase' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, CurveName_BlendOut) == 0x0004E4, "Member 'UFortSwingingLayerAnimInstance::CurveName_BlendOut' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, SwingPhase) == 0x0004EC, "Member 'UFortSwingingLayerAnimInstance::SwingPhase' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, CurrentRootRotation) == 0x0004F0, "Member 'UFortSwingingLayerAnimInstance::CurrentRootRotation' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, CurrentRootTranslation) == 0x0004FC, "Member 'UFortSwingingLayerAnimInstance::CurrentRootTranslation' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingRelease1) == 0x000508, "Member 'UFortSwingingLayerAnimInstance::IsSwingRelease1' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingRelease2) == 0x000509, "Member 'UFortSwingingLayerAnimInstance::IsSwingRelease2' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingRelease3) == 0x00050A, "Member 'UFortSwingingLayerAnimInstance::IsSwingRelease3' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingRelease4) == 0x00050B, "Member 'UFortSwingingLayerAnimInstance::IsSwingRelease4' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingRelease5) == 0x00050C, "Member 'UFortSwingingLayerAnimInstance::IsSwingRelease5' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingReleaseSkid) == 0x00050D, "Member 'UFortSwingingLayerAnimInstance::IsSwingReleaseSkid' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsMovingAttachPoint) == 0x00050E, "Member 'UFortSwingingLayerAnimInstance::IsMovingAttachPoint' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsBlendOut) == 0x00050F, "Member 'UFortSwingingLayerAnimInstance::IsBlendOut' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, WebCastAttachDirection) == 0x000510, "Member 'UFortSwingingLayerAnimInstance::WebCastAttachDirection' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsWebCastDown) == 0x000514, "Member 'UFortSwingingLayerAnimInstance::IsWebCastDown' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingOneHand) == 0x000515, "Member 'UFortSwingingLayerAnimInstance::IsSwingOneHand' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsRandomHandBool) == 0x000516, "Member 'UFortSwingingLayerAnimInstance::IsRandomHandBool' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsRandomSwingReleaseBool) == 0x000517, "Member 'UFortSwingingLayerAnimInstance::IsRandomSwingReleaseBool' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsRandomeReleaseBool) == 0x000518, "Member 'UFortSwingingLayerAnimInstance::IsRandomeReleaseBool' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsWithin100UnitsOfGround) == 0x000519, "Member 'UFortSwingingLayerAnimInstance::IsWithin100UnitsOfGround' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsHanging) == 0x00051A, "Member 'UFortSwingingLayerAnimInstance::IsHanging' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsFallRelease) == 0x00051B, "Member 'UFortSwingingLayerAnimInstance::IsFallRelease' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsOnGroundWebCast) == 0x00051C, "Member 'UFortSwingingLayerAnimInstance::IsOnGroundWebCast' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingNearGroundToSkid) == 0x00051D, "Member 'UFortSwingingLayerAnimInstance::IsSwingNearGroundToSkid' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsHangToSwingInAir) == 0x00051E, "Member 'UFortSwingingLayerAnimInstance::IsHangToSwingInAir' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsHangToSwingNearGround) == 0x00051F, "Member 'UFortSwingingLayerAnimInstance::IsHangToSwingNearGround' has a wrong offset!");

}

