#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SlateCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum SlateCore.ECheckBoxState
// NumValues: 0x0003
enum class ECheckBoxState : uint8
{
	Unchecked                                = 0,
	Checked                                  = 1,
	Undetermined                             = 2,
};

// Enum SlateCore.EWidgetClipping
// NumValues: 0x0005
enum class EWidgetClipping : uint8
{
	Inherit                                  = 0,
	ClipToBounds                             = 1,
	ClipToBoundsWithoutIntersecting          = 2,
	ClipToBoundsAlways                       = 3,
	OnDemand                                 = 4,
};

// Enum SlateCore.ESlateBrushImageType
// NumValues: 0x0004
enum class ESlateBrushImageType : uint8
{
	NoImage                                  = 0,
	FullColor                                = 1,
	Linear                                   = 2,
	Vector                                   = 3,
};

// Enum SlateCore.ESlateBrushMirrorType
// NumValues: 0x0004
enum class ESlateBrushMirrorType : uint8
{
	NoMirror                                 = 0,
	Horizontal                               = 1,
	Vertical                                 = 2,
	Both                                     = 3,
};

// Enum SlateCore.ESlateBrushTileType
// NumValues: 0x0004
enum class ESlateBrushTileType : uint8
{
	NoTile                                   = 0,
	Horizontal                               = 1,
	Vertical                                 = 2,
	Both                                     = 3,
};

// Enum SlateCore.ESlateBrushDrawType
// NumValues: 0x0005
enum class ESlateBrushDrawType : uint8
{
	NoDrawType                               = 0,
	Box                                      = 1,
	Border                                   = 2,
	Image                                    = 3,
	RoundedBox                               = 4,
};

// Enum SlateCore.ESlateBrushRoundingType
// NumValues: 0x0002
enum class ESlateBrushRoundingType : uint8
{
	FixedRadius                              = 0,
	HalfHeightRadius                         = 1,
};

// Enum SlateCore.ESlateColorStylingMode
// NumValues: 0x0005
enum class ESlateColorStylingMode : uint8
{
	UseColor_Specified                       = 0,
	UseColor_ColorTable                      = 1,
	UseColor_Foreground                      = 2,
	UseColor_Foreground_Subdued              = 3,
	UseColor_UseStyle                        = 4,
};

// Enum SlateCore.EUINavigationRule
// NumValues: 0x0007
enum class EUINavigationRule : uint8
{
	Escape                                   = 0,
	Explicit                                 = 1,
	Wrap                                     = 2,
	Stop                                     = 3,
	Custom                                   = 4,
	CustomBoundary                           = 5,
	Invalid                                  = 6,
};

// Enum SlateCore.EUINavigation
// NumValues: 0x0008
enum class EUINavigation : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	Up                                       = 2,
	Down                                     = 3,
	Next                                     = 4,
	Previous                                 = 5,
	Num                                      = 6,
	Invalid                                  = 7,
};

// Enum SlateCore.EFlowDirectionPreference
// NumValues: 0x0004
enum class EFlowDirectionPreference : uint8
{
	Inherit                                  = 0,
	Culture                                  = 1,
	LeftToRight                              = 2,
	RightToLeft                              = 3,
};

// Enum SlateCore.ESelectInfo
// NumValues: 0x0004
enum class ESelectInfo : uint8
{
	OnKeyPress                               = 0,
	OnNavigation                             = 1,
	OnMouseClick                             = 2,
	Direct                                   = 3,
};

// Enum SlateCore.EVerticalAlignment
// NumValues: 0x0004
enum class EVerticalAlignment : uint8
{
	VAlign_Fill                              = 0,
	VAlign_Top                               = 1,
	VAlign_Center                            = 2,
	VAlign_Bottom                            = 3,
};

// Enum SlateCore.ETextCommit
// NumValues: 0x0004
enum class ETextCommit : uint8
{
	Default                                  = 0,
	OnEnter                                  = 1,
	OnUserMovedFocus                         = 2,
	OnCleared                                = 3,
};

// Enum SlateCore.ETextOverflowPolicy
// NumValues: 0x0002
enum class ETextOverflowPolicy : uint8
{
	Clip                                     = 0,
	Ellipsis                                 = 1,
};

// Enum SlateCore.ETextShapingMethod
// NumValues: 0x0003
enum class ETextShapingMethod : uint8
{
	Auto                                     = 0,
	KerningOnly                              = 1,
	FullShaping                              = 2,
};

// Enum SlateCore.ETextTransformPolicy
// NumValues: 0x0003
enum class ETextTransformPolicy : uint8
{
	None                                     = 0,
	ToLower                                  = 1,
	ToUpper                                  = 2,
};

// Enum SlateCore.EMenuPlacement
// NumValues: 0x000D
enum class EMenuPlacement : uint8
{
	MenuPlacement_BelowAnchor                = 0,
	MenuPlacement_CenteredBelowAnchor        = 1,
	MenuPlacement_BelowRightAnchor           = 2,
	MenuPlacement_ComboBox                   = 3,
	MenuPlacement_ComboBoxRight              = 4,
	MenuPlacement_MenuRight                  = 5,
	MenuPlacement_AboveAnchor                = 6,
	MenuPlacement_CenteredAboveAnchor        = 7,
	MenuPlacement_AboveRightAnchor           = 8,
	MenuPlacement_MenuLeft                   = 9,
	MenuPlacement_Center                     = 10,
	MenuPlacement_RightLeftCenter            = 11,
	MenuPlacement_MatchBottomLeft            = 12,
};

// Enum SlateCore.EColorVisionDeficiency
// NumValues: 0x0004
enum class EColorVisionDeficiency : uint8
{
	NormalVision                             = 0,
	Deuteranope                              = 1,
	Protanope                                = 2,
	Tritanope                                = 3,
};

// Enum SlateCore.EHorizontalAlignment
// NumValues: 0x0004
enum class EHorizontalAlignment : uint8
{
	HAlign_Fill                              = 0,
	HAlign_Left                              = 1,
	HAlign_Center                            = 2,
	HAlign_Right                             = 3,
};

// Enum SlateCore.EButtonClickMethod
// NumValues: 0x0004
enum class EButtonClickMethod : uint8
{
	DownAndUp                                = 0,
	MouseDown                                = 1,
	MouseUp                                  = 2,
	PreciseClick                             = 3,
};

// Enum SlateCore.EButtonPressMethod
// NumValues: 0x0003
enum class EButtonPressMethod : uint8
{
	DownAndUp                                = 0,
	ButtonPress                              = 1,
	ButtonRelease                            = 2,
};

// Enum SlateCore.EButtonTouchMethod
// NumValues: 0x0003
enum class EButtonTouchMethod : uint8
{
	DownAndUp                                = 0,
	Down                                     = 1,
	PreciseTap                               = 2,
};

// Enum SlateCore.EFontHinting
// NumValues: 0x0005
enum class EFontHinting : uint8
{
	Default                                  = 0,
	Auto                                     = 1,
	AutoLight                                = 2,
	Monochrome                               = 3,
	None                                     = 4,
};

// Enum SlateCore.EFontLoadingPolicy
// NumValues: 0x0003
enum class EFontLoadingPolicy : uint8
{
	LazyLoad                                 = 0,
	Stream                                   = 1,
	Inline                                   = 2,
};

// Enum SlateCore.EFontLayoutMethod
// NumValues: 0x0002
enum class EFontLayoutMethod : uint8
{
	Metrics                                  = 0,
	BoundingBox                              = 1,
};

// Enum SlateCore.EFocusCause
// NumValues: 0x0006
enum class EFocusCause : uint8
{
	Mouse                                    = 0,
	Navigation                               = 1,
	SetDirectly                              = 2,
	Cleared                                  = 3,
	OtherWidgetLostFocus                     = 4,
	WindowActivate                           = 5,
};

// Enum SlateCore.ESlateDebuggingInputEvent
// NumValues: 0x001B
enum class ESlateDebuggingInputEvent : uint8
{
	MouseMove                                = 0,
	MouseEnter                               = 1,
	MouseLeave                               = 2,
	PreviewMouseButtonDown                   = 3,
	MouseButtonDown                          = 4,
	MouseButtonUp                            = 5,
	MouseButtonDoubleClick                   = 6,
	MouseWheel                               = 7,
	TouchStart                               = 8,
	TouchEnd                                 = 9,
	TouchForceChanged                        = 10,
	TouchFirstMove                           = 11,
	TouchMoved                               = 12,
	DragDetected                             = 13,
	DragEnter                                = 14,
	DragLeave                                = 15,
	DragOver                                 = 16,
	DragDrop                                 = 17,
	DropMessage                              = 18,
	PreviewKeyDown                           = 19,
	KeyDown                                  = 20,
	KeyUp                                    = 21,
	KeyChar                                  = 22,
	AnalogInput                              = 23,
	TouchGesture                             = 24,
	MotionDetected                           = 25,
	MAX                                      = 26,
};

// Enum SlateCore.ESlateDebuggingStateChangeEvent
// NumValues: 0x0002
enum class ESlateDebuggingStateChangeEvent : uint8
{
	MouseCaptureGained                       = 0,
	MouseCaptureLost                         = 1,
};

// Enum SlateCore.ESlateDebuggingNavigationMethod
// NumValues: 0x0006
enum class ESlateDebuggingNavigationMethod : uint8
{
	Unknown                                  = 0,
	Explicit                                 = 1,
	CustomDelegateBound                      = 2,
	CustomDelegateUnbound                    = 3,
	NextOrPrevious                           = 4,
	HitTestGrid                              = 5,
};

// Enum SlateCore.ESlateDebuggingFocusEvent
// NumValues: 0x0004
enum class ESlateDebuggingFocusEvent : uint8
{
	FocusChanging                            = 0,
	FocusLost                                = 1,
	FocusReceived                            = 2,
	MAX                                      = 3,
};

// Enum SlateCore.EUINavigationAction
// NumValues: 0x0004
enum class EUINavigationAction : uint8
{
	Accept                                   = 0,
	Back                                     = 1,
	Num                                      = 2,
	Invalid                                  = 3,
};

// Enum SlateCore.ENavigationSource
// NumValues: 0x0002
enum class ENavigationSource : uint8
{
	FocusedWidget                            = 0,
	WidgetUnderCursor                        = 1,
};

// Enum SlateCore.ENavigationGenesis
// NumValues: 0x0003
enum class ENavigationGenesis : uint8
{
	Keyboard                                 = 0,
	Controller                               = 1,
	User                                     = 2,
};

// Enum SlateCore.EOrientation
// NumValues: 0x0002
enum class EOrientation : uint8
{
	Orient_Horizontal                        = 0,
	Orient_Vertical                          = 1,
};

// Enum SlateCore.EScrollDirection
// NumValues: 0x0002
enum class EScrollDirection : uint8
{
	Scroll_Down                              = 0,
	Scroll_Up                                = 1,
};

// Enum SlateCore.EConsumeMouseWheel
// NumValues: 0x0003
enum class EConsumeMouseWheel : uint8
{
	WhenScrollingPossible                    = 0,
	Always                                   = 1,
	Never                                    = 2,
};

// Enum SlateCore.ESlateParentWindowSearchMethod
// NumValues: 0x0002
enum class ESlateParentWindowSearchMethod : uint8
{
	ActiveWindow                             = 0,
	MainWindow                               = 1,
};

// Enum SlateCore.ESlateCheckBoxType
// NumValues: 0x0002
enum class ESlateCheckBoxType : uint8
{
	CheckBox                                 = 0,
	ToggleButton                             = 1,
};

// Enum SlateCore.EStyleColor
// NumValues: 0x003E
enum class EStyleColor : uint8
{
	Black                                    = 0,
	Background                               = 1,
	Title                                    = 2,
	WindowBorder                             = 3,
	Foldout                                  = 4,
	Input                                    = 5,
	InputOutline                             = 6,
	Recessed                                 = 7,
	Panel                                    = 8,
	Header                                   = 9,
	Dropdown                                 = 10,
	DropdownOutline                          = 11,
	Hover                                    = 12,
	Hover2                                   = 13,
	White                                    = 14,
	White25                                  = 15,
	Highlight                                = 16,
	Primary                                  = 17,
	PrimaryHover                             = 18,
	PrimaryPress                             = 19,
	Secondary                                = 20,
	Foreground                               = 21,
	ForegroundHover                          = 22,
	ForegroundInverted                       = 23,
	ForegroundHeader                         = 24,
	Select                                   = 25,
	SelectInactive                           = 26,
	SelectParent                             = 27,
	SelectHover                              = 28,
	Notifications                            = 29,
	AccentBlue                               = 30,
	AccentPurple                             = 31,
	AccentPink                               = 32,
	AccentRed                                = 33,
	AccentOrange                             = 34,
	AccentYellow                             = 35,
	AccentGreen                              = 36,
	AccentBrown                              = 37,
	AccentBlack                              = 38,
	AccentGray                               = 39,
	AccentWhite                              = 40,
	AccentFolder                             = 41,
	Warning                                  = 42,
	Error                                    = 43,
	Success                                  = 44,
	User1                                    = 45,
	User2                                    = 46,
	User3                                    = 47,
	User4                                    = 48,
	User5                                    = 49,
	User6                                    = 50,
	User7                                    = 51,
	User8                                    = 52,
	User9                                    = 53,
	User10                                   = 54,
	User11                                   = 55,
	User12                                   = 56,
	User13                                   = 57,
	User14                                   = 58,
	User15                                   = 59,
	User16                                   = 60,
	MAX                                      = 61,
};

// ScriptStruct SlateCore.FontData
// 0x0028 (0x0028 - 0x0000)
struct FFontData final
{
public:
	class FString                                 FontFilename;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10[0x4];                                       // 0x0010(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EFontHinting                                  Hinting;                                           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFontLoadingPolicy                            LoadingPolicy;                                     // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubFaceIndex;                                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                FontFaceAsset;                                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFontData) == 0x000008, "Wrong alignment on FFontData");
static_assert(sizeof(FFontData) == 0x000028, "Wrong size on FFontData");
static_assert(offsetof(FFontData, FontFilename) == 0x000000, "Member 'FFontData::FontFilename' has a wrong offset!");
static_assert(offsetof(FFontData, Hinting) == 0x000014, "Member 'FFontData::Hinting' has a wrong offset!");
static_assert(offsetof(FFontData, LoadingPolicy) == 0x000015, "Member 'FFontData::LoadingPolicy' has a wrong offset!");
static_assert(offsetof(FFontData, SubFaceIndex) == 0x000018, "Member 'FFontData::SubFaceIndex' has a wrong offset!");
static_assert(offsetof(FFontData, FontFaceAsset) == 0x000020, "Member 'FFontData::FontFaceAsset' has a wrong offset!");

// ScriptStruct SlateCore.Geometry
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x04) FGeometry final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometry) == 0x000004, "Wrong alignment on FGeometry");
static_assert(sizeof(FGeometry) == 0x000038, "Wrong size on FGeometry");

// ScriptStruct SlateCore.SlateSound
// 0x0018 (0x0018 - 0x0000)
struct FSlateSound final
{
public:
	class UObject*                                ResourceObject;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlateSound) == 0x000008, "Wrong alignment on FSlateSound");
static_assert(sizeof(FSlateSound) == 0x000018, "Wrong size on FSlateSound");
static_assert(offsetof(FSlateSound, ResourceObject) == 0x000000, "Member 'FSlateSound::ResourceObject' has a wrong offset!");

// ScriptStruct SlateCore.Margin
// 0x0010 (0x0010 - 0x0000)
struct FMargin final
{
public:
	float                                         Left;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Top;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Right;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bottom;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMargin) == 0x000004, "Wrong alignment on FMargin");
static_assert(sizeof(FMargin) == 0x000010, "Wrong size on FMargin");
static_assert(offsetof(FMargin, Left) == 0x000000, "Member 'FMargin::Left' has a wrong offset!");
static_assert(offsetof(FMargin, Top) == 0x000004, "Member 'FMargin::Top' has a wrong offset!");
static_assert(offsetof(FMargin, Right) == 0x000008, "Member 'FMargin::Right' has a wrong offset!");
static_assert(offsetof(FMargin, Bottom) == 0x00000C, "Member 'FMargin::Bottom' has a wrong offset!");

// ScriptStruct SlateCore.SlateColor
// 0x0014 (0x0014 - 0x0000)
struct FSlateColor final
{
public:
	struct FLinearColor                           SpecifiedColor;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateColorStylingMode                        ColorUseRule;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlateColor) == 0x000004, "Wrong alignment on FSlateColor");
static_assert(sizeof(FSlateColor) == 0x000014, "Wrong size on FSlateColor");
static_assert(offsetof(FSlateColor, SpecifiedColor) == 0x000000, "Member 'FSlateColor::SpecifiedColor' has a wrong offset!");
static_assert(offsetof(FSlateColor, ColorUseRule) == 0x000010, "Member 'FSlateColor::ColorUseRule' has a wrong offset!");

// ScriptStruct SlateCore.SlateBrushOutlineSettings
// 0x0030 (0x0030 - 0x0000)
struct FSlateBrushOutlineSettings final
{
public:
	struct FVector4                               CornerRadii;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            Color;                                             // 0x0010(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateBrushRoundingType                       RoundingType;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlateBrushOutlineSettings) == 0x000010, "Wrong alignment on FSlateBrushOutlineSettings");
static_assert(sizeof(FSlateBrushOutlineSettings) == 0x000030, "Wrong size on FSlateBrushOutlineSettings");
static_assert(offsetof(FSlateBrushOutlineSettings, CornerRadii) == 0x000000, "Member 'FSlateBrushOutlineSettings::CornerRadii' has a wrong offset!");
static_assert(offsetof(FSlateBrushOutlineSettings, Color) == 0x000010, "Member 'FSlateBrushOutlineSettings::Color' has a wrong offset!");
static_assert(offsetof(FSlateBrushOutlineSettings, Width) == 0x000024, "Member 'FSlateBrushOutlineSettings::Width' has a wrong offset!");
static_assert(offsetof(FSlateBrushOutlineSettings, RoundingType) == 0x000028, "Member 'FSlateBrushOutlineSettings::RoundingType' has a wrong offset!");

// ScriptStruct SlateCore.SlateBrush
// 0x00B0 (0x00B0 - 0x0000)
struct FSlateBrush final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ImageSize;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Margin;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateColor                            TintColor;                                         // 0x0028(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrushOutlineSettings             OutlineSettings;                                   // 0x0040(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UObject*                                ResourceObject;                                    // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResourceName;                                      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBox2D                                 UVRegion;                                          // 0x0080(0x0014)(ZeroConstructor, NoDestructor, Protected, NativeAccessSpecifierProtected)
	ESlateBrushDrawType                           DrawAs;                                            // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateBrushTileType                           Tiling;                                            // 0x0095(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateBrushMirrorType                         Mirroring;                                         // 0x0096(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateBrushImageType                          ImageType;                                         // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x10];                                      // 0x0098(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bIsDynamicallyLoaded : 1;                          // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bHasUObject : 1;                                   // 0x00A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Deprecated, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlateBrush) == 0x000010, "Wrong alignment on FSlateBrush");
static_assert(sizeof(FSlateBrush) == 0x0000B0, "Wrong size on FSlateBrush");
static_assert(offsetof(FSlateBrush, ImageSize) == 0x000010, "Member 'FSlateBrush::ImageSize' has a wrong offset!");
static_assert(offsetof(FSlateBrush, Margin) == 0x000018, "Member 'FSlateBrush::Margin' has a wrong offset!");
static_assert(offsetof(FSlateBrush, TintColor) == 0x000028, "Member 'FSlateBrush::TintColor' has a wrong offset!");
static_assert(offsetof(FSlateBrush, OutlineSettings) == 0x000040, "Member 'FSlateBrush::OutlineSettings' has a wrong offset!");
static_assert(offsetof(FSlateBrush, ResourceObject) == 0x000070, "Member 'FSlateBrush::ResourceObject' has a wrong offset!");
static_assert(offsetof(FSlateBrush, ResourceName) == 0x000078, "Member 'FSlateBrush::ResourceName' has a wrong offset!");
static_assert(offsetof(FSlateBrush, UVRegion) == 0x000080, "Member 'FSlateBrush::UVRegion' has a wrong offset!");
static_assert(offsetof(FSlateBrush, DrawAs) == 0x000094, "Member 'FSlateBrush::DrawAs' has a wrong offset!");
static_assert(offsetof(FSlateBrush, Tiling) == 0x000095, "Member 'FSlateBrush::Tiling' has a wrong offset!");
static_assert(offsetof(FSlateBrush, Mirroring) == 0x000096, "Member 'FSlateBrush::Mirroring' has a wrong offset!");
static_assert(offsetof(FSlateBrush, ImageType) == 0x000097, "Member 'FSlateBrush::ImageType' has a wrong offset!");

// ScriptStruct SlateCore.SlateWidgetStyle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSlateWidgetStyle
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlateWidgetStyle) == 0x000008, "Wrong alignment on FSlateWidgetStyle");
static_assert(sizeof(FSlateWidgetStyle) == 0x000008, "Wrong size on FSlateWidgetStyle");

// ScriptStruct SlateCore.ScrollBarStyle
// 0x0648 (0x0650 - 0x0008)
struct FScrollBarStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            HorizontalBackgroundImage;                         // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            VerticalBackgroundImage;                           // 0x00C0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            VerticalTopSlotImage;                              // 0x0170(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HorizontalTopSlotImage;                            // 0x0220(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            VerticalBottomSlotImage;                           // 0x02D0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HorizontalBottomSlotImage;                         // 0x0380(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NormalThumbImage;                                  // 0x0430(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredThumbImage;                                 // 0x04E0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DraggedThumbImage;                                 // 0x0590(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_644[0xC];                                      // 0x0644(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScrollBarStyle) == 0x000010, "Wrong alignment on FScrollBarStyle");
static_assert(sizeof(FScrollBarStyle) == 0x000650, "Wrong size on FScrollBarStyle");
static_assert(offsetof(FScrollBarStyle, HorizontalBackgroundImage) == 0x000010, "Member 'FScrollBarStyle::HorizontalBackgroundImage' has a wrong offset!");
static_assert(offsetof(FScrollBarStyle, VerticalBackgroundImage) == 0x0000C0, "Member 'FScrollBarStyle::VerticalBackgroundImage' has a wrong offset!");
static_assert(offsetof(FScrollBarStyle, VerticalTopSlotImage) == 0x000170, "Member 'FScrollBarStyle::VerticalTopSlotImage' has a wrong offset!");
static_assert(offsetof(FScrollBarStyle, HorizontalTopSlotImage) == 0x000220, "Member 'FScrollBarStyle::HorizontalTopSlotImage' has a wrong offset!");
static_assert(offsetof(FScrollBarStyle, VerticalBottomSlotImage) == 0x0002D0, "Member 'FScrollBarStyle::VerticalBottomSlotImage' has a wrong offset!");
static_assert(offsetof(FScrollBarStyle, HorizontalBottomSlotImage) == 0x000380, "Member 'FScrollBarStyle::HorizontalBottomSlotImage' has a wrong offset!");
static_assert(offsetof(FScrollBarStyle, NormalThumbImage) == 0x000430, "Member 'FScrollBarStyle::NormalThumbImage' has a wrong offset!");
static_assert(offsetof(FScrollBarStyle, HoveredThumbImage) == 0x0004E0, "Member 'FScrollBarStyle::HoveredThumbImage' has a wrong offset!");
static_assert(offsetof(FScrollBarStyle, DraggedThumbImage) == 0x000590, "Member 'FScrollBarStyle::DraggedThumbImage' has a wrong offset!");
static_assert(offsetof(FScrollBarStyle, Thickness) == 0x000640, "Member 'FScrollBarStyle::Thickness' has a wrong offset!");

// ScriptStruct SlateCore.FontOutlineSettings
// 0x0020 (0x0020 - 0x0000)
struct FFontOutlineSettings final
{
public:
	int32                                         OutlineSize;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSeparateFillAlpha;                                // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyOutlineToDropShadows;                        // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                OutlineMaterial;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutlineColor;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFontOutlineSettings) == 0x000008, "Wrong alignment on FFontOutlineSettings");
static_assert(sizeof(FFontOutlineSettings) == 0x000020, "Wrong size on FFontOutlineSettings");
static_assert(offsetof(FFontOutlineSettings, OutlineSize) == 0x000000, "Member 'FFontOutlineSettings::OutlineSize' has a wrong offset!");
static_assert(offsetof(FFontOutlineSettings, bSeparateFillAlpha) == 0x000004, "Member 'FFontOutlineSettings::bSeparateFillAlpha' has a wrong offset!");
static_assert(offsetof(FFontOutlineSettings, bApplyOutlineToDropShadows) == 0x000005, "Member 'FFontOutlineSettings::bApplyOutlineToDropShadows' has a wrong offset!");
static_assert(offsetof(FFontOutlineSettings, OutlineMaterial) == 0x000008, "Member 'FFontOutlineSettings::OutlineMaterial' has a wrong offset!");
static_assert(offsetof(FFontOutlineSettings, OutlineColor) == 0x000010, "Member 'FFontOutlineSettings::OutlineColor' has a wrong offset!");

// ScriptStruct SlateCore.SlateFontInfo
// 0x0058 (0x0058 - 0x0000)
struct FSlateFontInfo final
{
public:
	class UObject*                                FontObject;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                FontMaterial;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFontOutlineSettings                   OutlineSettings;                                   // 0x0010(0x0020)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TypefaceFontName;                                  // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LetterSpacing;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlateFontInfo) == 0x000008, "Wrong alignment on FSlateFontInfo");
static_assert(sizeof(FSlateFontInfo) == 0x000058, "Wrong size on FSlateFontInfo");
static_assert(offsetof(FSlateFontInfo, FontObject) == 0x000000, "Member 'FSlateFontInfo::FontObject' has a wrong offset!");
static_assert(offsetof(FSlateFontInfo, FontMaterial) == 0x000008, "Member 'FSlateFontInfo::FontMaterial' has a wrong offset!");
static_assert(offsetof(FSlateFontInfo, OutlineSettings) == 0x000010, "Member 'FSlateFontInfo::OutlineSettings' has a wrong offset!");
static_assert(offsetof(FSlateFontInfo, TypefaceFontName) == 0x000040, "Member 'FSlateFontInfo::TypefaceFontName' has a wrong offset!");
static_assert(offsetof(FSlateFontInfo, Size) == 0x000048, "Member 'FSlateFontInfo::Size' has a wrong offset!");
static_assert(offsetof(FSlateFontInfo, LetterSpacing) == 0x00004C, "Member 'FSlateFontInfo::LetterSpacing' has a wrong offset!");

// ScriptStruct SlateCore.EditableTextBoxStyle
// 0x09F8 (0x0A00 - 0x0008)
struct FEditableTextBoxStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundImageNormal;                             // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundImageHovered;                            // 0x00C0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundImageFocused;                            // 0x0170(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundImageReadOnly;                           // 0x0220(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x02E0(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ForegroundColor;                                   // 0x0338(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            BackgroundColor;                                   // 0x034C(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            ReadOnlyForegroundColor;                           // 0x0360(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            FocusedForegroundColor;                            // 0x0374(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                HScrollBarPadding;                                 // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                VScrollBarPadding;                                 // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A8[0x8];                                      // 0x03A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScrollBarStyle                        ScrollBarStyle;                                    // 0x03B0(0x0650)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEditableTextBoxStyle) == 0x000010, "Wrong alignment on FEditableTextBoxStyle");
static_assert(sizeof(FEditableTextBoxStyle) == 0x000A00, "Wrong size on FEditableTextBoxStyle");
static_assert(offsetof(FEditableTextBoxStyle, BackgroundImageNormal) == 0x000010, "Member 'FEditableTextBoxStyle::BackgroundImageNormal' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, BackgroundImageHovered) == 0x0000C0, "Member 'FEditableTextBoxStyle::BackgroundImageHovered' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, BackgroundImageFocused) == 0x000170, "Member 'FEditableTextBoxStyle::BackgroundImageFocused' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, BackgroundImageReadOnly) == 0x000220, "Member 'FEditableTextBoxStyle::BackgroundImageReadOnly' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, Padding) == 0x0002D0, "Member 'FEditableTextBoxStyle::Padding' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, Font) == 0x0002E0, "Member 'FEditableTextBoxStyle::Font' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, ForegroundColor) == 0x000338, "Member 'FEditableTextBoxStyle::ForegroundColor' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, BackgroundColor) == 0x00034C, "Member 'FEditableTextBoxStyle::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, ReadOnlyForegroundColor) == 0x000360, "Member 'FEditableTextBoxStyle::ReadOnlyForegroundColor' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, FocusedForegroundColor) == 0x000374, "Member 'FEditableTextBoxStyle::FocusedForegroundColor' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, HScrollBarPadding) == 0x000388, "Member 'FEditableTextBoxStyle::HScrollBarPadding' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, VScrollBarPadding) == 0x000398, "Member 'FEditableTextBoxStyle::VScrollBarPadding' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, ScrollBarStyle) == 0x0003B0, "Member 'FEditableTextBoxStyle::ScrollBarStyle' has a wrong offset!");

// ScriptStruct SlateCore.TextBlockStyle
// 0x02D8 (0x02E0 - 0x0008)
struct FTextBlockStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0008(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorAndOpacity;                                   // 0x0060(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x0074(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x007C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            SelectedBackgroundColor;                           // 0x008C(0x0014)(Edit, NativeAccessSpecifierPublic)
	struct FSlateColor                            HighlightColor;                                    // 0x00A0(0x0014)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0xC];                                       // 0x00B4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            HighlightShape;                                    // 0x00C0(0x00B0)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateBrush                            StrikeBrush;                                       // 0x0170(0x00B0)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UnderlineBrush;                                    // 0x0220(0x00B0)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	ETextTransformPolicy                          TransformPolicy;                                   // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextOverflowPolicy                           OverflowPolicy;                                    // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D2[0xE];                                      // 0x02D2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTextBlockStyle) == 0x000010, "Wrong alignment on FTextBlockStyle");
static_assert(sizeof(FTextBlockStyle) == 0x0002E0, "Wrong size on FTextBlockStyle");
static_assert(offsetof(FTextBlockStyle, Font) == 0x000008, "Member 'FTextBlockStyle::Font' has a wrong offset!");
static_assert(offsetof(FTextBlockStyle, ColorAndOpacity) == 0x000060, "Member 'FTextBlockStyle::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FTextBlockStyle, ShadowOffset) == 0x000074, "Member 'FTextBlockStyle::ShadowOffset' has a wrong offset!");
static_assert(offsetof(FTextBlockStyle, ShadowColorAndOpacity) == 0x00007C, "Member 'FTextBlockStyle::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FTextBlockStyle, SelectedBackgroundColor) == 0x00008C, "Member 'FTextBlockStyle::SelectedBackgroundColor' has a wrong offset!");
static_assert(offsetof(FTextBlockStyle, HighlightColor) == 0x0000A0, "Member 'FTextBlockStyle::HighlightColor' has a wrong offset!");
static_assert(offsetof(FTextBlockStyle, HighlightShape) == 0x0000C0, "Member 'FTextBlockStyle::HighlightShape' has a wrong offset!");
static_assert(offsetof(FTextBlockStyle, StrikeBrush) == 0x000170, "Member 'FTextBlockStyle::StrikeBrush' has a wrong offset!");
static_assert(offsetof(FTextBlockStyle, UnderlineBrush) == 0x000220, "Member 'FTextBlockStyle::UnderlineBrush' has a wrong offset!");
static_assert(offsetof(FTextBlockStyle, TransformPolicy) == 0x0002D0, "Member 'FTextBlockStyle::TransformPolicy' has a wrong offset!");
static_assert(offsetof(FTextBlockStyle, OverflowPolicy) == 0x0002D1, "Member 'FTextBlockStyle::OverflowPolicy' has a wrong offset!");

// ScriptStruct SlateCore.InlineEditableTextBlockStyle
// 0x0CE8 (0x0CF0 - 0x0008)
struct FInlineEditableTextBlockStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEditableTextBoxStyle                  EditableTextBoxStyle;                              // 0x0010(0x0A00)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        TextStyle;                                         // 0x0A10(0x02E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInlineEditableTextBlockStyle) == 0x000010, "Wrong alignment on FInlineEditableTextBlockStyle");
static_assert(sizeof(FInlineEditableTextBlockStyle) == 0x000CF0, "Wrong size on FInlineEditableTextBlockStyle");
static_assert(offsetof(FInlineEditableTextBlockStyle, EditableTextBoxStyle) == 0x000010, "Member 'FInlineEditableTextBlockStyle::EditableTextBoxStyle' has a wrong offset!");
static_assert(offsetof(FInlineEditableTextBlockStyle, TextStyle) == 0x000A10, "Member 'FInlineEditableTextBlockStyle::TextStyle' has a wrong offset!");

// ScriptStruct SlateCore.InputEvent
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FInputEvent
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputEvent) == 0x000008, "Wrong alignment on FInputEvent");
static_assert(sizeof(FInputEvent) == 0x000018, "Wrong size on FInputEvent");

// ScriptStruct SlateCore.PointerEvent
// 0x0058 (0x0070 - 0x0018)
struct FPointerEvent final : public FInputEvent
{
public:
	uint8                                         Pad_18[0x58];                                      // 0x0018(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPointerEvent) == 0x000008, "Wrong alignment on FPointerEvent");
static_assert(sizeof(FPointerEvent) == 0x000070, "Wrong size on FPointerEvent");

// ScriptStruct SlateCore.SplitterStyle
// 0x0168 (0x0170 - 0x0008)
struct FSplitterStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            HandleNormalBrush;                                 // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HandleHighlightBrush;                              // 0x00C0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSplitterStyle) == 0x000010, "Wrong alignment on FSplitterStyle");
static_assert(sizeof(FSplitterStyle) == 0x000170, "Wrong size on FSplitterStyle");
static_assert(offsetof(FSplitterStyle, HandleNormalBrush) == 0x000010, "Member 'FSplitterStyle::HandleNormalBrush' has a wrong offset!");
static_assert(offsetof(FSplitterStyle, HandleHighlightBrush) == 0x0000C0, "Member 'FSplitterStyle::HandleHighlightBrush' has a wrong offset!");

// ScriptStruct SlateCore.ButtonStyle
// 0x0368 (0x0370 - 0x0008)
struct FButtonStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Normal;                                            // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Hovered;                                           // 0x00C0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Pressed;                                           // 0x0170(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Disabled;                                          // 0x0220(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            NormalForeground;                                  // 0x02D0(0x0014)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateColor                            HoveredForeground;                                 // 0x02E4(0x0014)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateColor                            PressedForeground;                                 // 0x02F8(0x0014)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateColor                            DisabledForeground;                                // 0x030C(0x0014)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FMargin                                NormalPadding;                                     // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                PressedPadding;                                    // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            PressedSlateSound;                                 // 0x0340(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            HoveredSlateSound;                                 // 0x0358(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FButtonStyle) == 0x000010, "Wrong alignment on FButtonStyle");
static_assert(sizeof(FButtonStyle) == 0x000370, "Wrong size on FButtonStyle");
static_assert(offsetof(FButtonStyle, Normal) == 0x000010, "Member 'FButtonStyle::Normal' has a wrong offset!");
static_assert(offsetof(FButtonStyle, Hovered) == 0x0000C0, "Member 'FButtonStyle::Hovered' has a wrong offset!");
static_assert(offsetof(FButtonStyle, Pressed) == 0x000170, "Member 'FButtonStyle::Pressed' has a wrong offset!");
static_assert(offsetof(FButtonStyle, Disabled) == 0x000220, "Member 'FButtonStyle::Disabled' has a wrong offset!");
static_assert(offsetof(FButtonStyle, NormalForeground) == 0x0002D0, "Member 'FButtonStyle::NormalForeground' has a wrong offset!");
static_assert(offsetof(FButtonStyle, HoveredForeground) == 0x0002E4, "Member 'FButtonStyle::HoveredForeground' has a wrong offset!");
static_assert(offsetof(FButtonStyle, PressedForeground) == 0x0002F8, "Member 'FButtonStyle::PressedForeground' has a wrong offset!");
static_assert(offsetof(FButtonStyle, DisabledForeground) == 0x00030C, "Member 'FButtonStyle::DisabledForeground' has a wrong offset!");
static_assert(offsetof(FButtonStyle, NormalPadding) == 0x000320, "Member 'FButtonStyle::NormalPadding' has a wrong offset!");
static_assert(offsetof(FButtonStyle, PressedPadding) == 0x000330, "Member 'FButtonStyle::PressedPadding' has a wrong offset!");
static_assert(offsetof(FButtonStyle, PressedSlateSound) == 0x000340, "Member 'FButtonStyle::PressedSlateSound' has a wrong offset!");
static_assert(offsetof(FButtonStyle, HoveredSlateSound) == 0x000358, "Member 'FButtonStyle::HoveredSlateSound' has a wrong offset!");

// ScriptStruct SlateCore.ComboButtonStyle
// 0x0538 (0x0540 - 0x0008)
struct FComboButtonStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           ButtonStyle;                                       // 0x0010(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DownArrowImage;                                    // 0x0380(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_448[0x8];                                      // 0x0448(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            MenuBorderBrush;                                   // 0x0450(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                MenuBorderPadding;                                 // 0x0500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ContentPadding;                                    // 0x0510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                DownArrowPadding;                                  // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EVerticalAlignment                            DownArrowAlign;                                    // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_531[0xF];                                      // 0x0531(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FComboButtonStyle) == 0x000010, "Wrong alignment on FComboButtonStyle");
static_assert(sizeof(FComboButtonStyle) == 0x000540, "Wrong size on FComboButtonStyle");
static_assert(offsetof(FComboButtonStyle, ButtonStyle) == 0x000010, "Member 'FComboButtonStyle::ButtonStyle' has a wrong offset!");
static_assert(offsetof(FComboButtonStyle, DownArrowImage) == 0x000380, "Member 'FComboButtonStyle::DownArrowImage' has a wrong offset!");
static_assert(offsetof(FComboButtonStyle, ShadowOffset) == 0x000430, "Member 'FComboButtonStyle::ShadowOffset' has a wrong offset!");
static_assert(offsetof(FComboButtonStyle, ShadowColorAndOpacity) == 0x000438, "Member 'FComboButtonStyle::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FComboButtonStyle, MenuBorderBrush) == 0x000450, "Member 'FComboButtonStyle::MenuBorderBrush' has a wrong offset!");
static_assert(offsetof(FComboButtonStyle, MenuBorderPadding) == 0x000500, "Member 'FComboButtonStyle::MenuBorderPadding' has a wrong offset!");
static_assert(offsetof(FComboButtonStyle, ContentPadding) == 0x000510, "Member 'FComboButtonStyle::ContentPadding' has a wrong offset!");
static_assert(offsetof(FComboButtonStyle, DownArrowPadding) == 0x000520, "Member 'FComboButtonStyle::DownArrowPadding' has a wrong offset!");
static_assert(offsetof(FComboButtonStyle, DownArrowAlign) == 0x000530, "Member 'FComboButtonStyle::DownArrowAlign' has a wrong offset!");

// ScriptStruct SlateCore.TypefaceEntry
// 0x0030 (0x0030 - 0x0000)
struct FTypefaceEntry final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFontData                              Font;                                              // 0x0008(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypefaceEntry) == 0x000008, "Wrong alignment on FTypefaceEntry");
static_assert(sizeof(FTypefaceEntry) == 0x000030, "Wrong size on FTypefaceEntry");
static_assert(offsetof(FTypefaceEntry, Name) == 0x000000, "Member 'FTypefaceEntry::Name' has a wrong offset!");
static_assert(offsetof(FTypefaceEntry, Font) == 0x000008, "Member 'FTypefaceEntry::Font' has a wrong offset!");

// ScriptStruct SlateCore.Typeface
// 0x0010 (0x0010 - 0x0000)
struct FTypeface final
{
public:
	TArray<struct FTypefaceEntry>                 Fonts;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypeface) == 0x000008, "Wrong alignment on FTypeface");
static_assert(sizeof(FTypeface) == 0x000010, "Wrong size on FTypeface");
static_assert(offsetof(FTypeface, Fonts) == 0x000000, "Member 'FTypeface::Fonts' has a wrong offset!");

// ScriptStruct SlateCore.CompositeFallbackFont
// 0x0018 (0x0018 - 0x0000)
struct FCompositeFallbackFont
{
public:
	struct FTypeface                              Typeface;                                          // 0x0000(0x0010)(NativeAccessSpecifierPublic)
	float                                         ScalingFactor;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCompositeFallbackFont) == 0x000008, "Wrong alignment on FCompositeFallbackFont");
static_assert(sizeof(FCompositeFallbackFont) == 0x000018, "Wrong size on FCompositeFallbackFont");
static_assert(offsetof(FCompositeFallbackFont, Typeface) == 0x000000, "Member 'FCompositeFallbackFont::Typeface' has a wrong offset!");
static_assert(offsetof(FCompositeFallbackFont, ScalingFactor) == 0x000010, "Member 'FCompositeFallbackFont::ScalingFactor' has a wrong offset!");

// ScriptStruct SlateCore.CompositeSubFont
// 0x0020 (0x0038 - 0x0018)
struct FCompositeSubFont final : public FCompositeFallbackFont
{
public:
	TArray<struct FInt32Range>                    CharacterRanges;                                   // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Cultures;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompositeSubFont) == 0x000008, "Wrong alignment on FCompositeSubFont");
static_assert(sizeof(FCompositeSubFont) == 0x000038, "Wrong size on FCompositeSubFont");
static_assert(offsetof(FCompositeSubFont, CharacterRanges) == 0x000018, "Member 'FCompositeSubFont::CharacterRanges' has a wrong offset!");
static_assert(offsetof(FCompositeSubFont, Cultures) == 0x000028, "Member 'FCompositeSubFont::Cultures' has a wrong offset!");

// ScriptStruct SlateCore.CompositeFont
// 0x0038 (0x0038 - 0x0000)
struct FCompositeFont final
{
public:
	struct FTypeface                              DefaultTypeface;                                   // 0x0000(0x0010)(NativeAccessSpecifierPublic)
	struct FCompositeFallbackFont                 FallbackTypeface;                                  // 0x0010(0x0018)(NativeAccessSpecifierPublic)
	TArray<struct FCompositeSubFont>              SubTypefaces;                                      // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompositeFont) == 0x000008, "Wrong alignment on FCompositeFont");
static_assert(sizeof(FCompositeFont) == 0x000038, "Wrong size on FCompositeFont");
static_assert(offsetof(FCompositeFont, DefaultTypeface) == 0x000000, "Member 'FCompositeFont::DefaultTypeface' has a wrong offset!");
static_assert(offsetof(FCompositeFont, FallbackTypeface) == 0x000010, "Member 'FCompositeFont::FallbackTypeface' has a wrong offset!");
static_assert(offsetof(FCompositeFont, SubTypefaces) == 0x000028, "Member 'FCompositeFont::SubTypefaces' has a wrong offset!");

// ScriptStruct SlateCore.TableRowStyle
// 0x09D8 (0x09E0 - 0x0008)
struct FTableRowStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            SelectorFocusedBrush;                              // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ActiveHoveredBrush;                                // 0x00C0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ActiveBrush;                                       // 0x0170(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            InactiveHoveredBrush;                              // 0x0220(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            InactiveBrush;                                     // 0x02D0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            EvenRowBackgroundHoveredBrush;                     // 0x0380(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            EvenRowBackgroundBrush;                            // 0x0430(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            OddRowBackgroundHoveredBrush;                      // 0x04E0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            OddRowBackgroundBrush;                             // 0x0590(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            TextColor;                                         // 0x0640(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            SelectedTextColor;                                 // 0x0654(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_668[0x8];                                      // 0x0668(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            DropIndicator_Above;                               // 0x0670(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DropIndicator_Onto;                                // 0x0720(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DropIndicator_Below;                               // 0x07D0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ActiveHighlightedBrush;                            // 0x0880(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            InactiveHighlightedBrush;                          // 0x0930(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTableRowStyle) == 0x000010, "Wrong alignment on FTableRowStyle");
static_assert(sizeof(FTableRowStyle) == 0x0009E0, "Wrong size on FTableRowStyle");
static_assert(offsetof(FTableRowStyle, SelectorFocusedBrush) == 0x000010, "Member 'FTableRowStyle::SelectorFocusedBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, ActiveHoveredBrush) == 0x0000C0, "Member 'FTableRowStyle::ActiveHoveredBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, ActiveBrush) == 0x000170, "Member 'FTableRowStyle::ActiveBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, InactiveHoveredBrush) == 0x000220, "Member 'FTableRowStyle::InactiveHoveredBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, InactiveBrush) == 0x0002D0, "Member 'FTableRowStyle::InactiveBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, EvenRowBackgroundHoveredBrush) == 0x000380, "Member 'FTableRowStyle::EvenRowBackgroundHoveredBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, EvenRowBackgroundBrush) == 0x000430, "Member 'FTableRowStyle::EvenRowBackgroundBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, OddRowBackgroundHoveredBrush) == 0x0004E0, "Member 'FTableRowStyle::OddRowBackgroundHoveredBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, OddRowBackgroundBrush) == 0x000590, "Member 'FTableRowStyle::OddRowBackgroundBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, TextColor) == 0x000640, "Member 'FTableRowStyle::TextColor' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, SelectedTextColor) == 0x000654, "Member 'FTableRowStyle::SelectedTextColor' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, DropIndicator_Above) == 0x000670, "Member 'FTableRowStyle::DropIndicator_Above' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, DropIndicator_Onto) == 0x000720, "Member 'FTableRowStyle::DropIndicator_Onto' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, DropIndicator_Below) == 0x0007D0, "Member 'FTableRowStyle::DropIndicator_Below' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, ActiveHighlightedBrush) == 0x000880, "Member 'FTableRowStyle::ActiveHighlightedBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, InactiveHighlightedBrush) == 0x000930, "Member 'FTableRowStyle::InactiveHighlightedBrush' has a wrong offset!");

// ScriptStruct SlateCore.StyleColorList
// 0x0988 (0x0988 - 0x0000)
struct alignas(0x08) FStyleColorList final
{
public:
	struct FLinearColor                           StyleColors[0x3D];                                 // 0x0000(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D0[0x5B8];                                    // 0x03D0(0x05B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStyleColorList) == 0x000008, "Wrong alignment on FStyleColorList");
static_assert(sizeof(FStyleColorList) == 0x000988, "Wrong size on FStyleColorList");
static_assert(offsetof(FStyleColorList, StyleColors) == 0x000000, "Member 'FStyleColorList::StyleColors' has a wrong offset!");

// ScriptStruct SlateCore.ComboBoxStyle
// 0x0598 (0x05A0 - 0x0008)
struct FComboBoxStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComboButtonStyle                      ComboButtonStyle;                                  // 0x0010(0x0540)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateSound                            PressedSlateSound;                                 // 0x0550(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            SelectionChangeSlateSound;                         // 0x0568(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ContentPadding;                                    // 0x0580(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                MenuRowPadding;                                    // 0x0590(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComboBoxStyle) == 0x000010, "Wrong alignment on FComboBoxStyle");
static_assert(sizeof(FComboBoxStyle) == 0x0005A0, "Wrong size on FComboBoxStyle");
static_assert(offsetof(FComboBoxStyle, ComboButtonStyle) == 0x000010, "Member 'FComboBoxStyle::ComboButtonStyle' has a wrong offset!");
static_assert(offsetof(FComboBoxStyle, PressedSlateSound) == 0x000550, "Member 'FComboBoxStyle::PressedSlateSound' has a wrong offset!");
static_assert(offsetof(FComboBoxStyle, SelectionChangeSlateSound) == 0x000568, "Member 'FComboBoxStyle::SelectionChangeSlateSound' has a wrong offset!");
static_assert(offsetof(FComboBoxStyle, ContentPadding) == 0x000580, "Member 'FComboBoxStyle::ContentPadding' has a wrong offset!");
static_assert(offsetof(FComboBoxStyle, MenuRowPadding) == 0x000590, "Member 'FComboBoxStyle::MenuRowPadding' has a wrong offset!");

// ScriptStruct SlateCore.EditableTextStyle
// 0x0288 (0x0290 - 0x0008)
struct FEditableTextStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0008(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorAndOpacity;                                   // 0x0060(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundImageSelected;                           // 0x0080(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundImageComposing;                          // 0x0130(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CaretImage;                                        // 0x01E0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEditableTextStyle) == 0x000010, "Wrong alignment on FEditableTextStyle");
static_assert(sizeof(FEditableTextStyle) == 0x000290, "Wrong size on FEditableTextStyle");
static_assert(offsetof(FEditableTextStyle, Font) == 0x000008, "Member 'FEditableTextStyle::Font' has a wrong offset!");
static_assert(offsetof(FEditableTextStyle, ColorAndOpacity) == 0x000060, "Member 'FEditableTextStyle::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FEditableTextStyle, BackgroundImageSelected) == 0x000080, "Member 'FEditableTextStyle::BackgroundImageSelected' has a wrong offset!");
static_assert(offsetof(FEditableTextStyle, BackgroundImageComposing) == 0x000130, "Member 'FEditableTextStyle::BackgroundImageComposing' has a wrong offset!");
static_assert(offsetof(FEditableTextStyle, CaretImage) == 0x0001E0, "Member 'FEditableTextStyle::CaretImage' has a wrong offset!");

// ScriptStruct SlateCore.DockTabStyle
// 0x0BB8 (0x0BC0 - 0x0008)
struct FDockTabStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           CloseButtonStyle;                                  // 0x0010(0x0370)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NormalBrush;                                       // 0x0380(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ColorOverlayTabBrush;                              // 0x0430(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ColorOverlayIconBrush;                             // 0x04E0(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ForegroundBrush;                                   // 0x0590(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredBrush;                                      // 0x0640(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ContentAreaBrush;                                  // 0x06F0(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            TabWellBrush;                                      // 0x07A0(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        TabTextStyle;                                      // 0x0850(0x02E0)(Edit, NativeAccessSpecifierPublic)
	struct FMargin                                TabPadding;                                        // 0x0B30(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              IconSize;                                          // 0x0B40(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlapWidth;                                      // 0x0B48(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            FlashColor;                                        // 0x0B4C(0x0014)(Edit, NativeAccessSpecifierPublic)
	struct FSlateColor                            NormalForegroundColor;                             // 0x0B60(0x0014)(Edit, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateColor                            HoveredForegroundColor;                            // 0x0B74(0x0014)(Edit, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateColor                            ActiveForegroundColor;                             // 0x0B88(0x0014)(Edit, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateColor                            ForegroundForegroundColor;                         // 0x0B9C(0x0014)(Edit, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         IconBorderPadding;                                 // 0x0BB0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BB4[0xC];                                      // 0x0BB4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDockTabStyle) == 0x000010, "Wrong alignment on FDockTabStyle");
static_assert(sizeof(FDockTabStyle) == 0x000BC0, "Wrong size on FDockTabStyle");
static_assert(offsetof(FDockTabStyle, CloseButtonStyle) == 0x000010, "Member 'FDockTabStyle::CloseButtonStyle' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, NormalBrush) == 0x000380, "Member 'FDockTabStyle::NormalBrush' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, ColorOverlayTabBrush) == 0x000430, "Member 'FDockTabStyle::ColorOverlayTabBrush' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, ColorOverlayIconBrush) == 0x0004E0, "Member 'FDockTabStyle::ColorOverlayIconBrush' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, ForegroundBrush) == 0x000590, "Member 'FDockTabStyle::ForegroundBrush' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, HoveredBrush) == 0x000640, "Member 'FDockTabStyle::HoveredBrush' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, ContentAreaBrush) == 0x0006F0, "Member 'FDockTabStyle::ContentAreaBrush' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, TabWellBrush) == 0x0007A0, "Member 'FDockTabStyle::TabWellBrush' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, TabTextStyle) == 0x000850, "Member 'FDockTabStyle::TabTextStyle' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, TabPadding) == 0x000B30, "Member 'FDockTabStyle::TabPadding' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, IconSize) == 0x000B40, "Member 'FDockTabStyle::IconSize' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, OverlapWidth) == 0x000B48, "Member 'FDockTabStyle::OverlapWidth' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, FlashColor) == 0x000B4C, "Member 'FDockTabStyle::FlashColor' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, NormalForegroundColor) == 0x000B60, "Member 'FDockTabStyle::NormalForegroundColor' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, HoveredForegroundColor) == 0x000B74, "Member 'FDockTabStyle::HoveredForegroundColor' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, ActiveForegroundColor) == 0x000B88, "Member 'FDockTabStyle::ActiveForegroundColor' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, ForegroundForegroundColor) == 0x000B9C, "Member 'FDockTabStyle::ForegroundForegroundColor' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, IconBorderPadding) == 0x000BB0, "Member 'FDockTabStyle::IconBorderPadding' has a wrong offset!");

// ScriptStruct SlateCore.SearchBoxStyle
// 0x0D48 (0x0D50 - 0x0008)
struct FSearchBoxStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEditableTextBoxStyle                  TextBoxStyle;                                      // 0x0010(0x0A00)(Edit, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         ActiveFontInfo;                                    // 0x0A10(0x0058)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A68[0x8];                                      // 0x0A68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            UpArrowImage;                                      // 0x0A70(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DownArrowImage;                                    // 0x0B20(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            GlassImage;                                        // 0x0BD0(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ClearImage;                                        // 0x0C80(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FMargin                                ImagePadding;                                      // 0x0D30(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLeftAlignButtons;                                 // 0x0D40(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D41[0xF];                                      // 0x0D41(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSearchBoxStyle) == 0x000010, "Wrong alignment on FSearchBoxStyle");
static_assert(sizeof(FSearchBoxStyle) == 0x000D50, "Wrong size on FSearchBoxStyle");
static_assert(offsetof(FSearchBoxStyle, TextBoxStyle) == 0x000010, "Member 'FSearchBoxStyle::TextBoxStyle' has a wrong offset!");
static_assert(offsetof(FSearchBoxStyle, ActiveFontInfo) == 0x000A10, "Member 'FSearchBoxStyle::ActiveFontInfo' has a wrong offset!");
static_assert(offsetof(FSearchBoxStyle, UpArrowImage) == 0x000A70, "Member 'FSearchBoxStyle::UpArrowImage' has a wrong offset!");
static_assert(offsetof(FSearchBoxStyle, DownArrowImage) == 0x000B20, "Member 'FSearchBoxStyle::DownArrowImage' has a wrong offset!");
static_assert(offsetof(FSearchBoxStyle, GlassImage) == 0x000BD0, "Member 'FSearchBoxStyle::GlassImage' has a wrong offset!");
static_assert(offsetof(FSearchBoxStyle, ClearImage) == 0x000C80, "Member 'FSearchBoxStyle::ClearImage' has a wrong offset!");
static_assert(offsetof(FSearchBoxStyle, ImagePadding) == 0x000D30, "Member 'FSearchBoxStyle::ImagePadding' has a wrong offset!");
static_assert(offsetof(FSearchBoxStyle, bLeftAlignButtons) == 0x000D40, "Member 'FSearchBoxStyle::bLeftAlignButtons' has a wrong offset!");

// ScriptStruct SlateCore.TableViewStyle
// 0x00B8 (0x00C0 - 0x0008)
struct FTableViewStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundBrush;                                   // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTableViewStyle) == 0x000010, "Wrong alignment on FTableViewStyle");
static_assert(sizeof(FTableViewStyle) == 0x0000C0, "Wrong size on FTableViewStyle");
static_assert(offsetof(FTableViewStyle, BackgroundBrush) == 0x000010, "Member 'FTableViewStyle::BackgroundBrush' has a wrong offset!");

// ScriptStruct SlateCore.SpinBoxStyle
// 0x0518 (0x0520 - 0x0008)
struct FSpinBoxStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundBrush;                                   // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ActiveBackgroundBrush;                             // 0x00C0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredBackgroundBrush;                            // 0x0170(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ActiveFillBrush;                                   // 0x0220(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredFillBrush;                                  // 0x02D0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            InactiveFillBrush;                                 // 0x0380(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ArrowsImage;                                       // 0x0430(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            ForegroundColor;                                   // 0x04E0(0x0014)(NativeAccessSpecifierPublic)
	struct FMargin                                TextPadding;                                       // 0x04F4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                InsetPadding;                                      // 0x0504(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_514[0xC];                                      // 0x0514(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpinBoxStyle) == 0x000010, "Wrong alignment on FSpinBoxStyle");
static_assert(sizeof(FSpinBoxStyle) == 0x000520, "Wrong size on FSpinBoxStyle");
static_assert(offsetof(FSpinBoxStyle, BackgroundBrush) == 0x000010, "Member 'FSpinBoxStyle::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FSpinBoxStyle, ActiveBackgroundBrush) == 0x0000C0, "Member 'FSpinBoxStyle::ActiveBackgroundBrush' has a wrong offset!");
static_assert(offsetof(FSpinBoxStyle, HoveredBackgroundBrush) == 0x000170, "Member 'FSpinBoxStyle::HoveredBackgroundBrush' has a wrong offset!");
static_assert(offsetof(FSpinBoxStyle, ActiveFillBrush) == 0x000220, "Member 'FSpinBoxStyle::ActiveFillBrush' has a wrong offset!");
static_assert(offsetof(FSpinBoxStyle, HoveredFillBrush) == 0x0002D0, "Member 'FSpinBoxStyle::HoveredFillBrush' has a wrong offset!");
static_assert(offsetof(FSpinBoxStyle, InactiveFillBrush) == 0x000380, "Member 'FSpinBoxStyle::InactiveFillBrush' has a wrong offset!");
static_assert(offsetof(FSpinBoxStyle, ArrowsImage) == 0x000430, "Member 'FSpinBoxStyle::ArrowsImage' has a wrong offset!");
static_assert(offsetof(FSpinBoxStyle, ForegroundColor) == 0x0004E0, "Member 'FSpinBoxStyle::ForegroundColor' has a wrong offset!");
static_assert(offsetof(FSpinBoxStyle, TextPadding) == 0x0004F4, "Member 'FSpinBoxStyle::TextPadding' has a wrong offset!");
static_assert(offsetof(FSpinBoxStyle, InsetPadding) == 0x000504, "Member 'FSpinBoxStyle::InsetPadding' has a wrong offset!");

// ScriptStruct SlateCore.CharacterEvent
// 0x0008 (0x0020 - 0x0018)
struct FCharacterEvent final : public FInputEvent
{
public:
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterEvent) == 0x000008, "Wrong alignment on FCharacterEvent");
static_assert(sizeof(FCharacterEvent) == 0x000020, "Wrong size on FCharacterEvent");

// ScriptStruct SlateCore.SliderStyle
// 0x0438 (0x0440 - 0x0008)
struct FSliderStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            NormalBarImage;                                    // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredBarImage;                                   // 0x00C0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DisabledBarImage;                                  // 0x0170(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NormalThumbImage;                                  // 0x0220(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredThumbImage;                                 // 0x02D0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DisabledThumbImage;                                // 0x0380(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         BarThickness;                                      // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_434[0xC];                                      // 0x0434(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSliderStyle) == 0x000010, "Wrong alignment on FSliderStyle");
static_assert(sizeof(FSliderStyle) == 0x000440, "Wrong size on FSliderStyle");
static_assert(offsetof(FSliderStyle, NormalBarImage) == 0x000010, "Member 'FSliderStyle::NormalBarImage' has a wrong offset!");
static_assert(offsetof(FSliderStyle, HoveredBarImage) == 0x0000C0, "Member 'FSliderStyle::HoveredBarImage' has a wrong offset!");
static_assert(offsetof(FSliderStyle, DisabledBarImage) == 0x000170, "Member 'FSliderStyle::DisabledBarImage' has a wrong offset!");
static_assert(offsetof(FSliderStyle, NormalThumbImage) == 0x000220, "Member 'FSliderStyle::NormalThumbImage' has a wrong offset!");
static_assert(offsetof(FSliderStyle, HoveredThumbImage) == 0x0002D0, "Member 'FSliderStyle::HoveredThumbImage' has a wrong offset!");
static_assert(offsetof(FSliderStyle, DisabledThumbImage) == 0x000380, "Member 'FSliderStyle::DisabledThumbImage' has a wrong offset!");
static_assert(offsetof(FSliderStyle, BarThickness) == 0x000430, "Member 'FSliderStyle::BarThickness' has a wrong offset!");

// ScriptStruct SlateCore.KeyEvent
// 0x0020 (0x0038 - 0x0018)
struct FKeyEvent : public FInputEvent
{
public:
	uint8                                         Pad_18[0x20];                                      // 0x0018(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKeyEvent) == 0x000008, "Wrong alignment on FKeyEvent");
static_assert(sizeof(FKeyEvent) == 0x000038, "Wrong size on FKeyEvent");

// ScriptStruct SlateCore.StyleTheme
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FStyleTheme final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStyleTheme) == 0x000008, "Wrong alignment on FStyleTheme");
static_assert(sizeof(FStyleTheme) == 0x000048, "Wrong size on FStyleTheme");

// ScriptStruct SlateCore.NavigationEvent
// 0x0008 (0x0020 - 0x0018)
struct FNavigationEvent final : public FInputEvent
{
public:
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNavigationEvent) == 0x000008, "Wrong alignment on FNavigationEvent");
static_assert(sizeof(FNavigationEvent) == 0x000020, "Wrong size on FNavigationEvent");

// ScriptStruct SlateCore.AnalogInputEvent
// 0x0008 (0x0040 - 0x0038)
struct FAnalogInputEvent final : public FKeyEvent
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnalogInputEvent) == 0x000008, "Wrong alignment on FAnalogInputEvent");
static_assert(sizeof(FAnalogInputEvent) == 0x000040, "Wrong size on FAnalogInputEvent");

// ScriptStruct SlateCore.FocusEvent
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FFocusEvent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFocusEvent) == 0x000004, "Wrong alignment on FFocusEvent");
static_assert(sizeof(FFocusEvent) == 0x000008, "Wrong size on FFocusEvent");

// ScriptStruct SlateCore.MotionEvent
// 0x0030 (0x0048 - 0x0018)
struct FMotionEvent final : public FInputEvent
{
public:
	uint8                                         Pad_18[0x30];                                      // 0x0018(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMotionEvent) == 0x000008, "Wrong alignment on FMotionEvent");
static_assert(sizeof(FMotionEvent) == 0x000048, "Wrong size on FMotionEvent");

// ScriptStruct SlateCore.InlineTextImageStyle
// 0x00C8 (0x00D0 - 0x0008)
struct FInlineTextImageStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Image;                                             // 0x0010(0x00B0)(Edit, NativeAccessSpecifierPublic)
	int16                                         Baseline;                                          // 0x00C0(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0xE];                                       // 0x00C2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInlineTextImageStyle) == 0x000010, "Wrong alignment on FInlineTextImageStyle");
static_assert(sizeof(FInlineTextImageStyle) == 0x0000D0, "Wrong size on FInlineTextImageStyle");
static_assert(offsetof(FInlineTextImageStyle, Image) == 0x000010, "Member 'FInlineTextImageStyle::Image' has a wrong offset!");
static_assert(offsetof(FInlineTextImageStyle, Baseline) == 0x0000C0, "Member 'FInlineTextImageStyle::Baseline' has a wrong offset!");

// ScriptStruct SlateCore.ScrollBoxStyle
// 0x02C8 (0x02D0 - 0x0008)
struct FScrollBoxStyle final : public FSlateWidgetStyle
{
public:
	float                                         BarThickness;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            TopShadowBrush;                                    // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BottomShadowBrush;                                 // 0x00C0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LeftShadowBrush;                                   // 0x0170(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            RightShadowBrush;                                  // 0x0220(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScrollBoxStyle) == 0x000010, "Wrong alignment on FScrollBoxStyle");
static_assert(sizeof(FScrollBoxStyle) == 0x0002D0, "Wrong size on FScrollBoxStyle");
static_assert(offsetof(FScrollBoxStyle, BarThickness) == 0x000008, "Member 'FScrollBoxStyle::BarThickness' has a wrong offset!");
static_assert(offsetof(FScrollBoxStyle, TopShadowBrush) == 0x000010, "Member 'FScrollBoxStyle::TopShadowBrush' has a wrong offset!");
static_assert(offsetof(FScrollBoxStyle, BottomShadowBrush) == 0x0000C0, "Member 'FScrollBoxStyle::BottomShadowBrush' has a wrong offset!");
static_assert(offsetof(FScrollBoxStyle, LeftShadowBrush) == 0x000170, "Member 'FScrollBoxStyle::LeftShadowBrush' has a wrong offset!");
static_assert(offsetof(FScrollBoxStyle, RightShadowBrush) == 0x000220, "Member 'FScrollBoxStyle::RightShadowBrush' has a wrong offset!");

// ScriptStruct SlateCore.CheckBoxStyle
// 0x0948 (0x0950 - 0x0008)
struct FCheckBoxStyle final : public FSlateWidgetStyle
{
public:
	ESlateCheckBoxType                            CheckBoxType;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            UncheckedImage;                                    // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UncheckedHoveredImage;                             // 0x00C0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UncheckedPressedImage;                             // 0x0170(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CheckedImage;                                      // 0x0220(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CheckedHoveredImage;                               // 0x02D0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CheckedPressedImage;                               // 0x0380(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UndeterminedImage;                                 // 0x0430(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UndeterminedHoveredImage;                          // 0x04E0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UndeterminedPressedImage;                          // 0x0590(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0640(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundImage;                                   // 0x0650(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundHoveredImage;                            // 0x0700(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundPressedImage;                            // 0x07B0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            ForegroundColor;                                   // 0x0860(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            HoveredForeground;                                 // 0x0874(0x0014)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateColor                            PressedForeground;                                 // 0x0888(0x0014)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateColor                            CheckedForeground;                                 // 0x089C(0x0014)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateColor                            CheckedHoveredForeground;                          // 0x08B0(0x0014)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateColor                            CheckedPressedForeground;                          // 0x08C4(0x0014)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateColor                            UndeterminedForeground;                            // 0x08D8(0x0014)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateColor                            BorderBackgroundColor;                             // 0x08EC(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateSound                            CheckedSlateSound;                                 // 0x0900(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            UncheckedSlateSound;                               // 0x0918(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            HoveredSlateSound;                                 // 0x0930(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_948[0x8];                                      // 0x0948(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCheckBoxStyle) == 0x000010, "Wrong alignment on FCheckBoxStyle");
static_assert(sizeof(FCheckBoxStyle) == 0x000950, "Wrong size on FCheckBoxStyle");
static_assert(offsetof(FCheckBoxStyle, CheckBoxType) == 0x000008, "Member 'FCheckBoxStyle::CheckBoxType' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, UncheckedImage) == 0x000010, "Member 'FCheckBoxStyle::UncheckedImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, UncheckedHoveredImage) == 0x0000C0, "Member 'FCheckBoxStyle::UncheckedHoveredImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, UncheckedPressedImage) == 0x000170, "Member 'FCheckBoxStyle::UncheckedPressedImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, CheckedImage) == 0x000220, "Member 'FCheckBoxStyle::CheckedImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, CheckedHoveredImage) == 0x0002D0, "Member 'FCheckBoxStyle::CheckedHoveredImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, CheckedPressedImage) == 0x000380, "Member 'FCheckBoxStyle::CheckedPressedImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, UndeterminedImage) == 0x000430, "Member 'FCheckBoxStyle::UndeterminedImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, UndeterminedHoveredImage) == 0x0004E0, "Member 'FCheckBoxStyle::UndeterminedHoveredImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, UndeterminedPressedImage) == 0x000590, "Member 'FCheckBoxStyle::UndeterminedPressedImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, Padding) == 0x000640, "Member 'FCheckBoxStyle::Padding' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, BackgroundImage) == 0x000650, "Member 'FCheckBoxStyle::BackgroundImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, BackgroundHoveredImage) == 0x000700, "Member 'FCheckBoxStyle::BackgroundHoveredImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, BackgroundPressedImage) == 0x0007B0, "Member 'FCheckBoxStyle::BackgroundPressedImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, ForegroundColor) == 0x000860, "Member 'FCheckBoxStyle::ForegroundColor' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, HoveredForeground) == 0x000874, "Member 'FCheckBoxStyle::HoveredForeground' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, PressedForeground) == 0x000888, "Member 'FCheckBoxStyle::PressedForeground' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, CheckedForeground) == 0x00089C, "Member 'FCheckBoxStyle::CheckedForeground' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, CheckedHoveredForeground) == 0x0008B0, "Member 'FCheckBoxStyle::CheckedHoveredForeground' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, CheckedPressedForeground) == 0x0008C4, "Member 'FCheckBoxStyle::CheckedPressedForeground' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, UndeterminedForeground) == 0x0008D8, "Member 'FCheckBoxStyle::UndeterminedForeground' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, BorderBackgroundColor) == 0x0008EC, "Member 'FCheckBoxStyle::BorderBackgroundColor' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, CheckedSlateSound) == 0x000900, "Member 'FCheckBoxStyle::CheckedSlateSound' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, UncheckedSlateSound) == 0x000918, "Member 'FCheckBoxStyle::UncheckedSlateSound' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, HoveredSlateSound) == 0x000930, "Member 'FCheckBoxStyle::HoveredSlateSound' has a wrong offset!");

// ScriptStruct SlateCore.ProgressBarStyle
// 0x0228 (0x0230 - 0x0008)
struct FProgressBarStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundImage;                                   // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            FillImage;                                         // 0x00C0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MarqueeImage;                                      // 0x0170(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          EnableFillAnimation;                               // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0xF];                                      // 0x0221(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProgressBarStyle) == 0x000010, "Wrong alignment on FProgressBarStyle");
static_assert(sizeof(FProgressBarStyle) == 0x000230, "Wrong size on FProgressBarStyle");
static_assert(offsetof(FProgressBarStyle, BackgroundImage) == 0x000010, "Member 'FProgressBarStyle::BackgroundImage' has a wrong offset!");
static_assert(offsetof(FProgressBarStyle, FillImage) == 0x0000C0, "Member 'FProgressBarStyle::FillImage' has a wrong offset!");
static_assert(offsetof(FProgressBarStyle, MarqueeImage) == 0x000170, "Member 'FProgressBarStyle::MarqueeImage' has a wrong offset!");
static_assert(offsetof(FProgressBarStyle, EnableFillAnimation) == 0x000220, "Member 'FProgressBarStyle::EnableFillAnimation' has a wrong offset!");

// ScriptStruct SlateCore.CaptureLostEvent
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FCaptureLostEvent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCaptureLostEvent) == 0x000004, "Wrong alignment on FCaptureLostEvent");
static_assert(sizeof(FCaptureLostEvent) == 0x000008, "Wrong size on FCaptureLostEvent");

// ScriptStruct SlateCore.SegmentedControlStyle
// 0x1CB8 (0x1CC0 - 0x0008)
struct FSegmentedControlStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCheckBoxStyle                         ControlStyle;                                      // 0x0010(0x0950)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCheckBoxStyle                         FirstControlStyle;                                 // 0x0960(0x0950)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCheckBoxStyle                         LastControlStyle;                                  // 0x12B0(0x0950)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundBrush;                                   // 0x1C00(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                UniformPadding;                                    // 0x1CB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSegmentedControlStyle) == 0x000010, "Wrong alignment on FSegmentedControlStyle");
static_assert(sizeof(FSegmentedControlStyle) == 0x001CC0, "Wrong size on FSegmentedControlStyle");
static_assert(offsetof(FSegmentedControlStyle, ControlStyle) == 0x000010, "Member 'FSegmentedControlStyle::ControlStyle' has a wrong offset!");
static_assert(offsetof(FSegmentedControlStyle, FirstControlStyle) == 0x000960, "Member 'FSegmentedControlStyle::FirstControlStyle' has a wrong offset!");
static_assert(offsetof(FSegmentedControlStyle, LastControlStyle) == 0x0012B0, "Member 'FSegmentedControlStyle::LastControlStyle' has a wrong offset!");
static_assert(offsetof(FSegmentedControlStyle, BackgroundBrush) == 0x001C00, "Member 'FSegmentedControlStyle::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FSegmentedControlStyle, UniformPadding) == 0x001CB0, "Member 'FSegmentedControlStyle::UniformPadding' has a wrong offset!");

// ScriptStruct SlateCore.HyperlinkStyle
// 0x0668 (0x0670 - 0x0008)
struct FHyperlinkStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           UnderlineStyle;                                    // 0x0010(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        TextStyle;                                         // 0x0380(0x02E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0660(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHyperlinkStyle) == 0x000010, "Wrong alignment on FHyperlinkStyle");
static_assert(sizeof(FHyperlinkStyle) == 0x000670, "Wrong size on FHyperlinkStyle");
static_assert(offsetof(FHyperlinkStyle, UnderlineStyle) == 0x000010, "Member 'FHyperlinkStyle::UnderlineStyle' has a wrong offset!");
static_assert(offsetof(FHyperlinkStyle, TextStyle) == 0x000380, "Member 'FHyperlinkStyle::TextStyle' has a wrong offset!");
static_assert(offsetof(FHyperlinkStyle, Padding) == 0x000660, "Member 'FHyperlinkStyle::Padding' has a wrong offset!");

// ScriptStruct SlateCore.ExpandableAreaStyle
// 0x0178 (0x0180 - 0x0008)
struct FExpandableAreaStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CollapsedImage;                                    // 0x0010(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ExpandedImage;                                     // 0x00C0(0x00B0)(Edit, NativeAccessSpecifierPublic)
	float                                         RolloutAnimationSeconds;                           // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0xC];                                      // 0x0174(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExpandableAreaStyle) == 0x000010, "Wrong alignment on FExpandableAreaStyle");
static_assert(sizeof(FExpandableAreaStyle) == 0x000180, "Wrong size on FExpandableAreaStyle");
static_assert(offsetof(FExpandableAreaStyle, CollapsedImage) == 0x000010, "Member 'FExpandableAreaStyle::CollapsedImage' has a wrong offset!");
static_assert(offsetof(FExpandableAreaStyle, ExpandedImage) == 0x0000C0, "Member 'FExpandableAreaStyle::ExpandedImage' has a wrong offset!");
static_assert(offsetof(FExpandableAreaStyle, RolloutAnimationSeconds) == 0x000170, "Member 'FExpandableAreaStyle::RolloutAnimationSeconds' has a wrong offset!");

// ScriptStruct SlateCore.VolumeControlStyle
// 0x07B8 (0x07C0 - 0x0008)
struct FVolumeControlStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSliderStyle                           SliderStyle;                                       // 0x0010(0x0440)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HighVolumeImage;                                   // 0x0450(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MidVolumeImage;                                    // 0x0500(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LowVolumeImage;                                    // 0x05B0(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NoVolumeImage;                                     // 0x0660(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MutedImage;                                        // 0x0710(0x00B0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVolumeControlStyle) == 0x000010, "Wrong alignment on FVolumeControlStyle");
static_assert(sizeof(FVolumeControlStyle) == 0x0007C0, "Wrong size on FVolumeControlStyle");
static_assert(offsetof(FVolumeControlStyle, SliderStyle) == 0x000010, "Member 'FVolumeControlStyle::SliderStyle' has a wrong offset!");
static_assert(offsetof(FVolumeControlStyle, HighVolumeImage) == 0x000450, "Member 'FVolumeControlStyle::HighVolumeImage' has a wrong offset!");
static_assert(offsetof(FVolumeControlStyle, MidVolumeImage) == 0x000500, "Member 'FVolumeControlStyle::MidVolumeImage' has a wrong offset!");
static_assert(offsetof(FVolumeControlStyle, LowVolumeImage) == 0x0005B0, "Member 'FVolumeControlStyle::LowVolumeImage' has a wrong offset!");
static_assert(offsetof(FVolumeControlStyle, NoVolumeImage) == 0x000660, "Member 'FVolumeControlStyle::NoVolumeImage' has a wrong offset!");
static_assert(offsetof(FVolumeControlStyle, MutedImage) == 0x000710, "Member 'FVolumeControlStyle::MutedImage' has a wrong offset!");

// ScriptStruct SlateCore.TableColumnHeaderStyle
// 0x0638 (0x0640 - 0x0008)
struct FTableColumnHeaderStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            SortPrimaryAscendingImage;                         // 0x0010(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SortPrimaryDescendingImage;                        // 0x00C0(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SortSecondaryAscendingImage;                       // 0x0170(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SortSecondaryDescendingImage;                      // 0x0220(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NormalBrush;                                       // 0x02D0(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredBrush;                                      // 0x0380(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MenuDropdownImage;                                 // 0x0430(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MenuDropdownNormalBorderBrush;                     // 0x04E0(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MenuDropdownHoveredBorderBrush;                    // 0x0590(0x00B0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTableColumnHeaderStyle) == 0x000010, "Wrong alignment on FTableColumnHeaderStyle");
static_assert(sizeof(FTableColumnHeaderStyle) == 0x000640, "Wrong size on FTableColumnHeaderStyle");
static_assert(offsetof(FTableColumnHeaderStyle, SortPrimaryAscendingImage) == 0x000010, "Member 'FTableColumnHeaderStyle::SortPrimaryAscendingImage' has a wrong offset!");
static_assert(offsetof(FTableColumnHeaderStyle, SortPrimaryDescendingImage) == 0x0000C0, "Member 'FTableColumnHeaderStyle::SortPrimaryDescendingImage' has a wrong offset!");
static_assert(offsetof(FTableColumnHeaderStyle, SortSecondaryAscendingImage) == 0x000170, "Member 'FTableColumnHeaderStyle::SortSecondaryAscendingImage' has a wrong offset!");
static_assert(offsetof(FTableColumnHeaderStyle, SortSecondaryDescendingImage) == 0x000220, "Member 'FTableColumnHeaderStyle::SortSecondaryDescendingImage' has a wrong offset!");
static_assert(offsetof(FTableColumnHeaderStyle, NormalBrush) == 0x0002D0, "Member 'FTableColumnHeaderStyle::NormalBrush' has a wrong offset!");
static_assert(offsetof(FTableColumnHeaderStyle, HoveredBrush) == 0x000380, "Member 'FTableColumnHeaderStyle::HoveredBrush' has a wrong offset!");
static_assert(offsetof(FTableColumnHeaderStyle, MenuDropdownImage) == 0x000430, "Member 'FTableColumnHeaderStyle::MenuDropdownImage' has a wrong offset!");
static_assert(offsetof(FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush) == 0x0004E0, "Member 'FTableColumnHeaderStyle::MenuDropdownNormalBorderBrush' has a wrong offset!");
static_assert(offsetof(FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush) == 0x000590, "Member 'FTableColumnHeaderStyle::MenuDropdownHoveredBorderBrush' has a wrong offset!");

// ScriptStruct SlateCore.HeaderRowStyle
// 0x0F98 (0x0FA0 - 0x0008)
struct FHeaderRowStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTableColumnHeaderStyle                ColumnStyle;                                       // 0x0010(0x0640)(Edit, NativeAccessSpecifierPublic)
	struct FTableColumnHeaderStyle                LastColumnStyle;                                   // 0x0650(0x0640)(Edit, NativeAccessSpecifierPublic)
	struct FSplitterStyle                         ColumnSplitterStyle;                               // 0x0C90(0x0170)(Edit, NativeAccessSpecifierPublic)
	float                                         SplitterHandleSize;                                // 0x0E00(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E04[0xC];                                      // 0x0E04(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundBrush;                                   // 0x0E10(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateColor                            ForegroundColor;                                   // 0x0EC0(0x0014)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED4[0xC];                                      // 0x0ED4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            HorizontalSeparatorBrush;                          // 0x0EE0(0x00B0)(Edit, NativeAccessSpecifierPublic)
	float                                         HorizontalSeparatorThickness;                      // 0x0F90(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F94[0xC];                                      // 0x0F94(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeaderRowStyle) == 0x000010, "Wrong alignment on FHeaderRowStyle");
static_assert(sizeof(FHeaderRowStyle) == 0x000FA0, "Wrong size on FHeaderRowStyle");
static_assert(offsetof(FHeaderRowStyle, ColumnStyle) == 0x000010, "Member 'FHeaderRowStyle::ColumnStyle' has a wrong offset!");
static_assert(offsetof(FHeaderRowStyle, LastColumnStyle) == 0x000650, "Member 'FHeaderRowStyle::LastColumnStyle' has a wrong offset!");
static_assert(offsetof(FHeaderRowStyle, ColumnSplitterStyle) == 0x000C90, "Member 'FHeaderRowStyle::ColumnSplitterStyle' has a wrong offset!");
static_assert(offsetof(FHeaderRowStyle, SplitterHandleSize) == 0x000E00, "Member 'FHeaderRowStyle::SplitterHandleSize' has a wrong offset!");
static_assert(offsetof(FHeaderRowStyle, BackgroundBrush) == 0x000E10, "Member 'FHeaderRowStyle::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FHeaderRowStyle, ForegroundColor) == 0x000EC0, "Member 'FHeaderRowStyle::ForegroundColor' has a wrong offset!");
static_assert(offsetof(FHeaderRowStyle, HorizontalSeparatorBrush) == 0x000EE0, "Member 'FHeaderRowStyle::HorizontalSeparatorBrush' has a wrong offset!");
static_assert(offsetof(FHeaderRowStyle, HorizontalSeparatorThickness) == 0x000F90, "Member 'FHeaderRowStyle::HorizontalSeparatorThickness' has a wrong offset!");

// ScriptStruct SlateCore.ScrollBorderStyle
// 0x0168 (0x0170 - 0x0008)
struct FScrollBorderStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            TopShadowBrush;                                    // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BottomShadowBrush;                                 // 0x00C0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScrollBorderStyle) == 0x000010, "Wrong alignment on FScrollBorderStyle");
static_assert(sizeof(FScrollBorderStyle) == 0x000170, "Wrong size on FScrollBorderStyle");
static_assert(offsetof(FScrollBorderStyle, TopShadowBrush) == 0x000010, "Member 'FScrollBorderStyle::TopShadowBrush' has a wrong offset!");
static_assert(offsetof(FScrollBorderStyle, BottomShadowBrush) == 0x0000C0, "Member 'FScrollBorderStyle::BottomShadowBrush' has a wrong offset!");

// ScriptStruct SlateCore.WindowStyle
// 0x15F8 (0x1600 - 0x0008)
struct FWindowStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           MinimizeButtonStyle;                               // 0x0010(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FButtonStyle                           MaximizeButtonStyle;                               // 0x0380(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FButtonStyle                           RestoreButtonStyle;                                // 0x06F0(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FButtonStyle                           CloseButtonStyle;                                  // 0x0A60(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        TitleTextStyle;                                    // 0x0DD0(0x02E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ActiveTitleBrush;                                  // 0x10B0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            InactiveTitleBrush;                                // 0x1160(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            FlashTitleBrush;                                   // 0x1210(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            BackgroundColor;                                   // 0x12C0(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D4[0xC];                                     // 0x12D4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            OutlineBrush;                                      // 0x12E0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            OutlineColor;                                      // 0x1390(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A4[0xC];                                     // 0x13A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BorderBrush;                                       // 0x13B0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            BorderColor;                                       // 0x1460(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1474[0xC];                                     // 0x1474(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundBrush;                                   // 0x1480(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ChildBackgroundBrush;                              // 0x1530(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         WindowCornerRadius;                                // 0x15E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                BorderPadding;                                     // 0x15E4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15F4[0xC];                                     // 0x15F4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWindowStyle) == 0x000010, "Wrong alignment on FWindowStyle");
static_assert(sizeof(FWindowStyle) == 0x001600, "Wrong size on FWindowStyle");
static_assert(offsetof(FWindowStyle, MinimizeButtonStyle) == 0x000010, "Member 'FWindowStyle::MinimizeButtonStyle' has a wrong offset!");
static_assert(offsetof(FWindowStyle, MaximizeButtonStyle) == 0x000380, "Member 'FWindowStyle::MaximizeButtonStyle' has a wrong offset!");
static_assert(offsetof(FWindowStyle, RestoreButtonStyle) == 0x0006F0, "Member 'FWindowStyle::RestoreButtonStyle' has a wrong offset!");
static_assert(offsetof(FWindowStyle, CloseButtonStyle) == 0x000A60, "Member 'FWindowStyle::CloseButtonStyle' has a wrong offset!");
static_assert(offsetof(FWindowStyle, TitleTextStyle) == 0x000DD0, "Member 'FWindowStyle::TitleTextStyle' has a wrong offset!");
static_assert(offsetof(FWindowStyle, ActiveTitleBrush) == 0x0010B0, "Member 'FWindowStyle::ActiveTitleBrush' has a wrong offset!");
static_assert(offsetof(FWindowStyle, InactiveTitleBrush) == 0x001160, "Member 'FWindowStyle::InactiveTitleBrush' has a wrong offset!");
static_assert(offsetof(FWindowStyle, FlashTitleBrush) == 0x001210, "Member 'FWindowStyle::FlashTitleBrush' has a wrong offset!");
static_assert(offsetof(FWindowStyle, BackgroundColor) == 0x0012C0, "Member 'FWindowStyle::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FWindowStyle, OutlineBrush) == 0x0012E0, "Member 'FWindowStyle::OutlineBrush' has a wrong offset!");
static_assert(offsetof(FWindowStyle, OutlineColor) == 0x001390, "Member 'FWindowStyle::OutlineColor' has a wrong offset!");
static_assert(offsetof(FWindowStyle, BorderBrush) == 0x0013B0, "Member 'FWindowStyle::BorderBrush' has a wrong offset!");
static_assert(offsetof(FWindowStyle, BorderColor) == 0x001460, "Member 'FWindowStyle::BorderColor' has a wrong offset!");
static_assert(offsetof(FWindowStyle, BackgroundBrush) == 0x001480, "Member 'FWindowStyle::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FWindowStyle, ChildBackgroundBrush) == 0x001530, "Member 'FWindowStyle::ChildBackgroundBrush' has a wrong offset!");
static_assert(offsetof(FWindowStyle, WindowCornerRadius) == 0x0015E0, "Member 'FWindowStyle::WindowCornerRadius' has a wrong offset!");
static_assert(offsetof(FWindowStyle, BorderPadding) == 0x0015E4, "Member 'FWindowStyle::BorderPadding' has a wrong offset!");

// ScriptStruct SlateCore.ToolBarStyle
// 0x3388 (0x3390 - 0x0008)
struct FToolBarStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundBrush;                                   // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ExpandBrush;                                       // 0x00C0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SeparatorBrush;                                    // 0x0170(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        LabelStyle;                                        // 0x0220(0x02E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEditableTextBoxStyle                  EditableTextStyle;                                 // 0x0500(0x0A00)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCheckBoxStyle                         ToggleButton;                                      // 0x0F00(0x0950)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FComboButtonStyle                      ComboButtonStyle;                                  // 0x1850(0x0540)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FButtonStyle                           SettingsButtonStyle;                               // 0x1D90(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FComboButtonStyle                      SettingsComboButton;                               // 0x2100(0x0540)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCheckBoxStyle                         SettingsToggleButton;                              // 0x2640(0x0950)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FButtonStyle                           ButtonStyle;                                       // 0x2F90(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                LabelPadding;                                      // 0x3300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                SeparatorPadding;                                  // 0x3310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ComboButtonPadding;                                // 0x3320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ButtonPadding;                                     // 0x3330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                CheckBoxPadding;                                   // 0x3340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                BlockPadding;                                      // 0x3350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                IndentedBlockPadding;                              // 0x3360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                BackgroundPadding;                                 // 0x3370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              IconSize;                                          // 0x3380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLabels;                                       // 0x3388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3389[0x7];                                     // 0x3389(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FToolBarStyle) == 0x000010, "Wrong alignment on FToolBarStyle");
static_assert(sizeof(FToolBarStyle) == 0x003390, "Wrong size on FToolBarStyle");
static_assert(offsetof(FToolBarStyle, BackgroundBrush) == 0x000010, "Member 'FToolBarStyle::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, ExpandBrush) == 0x0000C0, "Member 'FToolBarStyle::ExpandBrush' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, SeparatorBrush) == 0x000170, "Member 'FToolBarStyle::SeparatorBrush' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, LabelStyle) == 0x000220, "Member 'FToolBarStyle::LabelStyle' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, EditableTextStyle) == 0x000500, "Member 'FToolBarStyle::EditableTextStyle' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, ToggleButton) == 0x000F00, "Member 'FToolBarStyle::ToggleButton' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, ComboButtonStyle) == 0x001850, "Member 'FToolBarStyle::ComboButtonStyle' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, SettingsButtonStyle) == 0x001D90, "Member 'FToolBarStyle::SettingsButtonStyle' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, SettingsComboButton) == 0x002100, "Member 'FToolBarStyle::SettingsComboButton' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, SettingsToggleButton) == 0x002640, "Member 'FToolBarStyle::SettingsToggleButton' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, ButtonStyle) == 0x002F90, "Member 'FToolBarStyle::ButtonStyle' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, LabelPadding) == 0x003300, "Member 'FToolBarStyle::LabelPadding' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, SeparatorPadding) == 0x003310, "Member 'FToolBarStyle::SeparatorPadding' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, ComboButtonPadding) == 0x003320, "Member 'FToolBarStyle::ComboButtonPadding' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, ButtonPadding) == 0x003330, "Member 'FToolBarStyle::ButtonPadding' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, CheckBoxPadding) == 0x003340, "Member 'FToolBarStyle::CheckBoxPadding' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, BlockPadding) == 0x003350, "Member 'FToolBarStyle::BlockPadding' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, IndentedBlockPadding) == 0x003360, "Member 'FToolBarStyle::IndentedBlockPadding' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, BackgroundPadding) == 0x003370, "Member 'FToolBarStyle::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, IconSize) == 0x003380, "Member 'FToolBarStyle::IconSize' has a wrong offset!");
static_assert(offsetof(FToolBarStyle, bShowLabels) == 0x003388, "Member 'FToolBarStyle::bShowLabels' has a wrong offset!");

}

