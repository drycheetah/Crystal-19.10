#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioGameplayVolume

#include "Basic.hpp"

#include "AudioGameplayVolume_classes.hpp"
#include "AudioGameplayVolume_parameters.hpp"


namespace SDK
{

// Function AudioGameplayVolume.AudioGameplayVolumeComponentBase.SetPriority
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InPriority                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAudioGameplayVolumeComponentBase::SetPriority(int32 InPriority)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPriority");

	Params::AudioGameplayVolumeComponentBase_SetPriority Parms{};

	Parms.InPriority = InPriority;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AudioGameplayVolume.AttenuationVolumeComponent.SetExteriorVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InterpolateTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAttenuationVolumeComponent::SetExteriorVolume(float Volume, float InterpolateTime)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetExteriorVolume");

	Params::AttenuationVolumeComponent_SetExteriorVolume Parms{};

	Parms.Volume = Volume;
	Parms.InterpolateTime = InterpolateTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AudioGameplayVolume.AttenuationVolumeComponent.SetInteriorVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InterpolateTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAttenuationVolumeComponent::SetInteriorVolume(float Volume, float InterpolateTime)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetInteriorVolume");

	Params::AttenuationVolumeComponent_SetInteriorVolume Parms{};

	Parms.Volume = Volume;
	Parms.InterpolateTime = InterpolateTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AudioGameplayVolume.AudioGameplayVolume.OnRep_bEnabled
// (Native, Protected)

void AAudioGameplayVolume::OnRep_bEnabled()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_bEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AudioGameplayVolume.AudioGameplayVolume.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewEnabled                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAudioGameplayVolume::SetEnabled(bool bNewEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::AudioGameplayVolume_SetEnabled Parms{};

	Parms.bNewEnabled = bNewEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AudioGameplayVolume.FilterVolumeComponent.SetExteriorLPF
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InterpolateTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFilterVolumeComponent::SetExteriorLPF(float Volume, float InterpolateTime)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetExteriorLPF");

	Params::FilterVolumeComponent_SetExteriorLPF Parms{};

	Parms.Volume = Volume;
	Parms.InterpolateTime = InterpolateTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AudioGameplayVolume.FilterVolumeComponent.SetInteriorLPF
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InterpolateTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFilterVolumeComponent::SetInteriorLPF(float Volume, float InterpolateTime)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetInteriorLPF");

	Params::FilterVolumeComponent_SetInteriorLPF Parms{};

	Parms.Volume = Volume;
	Parms.InterpolateTime = InterpolateTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AudioGameplayVolume.SubmixSendVolumeComponent.SetSubmixSendSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAudioVolumeSubmixSendSettings>NewSubmixSendSettings                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USubmixSendVolumeComponent::SetSubmixSendSettings(const TArray<struct FAudioVolumeSubmixSendSettings>& NewSubmixSendSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSubmixSendSettings");

	Params::SubmixSendVolumeComponent_SetSubmixSendSettings Parms{};

	Parms.NewSubmixSendSettings = std::move(NewSubmixSendSettings);

	UObject::ProcessEvent(Func, &Parms);
}

}

