#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HoldableLockerButton

#include "Basic.hpp"

#include "CommonInput_structs.hpp"


namespace SDK::Params
{

// Function HoldableLockerButton.HoldableLockerButton_C.BP_OnHoldDecreased
// 0x0004 (0x0004 - 0x0000)
struct HoldableLockerButton_C_BP_OnHoldDecreased final
{
public:
	float                                         HoldPercentage;                                    // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HoldableLockerButton_C_BP_OnHoldDecreased) == 0x000004, "Wrong alignment on HoldableLockerButton_C_BP_OnHoldDecreased");
static_assert(sizeof(HoldableLockerButton_C_BP_OnHoldDecreased) == 0x000004, "Wrong size on HoldableLockerButton_C_BP_OnHoldDecreased");
static_assert(offsetof(HoldableLockerButton_C_BP_OnHoldDecreased, HoldPercentage) == 0x000000, "Member 'HoldableLockerButton_C_BP_OnHoldDecreased::HoldPercentage' has a wrong offset!");

// Function HoldableLockerButton.HoldableLockerButton_C.BP_OnHoldEnded
// 0x0008 (0x0008 - 0x0000)
struct HoldableLockerButton_C_BP_OnHoldEnded final
{
public:
	float                                         HoldPercentage;                                    // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInUseSecondaryHoldAnimation;                      // 0x0004(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HoldableLockerButton_C_BP_OnHoldEnded) == 0x000004, "Wrong alignment on HoldableLockerButton_C_BP_OnHoldEnded");
static_assert(sizeof(HoldableLockerButton_C_BP_OnHoldEnded) == 0x000008, "Wrong size on HoldableLockerButton_C_BP_OnHoldEnded");
static_assert(offsetof(HoldableLockerButton_C_BP_OnHoldEnded, HoldPercentage) == 0x000000, "Member 'HoldableLockerButton_C_BP_OnHoldEnded::HoldPercentage' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_BP_OnHoldEnded, bInUseSecondaryHoldAnimation) == 0x000004, "Member 'HoldableLockerButton_C_BP_OnHoldEnded::bInUseSecondaryHoldAnimation' has a wrong offset!");

// Function HoldableLockerButton.HoldableLockerButton_C.BP_OnHoldIncreased
// 0x0004 (0x0004 - 0x0000)
struct HoldableLockerButton_C_BP_OnHoldIncreased final
{
public:
	float                                         HoldPercentage;                                    // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HoldableLockerButton_C_BP_OnHoldIncreased) == 0x000004, "Wrong alignment on HoldableLockerButton_C_BP_OnHoldIncreased");
static_assert(sizeof(HoldableLockerButton_C_BP_OnHoldIncreased) == 0x000004, "Wrong size on HoldableLockerButton_C_BP_OnHoldIncreased");
static_assert(offsetof(HoldableLockerButton_C_BP_OnHoldIncreased, HoldPercentage) == 0x000000, "Member 'HoldableLockerButton_C_BP_OnHoldIncreased::HoldPercentage' has a wrong offset!");

// Function HoldableLockerButton.HoldableLockerButton_C.BP_OnHoldStarted
// 0x0008 (0x0008 - 0x0000)
struct HoldableLockerButton_C_BP_OnHoldStarted final
{
public:
	float                                         HoldPercentage;                                    // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInUseSecondaryHoldAnimation;                      // 0x0004(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HoldableLockerButton_C_BP_OnHoldStarted) == 0x000004, "Wrong alignment on HoldableLockerButton_C_BP_OnHoldStarted");
static_assert(sizeof(HoldableLockerButton_C_BP_OnHoldStarted) == 0x000008, "Wrong size on HoldableLockerButton_C_BP_OnHoldStarted");
static_assert(offsetof(HoldableLockerButton_C_BP_OnHoldStarted, HoldPercentage) == 0x000000, "Member 'HoldableLockerButton_C_BP_OnHoldStarted::HoldPercentage' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_BP_OnHoldStarted, bInUseSecondaryHoldAnimation) == 0x000004, "Member 'HoldableLockerButton_C_BP_OnHoldStarted::bInUseSecondaryHoldAnimation' has a wrong offset!");

// Function HoldableLockerButton.HoldableLockerButton_C.ExecuteUbergraph_HoldableLockerButton
// 0x0080 (0x0080 - 0x0000)
struct HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_HoldPercentage_3;                     // 0x0004(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInUseSecondaryHoldAnimation_1;       // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_HoldPercentage_2;                     // 0x000C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInUseSecondaryHoldAnimation;         // 0x0010(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_HoldPercentage_1;                     // 0x0014(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_HoldPercentage;                       // 0x0018(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue_1;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue_1;       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonInputSubsystem*                  CallFunc_GetContext_ReturnValue;                   // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonInputSubsystem*                  CallFunc_GetContext_ReturnValue_1;                 // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate;              // 0x0070(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton) == 0x000008, "Wrong alignment on HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton");
static_assert(sizeof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton) == 0x000080, "Wrong size on HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, EntryPoint) == 0x000000, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::EntryPoint' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, K2Node_Event_HoldPercentage_3) == 0x000004, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::K2Node_Event_HoldPercentage_3' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, K2Node_Event_bInUseSecondaryHoldAnimation_1) == 0x000008, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::K2Node_Event_bInUseSecondaryHoldAnimation_1' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, K2Node_Event_HoldPercentage_2) == 0x00000C, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::K2Node_Event_HoldPercentage_2' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, K2Node_Event_bInUseSecondaryHoldAnimation) == 0x000010, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::K2Node_Event_bInUseSecondaryHoldAnimation' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000011, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, K2Node_Event_HoldPercentage_1) == 0x000014, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::K2Node_Event_HoldPercentage_1' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, K2Node_Event_HoldPercentage) == 0x000018, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::K2Node_Event_HoldPercentage' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, CallFunc_GetEndTime_ReturnValue) == 0x00001C, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, CallFunc_GetEndTime_ReturnValue_1) == 0x000020, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::CallFunc_GetEndTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000024, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000028, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000030, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, CallFunc_PlayAnimation_ReturnValue) == 0x000038, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, K2Node_Event_IsDesignTime) == 0x000040, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, CallFunc_PlayAnimation_ReturnValue_1) == 0x000048, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, CallFunc_PlayAnimationReverse_ReturnValue_1) == 0x000050, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::CallFunc_PlayAnimationReverse_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, CallFunc_PlayAnimationForward_ReturnValue) == 0x000058, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, CallFunc_GetContext_ReturnValue) == 0x000060, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, CallFunc_GetContext_ReturnValue_1) == 0x000068, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::CallFunc_GetContext_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton, K2Node_CreateDelegate_OutputDelegate) == 0x000070, "Member 'HoldableLockerButton_C_ExecuteUbergraph_HoldableLockerButton::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function HoldableLockerButton.HoldableLockerButton_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct HoldableLockerButton_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HoldableLockerButton_C_PreConstruct) == 0x000001, "Wrong alignment on HoldableLockerButton_C_PreConstruct");
static_assert(sizeof(HoldableLockerButton_C_PreConstruct) == 0x000001, "Wrong size on HoldableLockerButton_C_PreConstruct");
static_assert(offsetof(HoldableLockerButton_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'HoldableLockerButton_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function HoldableLockerButton.HoldableLockerButton_C.Update style
// 0x0001 (0x0001 - 0x0000)
struct HoldableLockerButton_C_Update_style final
{
public:
	bool                                          Using_Gamepad;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HoldableLockerButton_C_Update_style) == 0x000001, "Wrong alignment on HoldableLockerButton_C_Update_style");
static_assert(sizeof(HoldableLockerButton_C_Update_style) == 0x000001, "Wrong size on HoldableLockerButton_C_Update_style");
static_assert(offsetof(HoldableLockerButton_C_Update_style, Using_Gamepad) == 0x000000, "Member 'HoldableLockerButton_C_Update_style::Using_Gamepad' has a wrong offset!");

// Function HoldableLockerButton.HoldableLockerButton_C.UpdateTextAndStyle
// 0x0002 (0x0002 - 0x0000)
struct HoldableLockerButton_C_UpdateTextAndStyle final
{
public:
	ECommonInputType                              Input_Type;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HoldableLockerButton_C_UpdateTextAndStyle) == 0x000001, "Wrong alignment on HoldableLockerButton_C_UpdateTextAndStyle");
static_assert(sizeof(HoldableLockerButton_C_UpdateTextAndStyle) == 0x000002, "Wrong size on HoldableLockerButton_C_UpdateTextAndStyle");
static_assert(offsetof(HoldableLockerButton_C_UpdateTextAndStyle, Input_Type) == 0x000000, "Member 'HoldableLockerButton_C_UpdateTextAndStyle::Input_Type' has a wrong offset!");
static_assert(offsetof(HoldableLockerButton_C_UpdateTextAndStyle, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'HoldableLockerButton_C_UpdateTextAndStyle::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

}

