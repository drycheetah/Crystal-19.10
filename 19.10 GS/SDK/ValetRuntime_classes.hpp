#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ValetRuntime

#include "Basic.hpp"

#include "ModularGameplay_classes.hpp"
#include "NetworkPrediction_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ValetRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class ValetRuntime.DagwoodNetworkPhysicsComponent
// 0x0BD0 (0x0C80 - 0x00B0)
class UDagwoodNetworkPhysicsComponent final : public UActorComponent
{
public:
	struct FNetworkPhysicsState                   NetworkPhysicsState;                               // 0x00B0(0x0060)(Net, Transient, NoDestructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnGeneratedLocalInputCmd;                          // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FDagwoodManagedState                   ReplicatedManagedState;                            // 0x0120(0x03C8)(Net, Transient, Protected, NativeAccessSpecifierProtected)
	struct FDagwoodManagedState                   InManagedState;                                    // 0x04E8(0x03C8)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FDagwoodManagedState                   OutManagedState;                                   // 0x08B0(0x03C8)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_C78[0x8];                                      // 0x0C78(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetPendingInputCmd(const struct FFortDagwoodCmd& In);
	void SetState_GT(const struct FDagwoodInPersistent& In);

	struct FFortDagwoodCmd GetPendingInputCmd() const;
	struct FDagwoodInPersistent GetState_GT() const;
	struct FDagwoodState_PT GetState_PT() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DagwoodNetworkPhysicsComponent">();
	}
	static class UDagwoodNetworkPhysicsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDagwoodNetworkPhysicsComponent>();
	}
};
static_assert(alignof(UDagwoodNetworkPhysicsComponent) == 0x000010, "Wrong alignment on UDagwoodNetworkPhysicsComponent");
static_assert(sizeof(UDagwoodNetworkPhysicsComponent) == 0x000C80, "Wrong size on UDagwoodNetworkPhysicsComponent");
static_assert(offsetof(UDagwoodNetworkPhysicsComponent, NetworkPhysicsState) == 0x0000B0, "Member 'UDagwoodNetworkPhysicsComponent::NetworkPhysicsState' has a wrong offset!");
static_assert(offsetof(UDagwoodNetworkPhysicsComponent, OnGeneratedLocalInputCmd) == 0x000110, "Member 'UDagwoodNetworkPhysicsComponent::OnGeneratedLocalInputCmd' has a wrong offset!");
static_assert(offsetof(UDagwoodNetworkPhysicsComponent, ReplicatedManagedState) == 0x000120, "Member 'UDagwoodNetworkPhysicsComponent::ReplicatedManagedState' has a wrong offset!");
static_assert(offsetof(UDagwoodNetworkPhysicsComponent, InManagedState) == 0x0004E8, "Member 'UDagwoodNetworkPhysicsComponent::InManagedState' has a wrong offset!");
static_assert(offsetof(UDagwoodNetworkPhysicsComponent, OutManagedState) == 0x0008B0, "Member 'UDagwoodNetworkPhysicsComponent::OutManagedState' has a wrong offset!");

// Class ValetRuntime.FortDagwoodVehicleConfigs
// 0x0240 (0x0840 - 0x0600)
class UFortDagwoodVehicleConfigs final : public UFortSKMotorVehicleConfigs
{
public:
	float                                         BoostMinPushForce;                                 // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTopSpeedForceMultiplier;                      // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTopSpeedMultiplier;                           // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostWaterMultiplier;                              // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehiclePowerSlideFrontMultiplier;                  // 0x0610(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehiclePowerSlideRearMultiplier;                   // 0x0614(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeGripAngle;                                // 0x0618(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeGripAngleRecovery;                        // 0x061C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeSpeedForGripLoss;                         // 0x0620(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSlipDuration;                                   // 0x0624(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeLateralFriction;                          // 0x0628(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeSteeringMultiplier;                       // 0x062C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeFrictionDampFactor;                       // 0x0630(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RestoreTractionDampFactor;                         // 0x0634(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeForce;                                    // 0x0638(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeForceNoAccel;                             // 0x063C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostSteeringMultiplier;                           // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadTopSpeedMultiplier;                        // 0x0644(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadFrontLateralFriction;                      // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadRearLateralFriction;                       // 0x064C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadAccelForceMultiplier;                      // 0x0650(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadFakeBumpinessMultiplier;                   // 0x0654(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffRoadTopSpeedMultiplier;                         // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffRoadFrontLateralFriction;                       // 0x065C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffRoadRearLateralFriction;                        // 0x0660(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffRoadPushForceMultiplier;                        // 0x0664(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadDamageImpactForceMin;                       // 0x0668(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadDamageImpactForceMax;                       // 0x066C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadImpactDamageMin;                            // 0x0670(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadImpactDamageMax;                            // 0x0674(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedForOffroadHandling;                        // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireHealthPercentThreshold;                        // 0x067C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBumpinessSpringHitTimeMultiplier;               // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBumpinessSpringHitTimeMultiplier;               // 0x0684(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BumpinessExponentForShocks;                        // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadRumbleIntensity;                            // 0x068C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadRumbleIntensity;                           // 0x0690(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadDamageScaleExponent;                        // 0x0694(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HardLandingThresholdMin;                           // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HardLandingThresholdMax;                           // 0x069C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HardLandingShakeZAmplitudeMin;                     // 0x06A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HardLandingShakeZAmplitudeMax;                     // 0x06A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLinesThreshold;                               // 0x06A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PropDestructionImpulse;                            // 0x06AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructionAngle;                                  // 0x06B0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpNormalMinProtected;                              // 0x06B4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpForwardMinProtected;                             // 0x06B8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonCameraSteeringAngleMultiplier;                  // 0x06BC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraAssistStrengthMax;                           // 0x06C0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraAssistStrengthMin;                           // 0x06C4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraAssistStrengthRecovery;                      // 0x06C8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraAssistInterpSpeed;                           // 0x06CC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverseChangeDirectionBrakeForceMultiplier;        // 0x06D0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverseChangeDirectionSpeedThreshold;              // 0x06D4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftExitPushForce;                                // 0x06D8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftExitCatchupSpeed;                             // 0x06DC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeDurationRequiredForCatchup;               // 0x06E0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpactMagnitudeToEndCatchup;                       // 0x06E4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringLength;                            // 0x06E8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringStiff;                             // 0x06EC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringDamp;                              // 0x06F0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireTractionMultiplier_StageOne;             // 0x06F4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireTractionMultiplier_StageTwo;             // 0x06F8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireTractionMultiplier_Min;                  // 0x06FC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireScrapeFrictionMultiplier;                // 0x0700(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedForRimScrapeDamage;                        // 0x0704(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimScrapeDamageRate;                               // 0x0708(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimScrapeFlipRollMagnitude;                        // 0x070C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimScrapeFlipPitchMagnitude;                       // 0x0710(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedForRimFlip;                                   // 0x0714(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthPercentForFlip;                              // 0x0718(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipYawDuration;                                   // 0x071C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipRollDuration;                                  // 0x0720(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPitchDuration;                                 // 0x0724(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipExplodeDuration_Yaw;                           // 0x0728(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipExplodeDuration_Pitch;                         // 0x072C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPushForceDuration_Yaw;                         // 0x0730(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPushForceDuration_Pitch;                       // 0x0734(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPushForcMultiplier;                            // 0x0738(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPushForce_UpComponentPitch;                    // 0x073C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPushForce_UpComponentRoll;                     // 0x0740(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeInAirRequiredForExplodeLanding;             // 0x0744(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipYawSpringStiff;                                // 0x0748(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipYawSpringDamp;                                 // 0x074C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipYawSpringMaxAccel;                             // 0x0750(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthPercentForExplode;                           // 0x0754(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipRecoveryTime;                                  // 0x0758(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipMaxDuration;                                   // 0x075C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipWiggleDuration;                                // 0x0760(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireVeerDuration;                            // 0x0764(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireVeerSteeringAngle;                       // 0x0768(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipWiggleFrequency;                               // 0x076C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipWiggleSteeringAngle;                           // 0x0770(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipYawAngleThreshold;                             // 0x0774(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsesBoost;                                        // 0x0778(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_779[0x3];                                      // 0x0779(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RechargeableBoostRateOfUse;                        // 0x077C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeableBoostRateOfRegen;                      // 0x0780(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostRateOfRegenMinMultiplier;                     // 0x0784(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostRateOfRegenMaxMultiplier;                     // 0x0788(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostRegenMaxMultiplyTime;                         // 0x078C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeableBoostRequiredPercentToActivate;        // 0x0790(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeableBoostMaxPercent;                       // 0x0794(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeableBoostMinPercent;                       // 0x0798(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWheelsOnSurfaceRequired;                        // 0x079C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerExtraHealth;                                 // 0x07A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeZeroHealth;                                 // 0x07A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeExplosion;                                  // 0x07A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeSelfDestructCleanup;                        // 0x07AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelfDestructTime;                                  // 0x07B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnalogDriftStickThreshold;                         // 0x07B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TireBootRightSocketName;                           // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TireBootLeftSocketName;                            // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireBootRelativeDistance;                          // 0x07C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostForceInAir;                                   // 0x07CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostAirMaxSpeed;                                  // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D4[0x4];                                      // 0x07D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TireSocketNames;                                   // 0x07D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           TireBoneNames;                                     // 0x07E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<int32>                                 RearTireIndices;                                   // 0x07F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<int32>                                 RightSideTires;                                    // 0x0808(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<int32>                                 FakeTireIndices;                                   // 0x0818(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bNoWheels;                                         // 0x0828(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_829[0x3];                                      // 0x0829(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NoWheelsSpringLenMult;                             // 0x082C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NoWheelsBonesToHide;                               // 0x0830(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDagwoodVehicleConfigs">();
	}
	static class UFortDagwoodVehicleConfigs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDagwoodVehicleConfigs>();
	}
};
static_assert(alignof(UFortDagwoodVehicleConfigs) == 0x000008, "Wrong alignment on UFortDagwoodVehicleConfigs");
static_assert(sizeof(UFortDagwoodVehicleConfigs) == 0x000840, "Wrong size on UFortDagwoodVehicleConfigs");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostMinPushForce) == 0x000600, "Member 'UFortDagwoodVehicleConfigs::BoostMinPushForce' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostTopSpeedForceMultiplier) == 0x000604, "Member 'UFortDagwoodVehicleConfigs::BoostTopSpeedForceMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostTopSpeedMultiplier) == 0x000608, "Member 'UFortDagwoodVehicleConfigs::BoostTopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostWaterMultiplier) == 0x00060C, "Member 'UFortDagwoodVehicleConfigs::BoostWaterMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, VehiclePowerSlideFrontMultiplier) == 0x000610, "Member 'UFortDagwoodVehicleConfigs::VehiclePowerSlideFrontMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, VehiclePowerSlideRearMultiplier) == 0x000614, "Member 'UFortDagwoodVehicleConfigs::VehiclePowerSlideRearMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeGripAngle) == 0x000618, "Member 'UFortDagwoodVehicleConfigs::HandbrakeGripAngle' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeGripAngleRecovery) == 0x00061C, "Member 'UFortDagwoodVehicleConfigs::HandbrakeGripAngleRecovery' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeSpeedForGripLoss) == 0x000620, "Member 'UFortDagwoodVehicleConfigs::HandbrakeSpeedForGripLoss' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MinSlipDuration) == 0x000624, "Member 'UFortDagwoodVehicleConfigs::MinSlipDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeLateralFriction) == 0x000628, "Member 'UFortDagwoodVehicleConfigs::HandbrakeLateralFriction' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeSteeringMultiplier) == 0x00062C, "Member 'UFortDagwoodVehicleConfigs::HandbrakeSteeringMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeFrictionDampFactor) == 0x000630, "Member 'UFortDagwoodVehicleConfigs::HandbrakeFrictionDampFactor' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RestoreTractionDampFactor) == 0x000634, "Member 'UFortDagwoodVehicleConfigs::RestoreTractionDampFactor' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeForce) == 0x000638, "Member 'UFortDagwoodVehicleConfigs::HandbrakeForce' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeForceNoAccel) == 0x00063C, "Member 'UFortDagwoodVehicleConfigs::HandbrakeForceNoAccel' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostSteeringMultiplier) == 0x000640, "Member 'UFortDagwoodVehicleConfigs::BoostSteeringMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadTopSpeedMultiplier) == 0x000644, "Member 'UFortDagwoodVehicleConfigs::DirtRoadTopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadFrontLateralFriction) == 0x000648, "Member 'UFortDagwoodVehicleConfigs::DirtRoadFrontLateralFriction' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadRearLateralFriction) == 0x00064C, "Member 'UFortDagwoodVehicleConfigs::DirtRoadRearLateralFriction' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadAccelForceMultiplier) == 0x000650, "Member 'UFortDagwoodVehicleConfigs::DirtRoadAccelForceMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadFakeBumpinessMultiplier) == 0x000654, "Member 'UFortDagwoodVehicleConfigs::DirtRoadFakeBumpinessMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffRoadTopSpeedMultiplier) == 0x000658, "Member 'UFortDagwoodVehicleConfigs::OffRoadTopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffRoadFrontLateralFriction) == 0x00065C, "Member 'UFortDagwoodVehicleConfigs::OffRoadFrontLateralFriction' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffRoadRearLateralFriction) == 0x000660, "Member 'UFortDagwoodVehicleConfigs::OffRoadRearLateralFriction' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffRoadPushForceMultiplier) == 0x000664, "Member 'UFortDagwoodVehicleConfigs::OffRoadPushForceMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadDamageImpactForceMin) == 0x000668, "Member 'UFortDagwoodVehicleConfigs::OffroadDamageImpactForceMin' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadDamageImpactForceMax) == 0x00066C, "Member 'UFortDagwoodVehicleConfigs::OffroadDamageImpactForceMax' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadImpactDamageMin) == 0x000670, "Member 'UFortDagwoodVehicleConfigs::OffroadImpactDamageMin' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadImpactDamageMax) == 0x000674, "Member 'UFortDagwoodVehicleConfigs::OffroadImpactDamageMax' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MinSpeedForOffroadHandling) == 0x000678, "Member 'UFortDagwoodVehicleConfigs::MinSpeedForOffroadHandling' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FireHealthPercentThreshold) == 0x00067C, "Member 'UFortDagwoodVehicleConfigs::FireHealthPercentThreshold' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MinBumpinessSpringHitTimeMultiplier) == 0x000680, "Member 'UFortDagwoodVehicleConfigs::MinBumpinessSpringHitTimeMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MaxBumpinessSpringHitTimeMultiplier) == 0x000684, "Member 'UFortDagwoodVehicleConfigs::MaxBumpinessSpringHitTimeMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BumpinessExponentForShocks) == 0x000688, "Member 'UFortDagwoodVehicleConfigs::BumpinessExponentForShocks' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadRumbleIntensity) == 0x00068C, "Member 'UFortDagwoodVehicleConfigs::OffroadRumbleIntensity' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadRumbleIntensity) == 0x000690, "Member 'UFortDagwoodVehicleConfigs::DirtRoadRumbleIntensity' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadDamageScaleExponent) == 0x000694, "Member 'UFortDagwoodVehicleConfigs::OffroadDamageScaleExponent' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HardLandingThresholdMin) == 0x000698, "Member 'UFortDagwoodVehicleConfigs::HardLandingThresholdMin' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HardLandingThresholdMax) == 0x00069C, "Member 'UFortDagwoodVehicleConfigs::HardLandingThresholdMax' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HardLandingShakeZAmplitudeMin) == 0x0006A0, "Member 'UFortDagwoodVehicleConfigs::HardLandingShakeZAmplitudeMin' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HardLandingShakeZAmplitudeMax) == 0x0006A4, "Member 'UFortDagwoodVehicleConfigs::HardLandingShakeZAmplitudeMax' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, SpeedLinesThreshold) == 0x0006A8, "Member 'UFortDagwoodVehicleConfigs::SpeedLinesThreshold' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PropDestructionImpulse) == 0x0006AC, "Member 'UFortDagwoodVehicleConfigs::PropDestructionImpulse' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DestructionAngle) == 0x0006B0, "Member 'UFortDagwoodVehicleConfigs::DestructionAngle' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, UpNormalMinProtected) == 0x0006B4, "Member 'UFortDagwoodVehicleConfigs::UpNormalMinProtected' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, UpForwardMinProtected) == 0x0006B8, "Member 'UFortDagwoodVehicleConfigs::UpForwardMinProtected' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, NonCameraSteeringAngleMultiplier) == 0x0006BC, "Member 'UFortDagwoodVehicleConfigs::NonCameraSteeringAngleMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, CameraAssistStrengthMax) == 0x0006C0, "Member 'UFortDagwoodVehicleConfigs::CameraAssistStrengthMax' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, CameraAssistStrengthMin) == 0x0006C4, "Member 'UFortDagwoodVehicleConfigs::CameraAssistStrengthMin' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, CameraAssistStrengthRecovery) == 0x0006C8, "Member 'UFortDagwoodVehicleConfigs::CameraAssistStrengthRecovery' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, CameraAssistInterpSpeed) == 0x0006CC, "Member 'UFortDagwoodVehicleConfigs::CameraAssistInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, ReverseChangeDirectionBrakeForceMultiplier) == 0x0006D0, "Member 'UFortDagwoodVehicleConfigs::ReverseChangeDirectionBrakeForceMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, ReverseChangeDirectionSpeedThreshold) == 0x0006D4, "Member 'UFortDagwoodVehicleConfigs::ReverseChangeDirectionSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DriftExitPushForce) == 0x0006D8, "Member 'UFortDagwoodVehicleConfigs::DriftExitPushForce' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DriftExitCatchupSpeed) == 0x0006DC, "Member 'UFortDagwoodVehicleConfigs::DriftExitCatchupSpeed' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeDurationRequiredForCatchup) == 0x0006E0, "Member 'UFortDagwoodVehicleConfigs::HandbrakeDurationRequiredForCatchup' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, ImpactMagnitudeToEndCatchup) == 0x0006E4, "Member 'UFortDagwoodVehicleConfigs::ImpactMagnitudeToEndCatchup' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireSpringLength) == 0x0006E8, "Member 'UFortDagwoodVehicleConfigs::PoppedTireSpringLength' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireSpringStiff) == 0x0006EC, "Member 'UFortDagwoodVehicleConfigs::PoppedTireSpringStiff' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireSpringDamp) == 0x0006F0, "Member 'UFortDagwoodVehicleConfigs::PoppedTireSpringDamp' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireTractionMultiplier_StageOne) == 0x0006F4, "Member 'UFortDagwoodVehicleConfigs::PoppedTireTractionMultiplier_StageOne' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireTractionMultiplier_StageTwo) == 0x0006F8, "Member 'UFortDagwoodVehicleConfigs::PoppedTireTractionMultiplier_StageTwo' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireTractionMultiplier_Min) == 0x0006FC, "Member 'UFortDagwoodVehicleConfigs::PoppedTireTractionMultiplier_Min' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireScrapeFrictionMultiplier) == 0x000700, "Member 'UFortDagwoodVehicleConfigs::PoppedTireScrapeFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MinSpeedForRimScrapeDamage) == 0x000704, "Member 'UFortDagwoodVehicleConfigs::MinSpeedForRimScrapeDamage' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RimScrapeDamageRate) == 0x000708, "Member 'UFortDagwoodVehicleConfigs::RimScrapeDamageRate' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RimScrapeFlipRollMagnitude) == 0x00070C, "Member 'UFortDagwoodVehicleConfigs::RimScrapeFlipRollMagnitude' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RimScrapeFlipPitchMagnitude) == 0x000710, "Member 'UFortDagwoodVehicleConfigs::RimScrapeFlipPitchMagnitude' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, SpeedForRimFlip) == 0x000714, "Member 'UFortDagwoodVehicleConfigs::SpeedForRimFlip' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HealthPercentForFlip) == 0x000718, "Member 'UFortDagwoodVehicleConfigs::HealthPercentForFlip' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipYawDuration) == 0x00071C, "Member 'UFortDagwoodVehicleConfigs::FlipYawDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipRollDuration) == 0x000720, "Member 'UFortDagwoodVehicleConfigs::FlipRollDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPitchDuration) == 0x000724, "Member 'UFortDagwoodVehicleConfigs::FlipPitchDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipExplodeDuration_Yaw) == 0x000728, "Member 'UFortDagwoodVehicleConfigs::FlipExplodeDuration_Yaw' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipExplodeDuration_Pitch) == 0x00072C, "Member 'UFortDagwoodVehicleConfigs::FlipExplodeDuration_Pitch' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPushForceDuration_Yaw) == 0x000730, "Member 'UFortDagwoodVehicleConfigs::FlipPushForceDuration_Yaw' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPushForceDuration_Pitch) == 0x000734, "Member 'UFortDagwoodVehicleConfigs::FlipPushForceDuration_Pitch' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPushForcMultiplier) == 0x000738, "Member 'UFortDagwoodVehicleConfigs::FlipPushForcMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPushForce_UpComponentPitch) == 0x00073C, "Member 'UFortDagwoodVehicleConfigs::FlipPushForce_UpComponentPitch' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPushForce_UpComponentRoll) == 0x000740, "Member 'UFortDagwoodVehicleConfigs::FlipPushForce_UpComponentRoll' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MinTimeInAirRequiredForExplodeLanding) == 0x000744, "Member 'UFortDagwoodVehicleConfigs::MinTimeInAirRequiredForExplodeLanding' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipYawSpringStiff) == 0x000748, "Member 'UFortDagwoodVehicleConfigs::FlipYawSpringStiff' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipYawSpringDamp) == 0x00074C, "Member 'UFortDagwoodVehicleConfigs::FlipYawSpringDamp' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipYawSpringMaxAccel) == 0x000750, "Member 'UFortDagwoodVehicleConfigs::FlipYawSpringMaxAccel' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HealthPercentForExplode) == 0x000754, "Member 'UFortDagwoodVehicleConfigs::HealthPercentForExplode' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipRecoveryTime) == 0x000758, "Member 'UFortDagwoodVehicleConfigs::FlipRecoveryTime' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipMaxDuration) == 0x00075C, "Member 'UFortDagwoodVehicleConfigs::FlipMaxDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipWiggleDuration) == 0x000760, "Member 'UFortDagwoodVehicleConfigs::FlipWiggleDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireVeerDuration) == 0x000764, "Member 'UFortDagwoodVehicleConfigs::PoppedTireVeerDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireVeerSteeringAngle) == 0x000768, "Member 'UFortDagwoodVehicleConfigs::PoppedTireVeerSteeringAngle' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipWiggleFrequency) == 0x00076C, "Member 'UFortDagwoodVehicleConfigs::FlipWiggleFrequency' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipWiggleSteeringAngle) == 0x000770, "Member 'UFortDagwoodVehicleConfigs::FlipWiggleSteeringAngle' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipYawAngleThreshold) == 0x000774, "Member 'UFortDagwoodVehicleConfigs::FlipYawAngleThreshold' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, bUsesBoost) == 0x000778, "Member 'UFortDagwoodVehicleConfigs::bUsesBoost' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RechargeableBoostRateOfUse) == 0x00077C, "Member 'UFortDagwoodVehicleConfigs::RechargeableBoostRateOfUse' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RechargeableBoostRateOfRegen) == 0x000780, "Member 'UFortDagwoodVehicleConfigs::RechargeableBoostRateOfRegen' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostRateOfRegenMinMultiplier) == 0x000784, "Member 'UFortDagwoodVehicleConfigs::BoostRateOfRegenMinMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostRateOfRegenMaxMultiplier) == 0x000788, "Member 'UFortDagwoodVehicleConfigs::BoostRateOfRegenMaxMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostRegenMaxMultiplyTime) == 0x00078C, "Member 'UFortDagwoodVehicleConfigs::BoostRegenMaxMultiplyTime' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RechargeableBoostRequiredPercentToActivate) == 0x000790, "Member 'UFortDagwoodVehicleConfigs::RechargeableBoostRequiredPercentToActivate' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RechargeableBoostMaxPercent) == 0x000794, "Member 'UFortDagwoodVehicleConfigs::RechargeableBoostMaxPercent' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RechargeableBoostMinPercent) == 0x000798, "Member 'UFortDagwoodVehicleConfigs::RechargeableBoostMinPercent' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, NumWheelsOnSurfaceRequired) == 0x00079C, "Member 'UFortDagwoodVehicleConfigs::NumWheelsOnSurfaceRequired' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, ServerExtraHealth) == 0x0007A0, "Member 'UFortDagwoodVehicleConfigs::ServerExtraHealth' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MaxTimeZeroHealth) == 0x0007A4, "Member 'UFortDagwoodVehicleConfigs::MaxTimeZeroHealth' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MaxTimeExplosion) == 0x0007A8, "Member 'UFortDagwoodVehicleConfigs::MaxTimeExplosion' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MaxTimeSelfDestructCleanup) == 0x0007AC, "Member 'UFortDagwoodVehicleConfigs::MaxTimeSelfDestructCleanup' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, SelfDestructTime) == 0x0007B0, "Member 'UFortDagwoodVehicleConfigs::SelfDestructTime' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, AnalogDriftStickThreshold) == 0x0007B4, "Member 'UFortDagwoodVehicleConfigs::AnalogDriftStickThreshold' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, TireBootRightSocketName) == 0x0007B8, "Member 'UFortDagwoodVehicleConfigs::TireBootRightSocketName' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, TireBootLeftSocketName) == 0x0007C0, "Member 'UFortDagwoodVehicleConfigs::TireBootLeftSocketName' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, TireBootRelativeDistance) == 0x0007C8, "Member 'UFortDagwoodVehicleConfigs::TireBootRelativeDistance' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostForceInAir) == 0x0007CC, "Member 'UFortDagwoodVehicleConfigs::BoostForceInAir' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostAirMaxSpeed) == 0x0007D0, "Member 'UFortDagwoodVehicleConfigs::BoostAirMaxSpeed' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, TireSocketNames) == 0x0007D8, "Member 'UFortDagwoodVehicleConfigs::TireSocketNames' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, TireBoneNames) == 0x0007E8, "Member 'UFortDagwoodVehicleConfigs::TireBoneNames' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RearTireIndices) == 0x0007F8, "Member 'UFortDagwoodVehicleConfigs::RearTireIndices' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RightSideTires) == 0x000808, "Member 'UFortDagwoodVehicleConfigs::RightSideTires' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FakeTireIndices) == 0x000818, "Member 'UFortDagwoodVehicleConfigs::FakeTireIndices' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, bNoWheels) == 0x000828, "Member 'UFortDagwoodVehicleConfigs::bNoWheels' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, NoWheelsSpringLenMult) == 0x00082C, "Member 'UFortDagwoodVehicleConfigs::NoWheelsSpringLenMult' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, NoWheelsBonesToHide) == 0x000830, "Member 'UFortDagwoodVehicleConfigs::NoWheelsBonesToHide' has a wrong offset!");

// Class ValetRuntime.FortAthenaMutator_OverrideValetVehicleParameters
// 0x0050 (0x0318 - 0x02C8)
class AFortAthenaMutator_OverrideValetVehicleParameters final : public AFortAthenaMutator
{
public:
	struct FScalableFloat                         MinInitialVehicleFuelPercent;                      // 0x02C8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxInitialVehicleFuelPercent;                      // 0x02F0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	void OnPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContainerTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_OverrideValetVehicleParameters">();
	}
	static class AFortAthenaMutator_OverrideValetVehicleParameters* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_OverrideValetVehicleParameters>();
	}
};
static_assert(alignof(AFortAthenaMutator_OverrideValetVehicleParameters) == 0x000008, "Wrong alignment on AFortAthenaMutator_OverrideValetVehicleParameters");
static_assert(sizeof(AFortAthenaMutator_OverrideValetVehicleParameters) == 0x000318, "Wrong size on AFortAthenaMutator_OverrideValetVehicleParameters");
static_assert(offsetof(AFortAthenaMutator_OverrideValetVehicleParameters, MinInitialVehicleFuelPercent) == 0x0002C8, "Member 'AFortAthenaMutator_OverrideValetVehicleParameters::MinInitialVehicleFuelPercent' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_OverrideValetVehicleParameters, MaxInitialVehicleFuelPercent) == 0x0002F0, "Member 'AFortAthenaMutator_OverrideValetVehicleParameters::MaxInitialVehicleFuelPercent' has a wrong offset!");

// Class ValetRuntime.FortCameraMode_Dagwood
// 0x0040 (0x0EF0 - 0x0EB0)
class UFortCameraMode_Dagwood final : public UFortCameraMode_AthenaVehicle
{
public:
	float                                         HorizontalCameraSpaceOffsetWhileTurning;           // 0x0EA8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringAngleForMaxHorizontalOffset;               // 0x0EAC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAirVerticalOffset;                               // 0x0EB0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirOffsetDampFactor;                               // 0x0EB4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedAlphaDampFactor;                              // 0x0EB8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInAirRequiredForVertOffset;                    // 0x0EBC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleBasePitch;                                  // 0x0EC0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizOffsetInterpSpeed;                            // 0x0EC4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizOffsetInterpSpeedRecovery;                    // 0x0EC8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentSpeedAlpha;                                 // 0x0ECC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentVerticalOffset;                             // 0x0ED0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentHorizontalOffset;                           // 0x0ED4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInAir;                                         // 0x0ED8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousSpeed;                                     // 0x0EDC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppliedPitch;                                      // 0x0EE0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE4[0xC];                                      // 0x0EE4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCameraMode_Dagwood">();
	}
	static class UFortCameraMode_Dagwood* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCameraMode_Dagwood>();
	}
};
static_assert(alignof(UFortCameraMode_Dagwood) == 0x000010, "Wrong alignment on UFortCameraMode_Dagwood");
static_assert(sizeof(UFortCameraMode_Dagwood) == 0x000EF0, "Wrong size on UFortCameraMode_Dagwood");
static_assert(offsetof(UFortCameraMode_Dagwood, HorizontalCameraSpaceOffsetWhileTurning) == 0x000EA8, "Member 'UFortCameraMode_Dagwood::HorizontalCameraSpaceOffsetWhileTurning' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, SteeringAngleForMaxHorizontalOffset) == 0x000EAC, "Member 'UFortCameraMode_Dagwood::SteeringAngleForMaxHorizontalOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, InAirVerticalOffset) == 0x000EB0, "Member 'UFortCameraMode_Dagwood::InAirVerticalOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, AirOffsetDampFactor) == 0x000EB4, "Member 'UFortCameraMode_Dagwood::AirOffsetDampFactor' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, SpeedAlphaDampFactor) == 0x000EB8, "Member 'UFortCameraMode_Dagwood::SpeedAlphaDampFactor' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, TimeInAirRequiredForVertOffset) == 0x000EBC, "Member 'UFortCameraMode_Dagwood::TimeInAirRequiredForVertOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, VehicleBasePitch) == 0x000EC0, "Member 'UFortCameraMode_Dagwood::VehicleBasePitch' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, HorizOffsetInterpSpeed) == 0x000EC4, "Member 'UFortCameraMode_Dagwood::HorizOffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, HorizOffsetInterpSpeedRecovery) == 0x000EC8, "Member 'UFortCameraMode_Dagwood::HorizOffsetInterpSpeedRecovery' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, CurrentSpeedAlpha) == 0x000ECC, "Member 'UFortCameraMode_Dagwood::CurrentSpeedAlpha' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, CurrentVerticalOffset) == 0x000ED0, "Member 'UFortCameraMode_Dagwood::CurrentVerticalOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, CurrentHorizontalOffset) == 0x000ED4, "Member 'UFortCameraMode_Dagwood::CurrentHorizontalOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, TimeInAir) == 0x000ED8, "Member 'UFortCameraMode_Dagwood::TimeInAir' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, PreviousSpeed) == 0x000EDC, "Member 'UFortCameraMode_Dagwood::PreviousSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, AppliedPitch) == 0x000EE0, "Member 'UFortCameraMode_Dagwood::AppliedPitch' has a wrong offset!");

// Class ValetRuntime.FortContextualTutorial_VehicleValetLowFuel
// 0x0008 (0x0128 - 0x0120)
class UFortContextualTutorial_VehicleValetLowFuel final : public UFortContextualTutorial
{
public:
	uint8                                         Pad_120[0x8];                                      // 0x0120(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleStartSkydivingForActivation();
	void HandleVehicleStateChanged(class AFortPlayerPawn* PlayerPawn, class AActor* NewVehicle, class AActor* OldVehicle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortContextualTutorial_VehicleValetLowFuel">();
	}
	static class UFortContextualTutorial_VehicleValetLowFuel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortContextualTutorial_VehicleValetLowFuel>();
	}
};
static_assert(alignof(UFortContextualTutorial_VehicleValetLowFuel) == 0x000008, "Wrong alignment on UFortContextualTutorial_VehicleValetLowFuel");
static_assert(sizeof(UFortContextualTutorial_VehicleValetLowFuel) == 0x000128, "Wrong size on UFortContextualTutorial_VehicleValetLowFuel");

// Class ValetRuntime.FortDagwoodModsConfigs
// 0x0000 (0x0028 - 0x0028)
class UFortDagwoodModsConfigs final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDagwoodModsConfigs">();
	}
	static class UFortDagwoodModsConfigs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDagwoodModsConfigs>();
	}
};
static_assert(alignof(UFortDagwoodModsConfigs) == 0x000008, "Wrong alignment on UFortDagwoodModsConfigs");
static_assert(sizeof(UFortDagwoodModsConfigs) == 0x000028, "Wrong size on UFortDagwoodModsConfigs");

// Class ValetRuntime.FortDagwoodVehicle
// 0x05B0 (0x1C20 - 0x1670)
class AFortDagwoodVehicle final : public AFortAthenaSKMotorVehicle
{
public:
	uint8                                         Pad_1670[0x10];                                    // 0x1670(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMatineeCameraShake>        HardLandingCameraShake;                            // 0x1680(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>        DriverCamShakeClass;                               // 0x1688(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>        HandBrakeCamShakeClass;                            // 0x1690(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleClass                                 VehicleClass;                                      // 0x1698(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1699[0x3];                                     // 0x1699(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeDelay;                                         // 0x169C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeDuration;                                      // 0x16A0(0x0004)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBrakeForceForSkid;                              // 0x16A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinForwardSpeedForSkid;                            // 0x16A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SpeedLinesCueTag;                                  // 0x16AC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeStartTime;                                     // 0x16B4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnOutOfFuelDelegate;                               // 0x16B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnGainedFuelDelegate;                              // 0x16C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UDagwoodNetworkPhysicsComponent*        NetworkPhysicsComponent;                           // 0x16D8(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16E0[0x60];                                    // 0x16E0(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RechargeableBoostPercent;                          // 0x1740(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostEndTime;                                      // 0x1744(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortSplatterSourceComponent*           SplatterSourceComp;                                // 0x1748(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableNativizedTick;                              // 0x1750(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1751[0x7];                                     // 0x1751(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PassengerLeanSockets;                              // 0x1758(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        PassngerLeanRelativeOffsets;                       // 0x1768(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortCameraMode_AthenaVehicle> PassengerCameraModeClass;                          // 0x1778(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortCameraMode>            PassengerCameraModeClass_ADS;                      // 0x1780(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           WheelSocketNames;                                  // 0x1788(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UFortDagwoodVehicleConfigs*             FortDagwoodVehicleConfigs;                         // 0x1798(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortDagwoodVehicleConfigs> FortDagwoodConfigsClass;                           // 0x17A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                 RearShocks;                                        // 0x17A8(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  OffroadEnvironmentDamageTags;                      // 0x17B8(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  FireDamageTags;                                    // 0x17D8(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FVector                                NativeWheelScaleRear;                              // 0x17F8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                NativeWheelScaleFront;                             // 0x1804(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                NativeTireScaleRear;                               // 0x1810(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                NativeTireScaleFront;                              // 0x181C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTireSmokeActive;                                  // 0x1828(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBoostFailed;                                      // 0x1829(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanBoostPitch;                                    // 0x182A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnRoad;                                           // 0x182B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnLandscape;                                      // 0x182C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnDirt;                                           // 0x182D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnVehicle;                                        // 0x182E(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWasBrakeSkidding;                                 // 0x182F(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint64                                        AccelForceFeedbackHandle;                          // 0x1830(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint64                                        SkidForceFeedbackHandle;                           // 0x1838(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint64                                        BrakeForceFeedbackHandle;                          // 0x1840(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint64                                        HandBrakeForceFeedbackHandle;                      // 0x1848(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<ETireSurfaces>                         TireSurfaces;                                      // 0x1850(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          bBoosting;                                         // 0x1860(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSpeedLinesActive;                                 // 0x1861(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1862[0xE];                                     // 0x1862(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDagwoodRuntimeModifiers               DagwoodRuntimeModifiedProperties;                  // 0x1870(0x0088)(Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct FAttachedWheel>                 ServerRepWheelData;                                // 0x18F8(0x0010)(Net, ZeroConstructor, Transient, RepNotify, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1908[0x50];                                    // 0x1908(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FlipYawForwardTargetDirection;                     // 0x1958(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                FlipYawOriginalForward;                            // 0x1964(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETireLocations                                LastPoppedTire;                                    // 0x1970(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1971[0x3];                                     // 0x1971(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RoadTopSpeedMultiplier;                            // 0x1974(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentBumpiness;                                  // 0x1978(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentForwardAcceleration;                        // 0x197C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PreviousTurnAlpha;                                 // 0x1980(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentCameraAssistStrength;                       // 0x1984(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LostGripTime;                                      // 0x1988(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LostGripRightAlpha;                                // 0x198C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HandbrakeTime;                                     // 0x1990(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HandbrakeStartTime;                                // 0x1994(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RimScrapeDamageTimer;                              // 0x1998(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipYawMult;                                       // 0x199C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipTimer;                                         // 0x19A0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipExplodeTimer;                                  // 0x19A4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipPushForceTimer;                                // 0x19A8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipAirTimer;                                      // 0x19AC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipLanding;                                       // 0x19B0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipStartTime;                                     // 0x19B4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastFlipDamageTime;                                // 0x19B8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PreFlipControlLossTimer;                           // 0x19BC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastPopTireTime;                                   // 0x19C0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HealthZeroTime;                                    // 0x19C4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDidCinematicFlip;                                 // 0x19C8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanCinematicFlip;                                 // 0x19C9(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInPopTireVeer;                                    // 0x19CA(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInFlipRecovery;                                   // 0x19CB(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExplodeAfterFlip;                                 // 0x19CC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLostGrip;                                         // 0x19CD(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bApplyHandbrakeCatchupForce;                       // 0x19CE(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDidHandbrakeCatchup;                              // 0x19CF(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInFlipRoll;                                       // 0x19D0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInFlipYaw;                                        // 0x19D1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInFlipPitch;                                      // 0x19D2(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFlipDidLeaveGround;                               // 0x19D3(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBreakBuildingsIfBlockingLeaningPassenger;         // 0x19D4(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19D5[0x3];                                     // 0x19D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeanBreakTimeAccumulator;                          // 0x19D8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LeanBreakCheckInterval;                            // 0x19DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExploded;                                         // 0x19E0(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19E1[0x3];                                     // 0x19E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              LastStickInput;                                    // 0x19E4(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19EC[0x4];                                     // 0x19EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SeatToWindowShapeNames;                            // 0x19F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UMatineeCameraShake*                    OffroadCameraShakeInstance;                        // 0x1A00(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMatineeCameraShake*                    DriverCameraShakeInstance;                         // 0x1A08(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMatineeCameraShake*                    AccelCameraShakeInstance;                          // 0x1A10(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMatineeCameraShake*                    HandBrakeCameraShakeInstance;                      // 0x1A18(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NativeComp_RoadAndExhaust;                         // 0x1A20(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NativeComp_TireSkid;                               // 0x1A28(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NativeComp_LowFuelSputter;                         // 0x1A30(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NativeComp_Damage;                                 // 0x1A38(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NativeComp_SpeedLines;                             // 0x1A40(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         TireExhaustFX;                                     // 0x1A48(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         NativeSys_LowFuelSputter;                          // 0x1A50(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         NativeSys_SpeedLines;                              // 0x1A58(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         NativeSys_TireSkid;                                // 0x1A60(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A68[0x10];                                    // 0x1A68(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETireStates>                           TireStates;                                        // 0x1A78(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	TArray<ETireStates>                           FakeTireStates;                                    // 0x1A88(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	EPoppedTireReactionStates                     ActivePoppedTireReaction;                          // 0x1A98(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EPoppedTireReactionStates                     ServerPoppedTireReaction;                          // 0x1A99(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A9A[0x2];                                     // 0x1A9A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerCriticalHealth;                              // 0x1A9C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AFortValetAudioController> ValetAudio;                                        // 0x1AA0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UStaticMeshComponent*>           TireMeshes;                                        // 0x1AA8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UStaticMeshComponent*>           FakeTireMeshes;                                    // 0x1AB8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1AC8[0x4];                                     // 0x1AC8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsInoperable;                                     // 0x1ACC(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1ACD[0x3];                                     // 0x1ACD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RandomSeed;                                        // 0x1AD0(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRandomStream                          RandStream;                                        // 0x1AD4(0x0008)(ZeroConstructor, Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1ADC[0x94];                                    // 0x1ADC(0x0094)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bSelfDestructEnabled : 1;                          // 0x1B70(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bClientUsesSelfDestructTimer : 1;                  // 0x1B70(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_1B71[0x7];                                     // 0x1B71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            TireBootMesh;                                      // 0x1B78(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FDagwoodActionDefForUI>    MapSelfDestructActionDefForUI;                     // 0x1B80(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         MinimumTimeBetweenSelfDestructPromptChanges;       // 0x1BD0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD4[0x3C];                                    // 0x1BD4(0x003C)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DebugDestroyLogCount;                              // 0x1C10(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C14[0xC];                                     // 0x1C14(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyRuntimeModifiers();
	void BP_OnBoostFinished();
	void BP_OnBoostStarted();
	void CleanupLoopingPooledFX();
	const struct FDagwoodRuntimeModifiers GetCurrentDagwoodRuntimeProperties();
	void HandleCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);
	void MakeInoperable();
	void MakeOperable(bool bAddGas);
	void NativeOnFuelChanged(float NewFuelPercent, float OldFuelPercent);
	void NativeOnLowFuel();
	void NativeOnOutOfFuel();
	void OnBoostFailed();
	void OnBoostReady();
	void OnClientBeginAltInteract(class AFortPawn* Pawn);
	void OnDestroyedPropFromCollision(const class ABuildingActor* BuildingHitActor);
	void OnEmptyFuel();
	void OnEnteredRoad();
	void OnEnterLandscape();
	void OnExitLandscape();
	void OnExitRoad();
	void OnFireStart();
	void OnFireStop();
	void OnFlipImpactDamage();
	void OnGainedFuel(float NewPercent);
	void OnHoldSelfDestructStarted(class AFortPawn* DriverPawn, const float ExitDuration);
	void OnHoldSelfDestructStopped(class AFortPawn* DriverPawn);
	void OnInoperableChanged(bool bInoperable);
	void OnLowFuel();
	void OnPoppedTire(const int32 TireIndex, const bool bFakeTire);
	void OnRep_DagwoodRuntimeModifiers(const struct FDagwoodRuntimeModifiers& PrevMods);
	void OnRep_Exploded();
	void OnRep_FakeTires(const TArray<ETireStates>& PrevTireStates);
	void OnRep_IsInoperable();
	void OnRep_PoppedTireReaction();
	void OnRep_RandSeed();
	void OnRep_ServerRepWheelData();
	void OnRep_Tires(const TArray<ETireStates>& PrevTireStates);
	void OnRimScrapeDamage(int32 TireIndex);
	void OnServerAltInteract(class AFortPawn* Pawn);
	void OnStartHandbrake();
	void OnStopHandbrake();
	void OnTickAudioController(float DeltaTime);
	void OnTickAudioFade(float FadeParam);
	void SelfDestructCleanup();
	void ServerAddRuntimeGearsInfo(const struct FRuntimeGearInfo& GearInfo);
	void ServerSelfDestructActivated();
	void ServerSetDestructionInfo(const float SelfDestructTime, const float MaxTimeZeroHealth, const float MaxTimeSelfDestructCleanup, const float MaxTimeExplosion);
	void ServerSetFadeDuration(const float NewFadeDuration);
	void ServerSetRuntimeBoostInfo(const struct FRuntimeBoostInfo& BoostInfo);
	void ServerSetRuntimeDriveInfo(float MaxIncline, float MaxTilt);
	void ServerSetRuntimeFuelInfo(const struct FRuntimeFuelInfo& FuelInfo);
	void ServerSetRuntimeGravity(float GravMult);
	void ServerSetRuntimeSpringsInfo(const struct FRuntimeSpringsInfo& SpringsInfo);
	void SetDamageInfoOnServer(const bool bInDamageFriendlyVehicles, const bool bInDamageOtherVehicles, const bool bInDamageOwnVehicle, const bool bInDamageAllowedFromOtherVehicle);
	void SetFuel(float NewFuel);
	void SetOnFire(bool bNewFire);
	void SetValetAudioController(class AFortValetAudioController* ValetAudio_0);
	void StartFade();

	bool ForwardOrReverseInputPressed() const;
	float GetBumpiness() const;
	float GetExplosionDelay() const;
	float GetFuel() const;
	float GetFuelCapacity() const;
	float GetMaxZeroHealthTime() const;
	float GetMiddleAxleForwardAdjust() const;
	bool GetOnFire() const;
	float GetSelfDestructCleanupDelay() const;
	float GetSelfDestructDelay() const;
	float GetTireHealthPercent(ETireLocations TireIndex) const;
	bool GetTireState(int32 TireIndex) const;
	ETireSurfaces GetTireSurface(ETireLocations TireIndex) const;
	bool IsNativeBPTickEnabled() const;
	bool IsOffroad() const;
	bool IsOnDirt() const;
	bool IsOnLandscape() const;
	bool IsOnRoad() const;
	bool IsTireSkidding(const float MinSpeedForSkid, const float AngleForSkid, const float SpeedForPeelout, const float SpeedForBraking) const;
	bool IsVehicleAcceleratingWithSpeedThreshold(float SpeedThreshold) const;
	float NativeCalculateAccelRumbleIntensity(float MaxIntensity) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDagwoodVehicle">();
	}
	static class AFortDagwoodVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortDagwoodVehicle>();
	}
};
static_assert(alignof(AFortDagwoodVehicle) == 0x000010, "Wrong alignment on AFortDagwoodVehicle");
static_assert(sizeof(AFortDagwoodVehicle) == 0x001C20, "Wrong size on AFortDagwoodVehicle");
static_assert(offsetof(AFortDagwoodVehicle, HardLandingCameraShake) == 0x001680, "Member 'AFortDagwoodVehicle::HardLandingCameraShake' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, DriverCamShakeClass) == 0x001688, "Member 'AFortDagwoodVehicle::DriverCamShakeClass' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, HandBrakeCamShakeClass) == 0x001690, "Member 'AFortDagwoodVehicle::HandBrakeCamShakeClass' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, VehicleClass) == 0x001698, "Member 'AFortDagwoodVehicle::VehicleClass' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FadeDelay) == 0x00169C, "Member 'AFortDagwoodVehicle::FadeDelay' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FadeDuration) == 0x0016A0, "Member 'AFortDagwoodVehicle::FadeDuration' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, MinBrakeForceForSkid) == 0x0016A4, "Member 'AFortDagwoodVehicle::MinBrakeForceForSkid' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, MinForwardSpeedForSkid) == 0x0016A8, "Member 'AFortDagwoodVehicle::MinForwardSpeedForSkid' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, SpeedLinesCueTag) == 0x0016AC, "Member 'AFortDagwoodVehicle::SpeedLinesCueTag' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FadeStartTime) == 0x0016B4, "Member 'AFortDagwoodVehicle::FadeStartTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, OnOutOfFuelDelegate) == 0x0016B8, "Member 'AFortDagwoodVehicle::OnOutOfFuelDelegate' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, OnGainedFuelDelegate) == 0x0016C8, "Member 'AFortDagwoodVehicle::OnGainedFuelDelegate' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NetworkPhysicsComponent) == 0x0016D8, "Member 'AFortDagwoodVehicle::NetworkPhysicsComponent' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RechargeableBoostPercent) == 0x001740, "Member 'AFortDagwoodVehicle::RechargeableBoostPercent' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, BoostEndTime) == 0x001744, "Member 'AFortDagwoodVehicle::BoostEndTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, SplatterSourceComp) == 0x001748, "Member 'AFortDagwoodVehicle::SplatterSourceComp' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bEnableNativizedTick) == 0x001750, "Member 'AFortDagwoodVehicle::bEnableNativizedTick' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PassengerLeanSockets) == 0x001758, "Member 'AFortDagwoodVehicle::PassengerLeanSockets' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PassngerLeanRelativeOffsets) == 0x001768, "Member 'AFortDagwoodVehicle::PassngerLeanRelativeOffsets' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PassengerCameraModeClass) == 0x001778, "Member 'AFortDagwoodVehicle::PassengerCameraModeClass' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PassengerCameraModeClass_ADS) == 0x001780, "Member 'AFortDagwoodVehicle::PassengerCameraModeClass_ADS' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, WheelSocketNames) == 0x001788, "Member 'AFortDagwoodVehicle::WheelSocketNames' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FortDagwoodVehicleConfigs) == 0x001798, "Member 'AFortDagwoodVehicle::FortDagwoodVehicleConfigs' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FortDagwoodConfigsClass) == 0x0017A0, "Member 'AFortDagwoodVehicle::FortDagwoodConfigsClass' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RearShocks) == 0x0017A8, "Member 'AFortDagwoodVehicle::RearShocks' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, OffroadEnvironmentDamageTags) == 0x0017B8, "Member 'AFortDagwoodVehicle::OffroadEnvironmentDamageTags' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FireDamageTags) == 0x0017D8, "Member 'AFortDagwoodVehicle::FireDamageTags' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeWheelScaleRear) == 0x0017F8, "Member 'AFortDagwoodVehicle::NativeWheelScaleRear' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeWheelScaleFront) == 0x001804, "Member 'AFortDagwoodVehicle::NativeWheelScaleFront' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeTireScaleRear) == 0x001810, "Member 'AFortDagwoodVehicle::NativeTireScaleRear' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeTireScaleFront) == 0x00181C, "Member 'AFortDagwoodVehicle::NativeTireScaleFront' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bTireSmokeActive) == 0x001828, "Member 'AFortDagwoodVehicle::bTireSmokeActive' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bBoostFailed) == 0x001829, "Member 'AFortDagwoodVehicle::bBoostFailed' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bCanBoostPitch) == 0x00182A, "Member 'AFortDagwoodVehicle::bCanBoostPitch' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bOnRoad) == 0x00182B, "Member 'AFortDagwoodVehicle::bOnRoad' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bOnLandscape) == 0x00182C, "Member 'AFortDagwoodVehicle::bOnLandscape' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bOnDirt) == 0x00182D, "Member 'AFortDagwoodVehicle::bOnDirt' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bOnVehicle) == 0x00182E, "Member 'AFortDagwoodVehicle::bOnVehicle' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bWasBrakeSkidding) == 0x00182F, "Member 'AFortDagwoodVehicle::bWasBrakeSkidding' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, AccelForceFeedbackHandle) == 0x001830, "Member 'AFortDagwoodVehicle::AccelForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, SkidForceFeedbackHandle) == 0x001838, "Member 'AFortDagwoodVehicle::SkidForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, BrakeForceFeedbackHandle) == 0x001840, "Member 'AFortDagwoodVehicle::BrakeForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, HandBrakeForceFeedbackHandle) == 0x001848, "Member 'AFortDagwoodVehicle::HandBrakeForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, TireSurfaces) == 0x001850, "Member 'AFortDagwoodVehicle::TireSurfaces' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bBoosting) == 0x001860, "Member 'AFortDagwoodVehicle::bBoosting' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bSpeedLinesActive) == 0x001861, "Member 'AFortDagwoodVehicle::bSpeedLinesActive' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, DagwoodRuntimeModifiedProperties) == 0x001870, "Member 'AFortDagwoodVehicle::DagwoodRuntimeModifiedProperties' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, ServerRepWheelData) == 0x0018F8, "Member 'AFortDagwoodVehicle::ServerRepWheelData' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipYawForwardTargetDirection) == 0x001958, "Member 'AFortDagwoodVehicle::FlipYawForwardTargetDirection' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipYawOriginalForward) == 0x001964, "Member 'AFortDagwoodVehicle::FlipYawOriginalForward' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LastPoppedTire) == 0x001970, "Member 'AFortDagwoodVehicle::LastPoppedTire' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RoadTopSpeedMultiplier) == 0x001974, "Member 'AFortDagwoodVehicle::RoadTopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, CurrentBumpiness) == 0x001978, "Member 'AFortDagwoodVehicle::CurrentBumpiness' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, CurrentForwardAcceleration) == 0x00197C, "Member 'AFortDagwoodVehicle::CurrentForwardAcceleration' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PreviousTurnAlpha) == 0x001980, "Member 'AFortDagwoodVehicle::PreviousTurnAlpha' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, CurrentCameraAssistStrength) == 0x001984, "Member 'AFortDagwoodVehicle::CurrentCameraAssistStrength' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LostGripTime) == 0x001988, "Member 'AFortDagwoodVehicle::LostGripTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LostGripRightAlpha) == 0x00198C, "Member 'AFortDagwoodVehicle::LostGripRightAlpha' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, HandbrakeTime) == 0x001990, "Member 'AFortDagwoodVehicle::HandbrakeTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, HandbrakeStartTime) == 0x001994, "Member 'AFortDagwoodVehicle::HandbrakeStartTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RimScrapeDamageTimer) == 0x001998, "Member 'AFortDagwoodVehicle::RimScrapeDamageTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipYawMult) == 0x00199C, "Member 'AFortDagwoodVehicle::FlipYawMult' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipTimer) == 0x0019A0, "Member 'AFortDagwoodVehicle::FlipTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipExplodeTimer) == 0x0019A4, "Member 'AFortDagwoodVehicle::FlipExplodeTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipPushForceTimer) == 0x0019A8, "Member 'AFortDagwoodVehicle::FlipPushForceTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipAirTimer) == 0x0019AC, "Member 'AFortDagwoodVehicle::FlipAirTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipLanding) == 0x0019B0, "Member 'AFortDagwoodVehicle::FlipLanding' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipStartTime) == 0x0019B4, "Member 'AFortDagwoodVehicle::FlipStartTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LastFlipDamageTime) == 0x0019B8, "Member 'AFortDagwoodVehicle::LastFlipDamageTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PreFlipControlLossTimer) == 0x0019BC, "Member 'AFortDagwoodVehicle::PreFlipControlLossTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LastPopTireTime) == 0x0019C0, "Member 'AFortDagwoodVehicle::LastPopTireTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, HealthZeroTime) == 0x0019C4, "Member 'AFortDagwoodVehicle::HealthZeroTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bDidCinematicFlip) == 0x0019C8, "Member 'AFortDagwoodVehicle::bDidCinematicFlip' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bCanCinematicFlip) == 0x0019C9, "Member 'AFortDagwoodVehicle::bCanCinematicFlip' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bInPopTireVeer) == 0x0019CA, "Member 'AFortDagwoodVehicle::bInPopTireVeer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bInFlipRecovery) == 0x0019CB, "Member 'AFortDagwoodVehicle::bInFlipRecovery' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bExplodeAfterFlip) == 0x0019CC, "Member 'AFortDagwoodVehicle::bExplodeAfterFlip' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bLostGrip) == 0x0019CD, "Member 'AFortDagwoodVehicle::bLostGrip' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bApplyHandbrakeCatchupForce) == 0x0019CE, "Member 'AFortDagwoodVehicle::bApplyHandbrakeCatchupForce' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bDidHandbrakeCatchup) == 0x0019CF, "Member 'AFortDagwoodVehicle::bDidHandbrakeCatchup' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bInFlipRoll) == 0x0019D0, "Member 'AFortDagwoodVehicle::bInFlipRoll' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bInFlipYaw) == 0x0019D1, "Member 'AFortDagwoodVehicle::bInFlipYaw' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bInFlipPitch) == 0x0019D2, "Member 'AFortDagwoodVehicle::bInFlipPitch' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bFlipDidLeaveGround) == 0x0019D3, "Member 'AFortDagwoodVehicle::bFlipDidLeaveGround' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bBreakBuildingsIfBlockingLeaningPassenger) == 0x0019D4, "Member 'AFortDagwoodVehicle::bBreakBuildingsIfBlockingLeaningPassenger' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LeanBreakTimeAccumulator) == 0x0019D8, "Member 'AFortDagwoodVehicle::LeanBreakTimeAccumulator' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LeanBreakCheckInterval) == 0x0019DC, "Member 'AFortDagwoodVehicle::LeanBreakCheckInterval' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bExploded) == 0x0019E0, "Member 'AFortDagwoodVehicle::bExploded' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LastStickInput) == 0x0019E4, "Member 'AFortDagwoodVehicle::LastStickInput' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, SeatToWindowShapeNames) == 0x0019F0, "Member 'AFortDagwoodVehicle::SeatToWindowShapeNames' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, OffroadCameraShakeInstance) == 0x001A00, "Member 'AFortDagwoodVehicle::OffroadCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, DriverCameraShakeInstance) == 0x001A08, "Member 'AFortDagwoodVehicle::DriverCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, AccelCameraShakeInstance) == 0x001A10, "Member 'AFortDagwoodVehicle::AccelCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, HandBrakeCameraShakeInstance) == 0x001A18, "Member 'AFortDagwoodVehicle::HandBrakeCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeComp_RoadAndExhaust) == 0x001A20, "Member 'AFortDagwoodVehicle::NativeComp_RoadAndExhaust' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeComp_TireSkid) == 0x001A28, "Member 'AFortDagwoodVehicle::NativeComp_TireSkid' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeComp_LowFuelSputter) == 0x001A30, "Member 'AFortDagwoodVehicle::NativeComp_LowFuelSputter' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeComp_Damage) == 0x001A38, "Member 'AFortDagwoodVehicle::NativeComp_Damage' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeComp_SpeedLines) == 0x001A40, "Member 'AFortDagwoodVehicle::NativeComp_SpeedLines' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, TireExhaustFX) == 0x001A48, "Member 'AFortDagwoodVehicle::TireExhaustFX' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeSys_LowFuelSputter) == 0x001A50, "Member 'AFortDagwoodVehicle::NativeSys_LowFuelSputter' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeSys_SpeedLines) == 0x001A58, "Member 'AFortDagwoodVehicle::NativeSys_SpeedLines' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeSys_TireSkid) == 0x001A60, "Member 'AFortDagwoodVehicle::NativeSys_TireSkid' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, TireStates) == 0x001A78, "Member 'AFortDagwoodVehicle::TireStates' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FakeTireStates) == 0x001A88, "Member 'AFortDagwoodVehicle::FakeTireStates' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, ActivePoppedTireReaction) == 0x001A98, "Member 'AFortDagwoodVehicle::ActivePoppedTireReaction' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, ServerPoppedTireReaction) == 0x001A99, "Member 'AFortDagwoodVehicle::ServerPoppedTireReaction' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, ServerCriticalHealth) == 0x001A9C, "Member 'AFortDagwoodVehicle::ServerCriticalHealth' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, ValetAudio) == 0x001AA0, "Member 'AFortDagwoodVehicle::ValetAudio' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, TireMeshes) == 0x001AA8, "Member 'AFortDagwoodVehicle::TireMeshes' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FakeTireMeshes) == 0x001AB8, "Member 'AFortDagwoodVehicle::FakeTireMeshes' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bIsInoperable) == 0x001ACC, "Member 'AFortDagwoodVehicle::bIsInoperable' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RandomSeed) == 0x001AD0, "Member 'AFortDagwoodVehicle::RandomSeed' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RandStream) == 0x001AD4, "Member 'AFortDagwoodVehicle::RandStream' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, TireBootMesh) == 0x001B78, "Member 'AFortDagwoodVehicle::TireBootMesh' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, MapSelfDestructActionDefForUI) == 0x001B80, "Member 'AFortDagwoodVehicle::MapSelfDestructActionDefForUI' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, MinimumTimeBetweenSelfDestructPromptChanges) == 0x001BD0, "Member 'AFortDagwoodVehicle::MinimumTimeBetweenSelfDestructPromptChanges' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, DebugDestroyLogCount) == 0x001C10, "Member 'AFortDagwoodVehicle::DebugDestroyLogCount' has a wrong offset!");

// Class ValetRuntime.FortDagwoodVehicleAnimInstance
// 0x0030 (0x04D0 - 0x04A0)
class UFortDagwoodVehicleAnimInstance final : public UFortVehicleAnimInstance
{
public:
	class AFortDagwoodVehicle*                    Dagwood;                                           // 0x0498(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GlassScale_FR;                                     // 0x04A0(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GlassScale_FL;                                     // 0x04AC(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GlassScale_BR;                                     // 0x04B8(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GlassScale_BL;                                     // 0x04C4(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDagwoodVehicleAnimInstance">();
	}
	static class UFortDagwoodVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDagwoodVehicleAnimInstance>();
	}
};
static_assert(alignof(UFortDagwoodVehicleAnimInstance) == 0x000010, "Wrong alignment on UFortDagwoodVehicleAnimInstance");
static_assert(sizeof(UFortDagwoodVehicleAnimInstance) == 0x0004D0, "Wrong size on UFortDagwoodVehicleAnimInstance");
static_assert(offsetof(UFortDagwoodVehicleAnimInstance, Dagwood) == 0x000498, "Member 'UFortDagwoodVehicleAnimInstance::Dagwood' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleAnimInstance, GlassScale_FR) == 0x0004A0, "Member 'UFortDagwoodVehicleAnimInstance::GlassScale_FR' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleAnimInstance, GlassScale_FL) == 0x0004AC, "Member 'UFortDagwoodVehicleAnimInstance::GlassScale_FL' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleAnimInstance, GlassScale_BR) == 0x0004B8, "Member 'UFortDagwoodVehicleAnimInstance::GlassScale_BR' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleAnimInstance, GlassScale_BL) == 0x0004C4, "Member 'UFortDagwoodVehicleAnimInstance::GlassScale_BL' has a wrong offset!");

// Class ValetRuntime.FortDagwoodVehicleManager
// 0x0010 (0x00C0 - 0x00B0)
class UFortDagwoodVehicleManager final : public UGameStateComponent
{
public:
	bool                                          bHasUpdatedPropReplacement;                        // 0x00B0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumVehiclesSpawnedWithTireMod;                     // 0x00B4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CustomHandleActorStreamedInEditor(class AActor* SourceActor);
	void OnVehicleSpawned(class AFortAthenaVehicle* Vehicle);
	void OnVehicleSpawnsUpdated(class UFortVehicleItemDefinition* VehicleItemDef, TArray<class AActor*>* SpawnedVehicles, int32 NewVehicleCount);
	void UpdatePropReplacement();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDagwoodVehicleManager">();
	}
	static class UFortDagwoodVehicleManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDagwoodVehicleManager>();
	}
};
static_assert(alignof(UFortDagwoodVehicleManager) == 0x000008, "Wrong alignment on UFortDagwoodVehicleManager");
static_assert(sizeof(UFortDagwoodVehicleManager) == 0x0000C0, "Wrong size on UFortDagwoodVehicleManager");
static_assert(offsetof(UFortDagwoodVehicleManager, bHasUpdatedPropReplacement) == 0x0000B0, "Member 'UFortDagwoodVehicleManager::bHasUpdatedPropReplacement' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleManager, NumVehiclesSpawnedWithTireMod) == 0x0000B4, "Member 'UFortDagwoodVehicleManager::NumVehiclesSpawnedWithTireMod' has a wrong offset!");

// Class ValetRuntime.FortValetAudioController
// 0x0140 (0x0360 - 0x0220)
class AFortValetAudioController final : public AActor
{
public:
	TMulticastInlineDelegate<void()>              OnEngineLoadChanged;                               // 0x0220(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnShiftGearCompleted;                              // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bUpshift)> OnShiftGearDelegate;                               // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         RPMResetTime_Native;                               // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JitterAmount_Native;                               // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShiftTimeThreshold_Native;                         // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSinceShift_Native;                             // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineRPMInterp_Native;                            // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineRPMLinear_Native;                            // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRPMRange_Native;                                // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRPMRange_Native;                                // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurrentlyShifting_Native;                         // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentAccelRateGearModifier_Native;               // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentAccelRate_Native;                           // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentGear_Native;                                // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxGear_Native;                                    // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultAccelRateScalar_Native;                     // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GearAttackInterpSpeed_Native;                      // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GearReleaseInterpSpeed_Native;                     // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelRateScalarFirstGear_Native;                   // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelRateScalarMinGear_Native;                     // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelRateScalarMaxGear_Native;                     // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShiftToRPMStart_Native;                            // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShiftToRPMEnd_Native;                              // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShiftFromRPMStart_Native;                          // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShiftFromRPMEnd_Native;                            // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRPMSawtoothDecrement_Native;                    // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRPMSawtoothRepeatTime_Native;                   // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownhillAccelScalar_Native;                        // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UphillAccelScalar_Native;                          // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RPMFloatCurveMapping;                              // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalizedSpeed_Native;                            // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspValue_Native;                                  // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHandbraking_Native;                             // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MotoSynthVolume_Native;                            // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotoSynthInitialFadeInTime_Native;                 // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MotoSynthLogRPM_Native;                            // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFuel_Native;                                   // 0x02E4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInWater_Native;                                 // 0x02E5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalPlayerInVehicle_Native;                      // 0x02E6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E7[0x1];                                      // 0x02E7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeLocalPlayerEnteredVehicle_Native;              // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttemptingDirectionChange_Native;                 // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreDestroy_Native;                                // 0x02ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEngineLoad_Native;                                // 0x02EE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EF[0x1];                                      // 0x02EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkidAmount_Native;                                 // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSinceAwoken_Native;                            // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyed_Native;                                 // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeSinceSurfaceChange_Native;                     // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             OnInitialSuspensionSound;                          // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleForSkidding_Native;                           // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringCompressionMultiplier;                       // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotoSynthMaxVolume_Native;                         // 0x0310(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MotoSynthTimeInVehicleTimeRange;                   // 0x0314(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MotoSynthTimeInVehicleVolumeRange;                 // 0x031C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AFortDagwoodVehicle>     ValetVehicle;                                      // 0x0324(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortLayeredAudioComponent*             Engine_Native;                                     // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        BoostAudioComponent_Native;                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USynthComponentMoto*                    SynthComponentMoto_Native;                         // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCollisionAudioComponent*           SuspensionCollisionComponent_Native;               // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CacheValetVehicle(class AFortDagwoodVehicle* InVehicle);
	void OnSuspensionCollision_Native(bool* OutResult, float* OutMagnitude);
	void OnTireModApplied(const struct FTireInfo& AppliedTireMod);
	void Update_Native();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortValetAudioController">();
	}
	static class AFortValetAudioController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortValetAudioController>();
	}
};
static_assert(alignof(AFortValetAudioController) == 0x000008, "Wrong alignment on AFortValetAudioController");
static_assert(sizeof(AFortValetAudioController) == 0x000360, "Wrong size on AFortValetAudioController");
static_assert(offsetof(AFortValetAudioController, OnEngineLoadChanged) == 0x000220, "Member 'AFortValetAudioController::OnEngineLoadChanged' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, OnShiftGearCompleted) == 0x000230, "Member 'AFortValetAudioController::OnShiftGearCompleted' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, OnShiftGearDelegate) == 0x000240, "Member 'AFortValetAudioController::OnShiftGearDelegate' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, RPMResetTime_Native) == 0x000250, "Member 'AFortValetAudioController::RPMResetTime_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, JitterAmount_Native) == 0x000254, "Member 'AFortValetAudioController::JitterAmount_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ShiftTimeThreshold_Native) == 0x000258, "Member 'AFortValetAudioController::ShiftTimeThreshold_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, TimeSinceShift_Native) == 0x00025C, "Member 'AFortValetAudioController::TimeSinceShift_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, EngineRPMInterp_Native) == 0x000260, "Member 'AFortValetAudioController::EngineRPMInterp_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, EngineRPMLinear_Native) == 0x000264, "Member 'AFortValetAudioController::EngineRPMLinear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MinRPMRange_Native) == 0x000268, "Member 'AFortValetAudioController::MinRPMRange_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MaxRPMRange_Native) == 0x00026C, "Member 'AFortValetAudioController::MaxRPMRange_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bCurrentlyShifting_Native) == 0x000270, "Member 'AFortValetAudioController::bCurrentlyShifting_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, CurrentAccelRateGearModifier_Native) == 0x000274, "Member 'AFortValetAudioController::CurrentAccelRateGearModifier_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, CurrentAccelRate_Native) == 0x000278, "Member 'AFortValetAudioController::CurrentAccelRate_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, CurrentGear_Native) == 0x00027C, "Member 'AFortValetAudioController::CurrentGear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MaxGear_Native) == 0x000280, "Member 'AFortValetAudioController::MaxGear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, DefaultAccelRateScalar_Native) == 0x000284, "Member 'AFortValetAudioController::DefaultAccelRateScalar_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, GearAttackInterpSpeed_Native) == 0x000288, "Member 'AFortValetAudioController::GearAttackInterpSpeed_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, GearReleaseInterpSpeed_Native) == 0x00028C, "Member 'AFortValetAudioController::GearReleaseInterpSpeed_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, AccelRateScalarFirstGear_Native) == 0x000290, "Member 'AFortValetAudioController::AccelRateScalarFirstGear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, AccelRateScalarMinGear_Native) == 0x000294, "Member 'AFortValetAudioController::AccelRateScalarMinGear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, AccelRateScalarMaxGear_Native) == 0x000298, "Member 'AFortValetAudioController::AccelRateScalarMaxGear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ShiftToRPMStart_Native) == 0x00029C, "Member 'AFortValetAudioController::ShiftToRPMStart_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ShiftToRPMEnd_Native) == 0x0002A0, "Member 'AFortValetAudioController::ShiftToRPMEnd_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ShiftFromRPMStart_Native) == 0x0002A4, "Member 'AFortValetAudioController::ShiftFromRPMStart_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ShiftFromRPMEnd_Native) == 0x0002A8, "Member 'AFortValetAudioController::ShiftFromRPMEnd_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MaxRPMSawtoothDecrement_Native) == 0x0002AC, "Member 'AFortValetAudioController::MaxRPMSawtoothDecrement_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MaxRPMSawtoothRepeatTime_Native) == 0x0002B0, "Member 'AFortValetAudioController::MaxRPMSawtoothRepeatTime_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, DownhillAccelScalar_Native) == 0x0002B4, "Member 'AFortValetAudioController::DownhillAccelScalar_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, UphillAccelScalar_Native) == 0x0002B8, "Member 'AFortValetAudioController::UphillAccelScalar_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, RPMFloatCurveMapping) == 0x0002C0, "Member 'AFortValetAudioController::RPMFloatCurveMapping' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, NormalizedSpeed_Native) == 0x0002C8, "Member 'AFortValetAudioController::NormalizedSpeed_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, SuspValue_Native) == 0x0002CC, "Member 'AFortValetAudioController::SuspValue_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bIsHandbraking_Native) == 0x0002D0, "Member 'AFortValetAudioController::bIsHandbraking_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MotoSynthVolume_Native) == 0x0002D4, "Member 'AFortValetAudioController::MotoSynthVolume_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MotoSynthInitialFadeInTime_Native) == 0x0002D8, "Member 'AFortValetAudioController::MotoSynthInitialFadeInTime_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MotoSynthLogRPM_Native) == 0x0002E0, "Member 'AFortValetAudioController::MotoSynthLogRPM_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bHasFuel_Native) == 0x0002E4, "Member 'AFortValetAudioController::bHasFuel_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bIsInWater_Native) == 0x0002E5, "Member 'AFortValetAudioController::bIsInWater_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bLocalPlayerInVehicle_Native) == 0x0002E6, "Member 'AFortValetAudioController::bLocalPlayerInVehicle_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, TimeLocalPlayerEnteredVehicle_Native) == 0x0002E8, "Member 'AFortValetAudioController::TimeLocalPlayerEnteredVehicle_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bAttemptingDirectionChange_Native) == 0x0002EC, "Member 'AFortValetAudioController::bAttemptingDirectionChange_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bPreDestroy_Native) == 0x0002ED, "Member 'AFortValetAudioController::bPreDestroy_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bEngineLoad_Native) == 0x0002EE, "Member 'AFortValetAudioController::bEngineLoad_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, SkidAmount_Native) == 0x0002F0, "Member 'AFortValetAudioController::SkidAmount_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, TimeSinceAwoken_Native) == 0x0002F4, "Member 'AFortValetAudioController::TimeSinceAwoken_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bDestroyed_Native) == 0x0002F8, "Member 'AFortValetAudioController::bDestroyed_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, TimeSinceSurfaceChange_Native) == 0x0002FC, "Member 'AFortValetAudioController::TimeSinceSurfaceChange_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, OnInitialSuspensionSound) == 0x000300, "Member 'AFortValetAudioController::OnInitialSuspensionSound' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, AngleForSkidding_Native) == 0x000308, "Member 'AFortValetAudioController::AngleForSkidding_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, SpringCompressionMultiplier) == 0x00030C, "Member 'AFortValetAudioController::SpringCompressionMultiplier' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MotoSynthMaxVolume_Native) == 0x000310, "Member 'AFortValetAudioController::MotoSynthMaxVolume_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MotoSynthTimeInVehicleTimeRange) == 0x000314, "Member 'AFortValetAudioController::MotoSynthTimeInVehicleTimeRange' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MotoSynthTimeInVehicleVolumeRange) == 0x00031C, "Member 'AFortValetAudioController::MotoSynthTimeInVehicleVolumeRange' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ValetVehicle) == 0x000324, "Member 'AFortValetAudioController::ValetVehicle' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, Engine_Native) == 0x000330, "Member 'AFortValetAudioController::Engine_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, BoostAudioComponent_Native) == 0x000338, "Member 'AFortValetAudioController::BoostAudioComponent_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, SynthComponentMoto_Native) == 0x000340, "Member 'AFortValetAudioController::SynthComponentMoto_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, SuspensionCollisionComponent_Native) == 0x000348, "Member 'AFortValetAudioController::SuspensionCollisionComponent_Native' has a wrong offset!");

// Class ValetRuntime.FortValetGameFeatureData
// 0x0080 (0x0548 - 0x04C8)
class UFortValetGameFeatureData final : public UFortGameFeatureData
{
public:
	TMap<TSoftClassPtr<class UClass>, struct FVehiclePropReplacementData> PropReplacements;                                  // 0x04C8(0x0050)(Edit, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   VehicleSpawnerClass;                               // 0x0518(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            SpawnActorCollisionHandlingMethod;                 // 0x0540(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_541[0x7];                                      // 0x0541(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortValetGameFeatureData">();
	}
	static class UFortValetGameFeatureData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortValetGameFeatureData>();
	}
};
static_assert(alignof(UFortValetGameFeatureData) == 0x000008, "Wrong alignment on UFortValetGameFeatureData");
static_assert(sizeof(UFortValetGameFeatureData) == 0x000548, "Wrong size on UFortValetGameFeatureData");
static_assert(offsetof(UFortValetGameFeatureData, PropReplacements) == 0x0004C8, "Member 'UFortValetGameFeatureData::PropReplacements' has a wrong offset!");
static_assert(offsetof(UFortValetGameFeatureData, VehicleSpawnerClass) == 0x000518, "Member 'UFortValetGameFeatureData::VehicleSpawnerClass' has a wrong offset!");
static_assert(offsetof(UFortValetGameFeatureData, SpawnActorCollisionHandlingMethod) == 0x000540, "Member 'UFortValetGameFeatureData::SpawnActorCollisionHandlingMethod' has a wrong offset!");

// Class ValetRuntime.FortValetMountedGunAnimInstance
// 0x0020 (0x0490 - 0x0470)
class UFortValetMountedGunAnimInstance final : public UFortAnimInstance
{
public:
	class AFortDagwoodVehicle*                    VehicleActor;                                      // 0x0470(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingMountedGun;                                // 0x0478(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SeatIndexCached;                                   // 0x047C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimingYaw;                                         // 0x0480(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimingPitch;                                       // 0x0484(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeaponRangedForVehicle*            MountedWeapon;                                     // 0x0488(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortValetMountedGunAnimInstance">();
	}
	static class UFortValetMountedGunAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortValetMountedGunAnimInstance>();
	}
};
static_assert(alignof(UFortValetMountedGunAnimInstance) == 0x000010, "Wrong alignment on UFortValetMountedGunAnimInstance");
static_assert(sizeof(UFortValetMountedGunAnimInstance) == 0x000490, "Wrong size on UFortValetMountedGunAnimInstance");
static_assert(offsetof(UFortValetMountedGunAnimInstance, VehicleActor) == 0x000470, "Member 'UFortValetMountedGunAnimInstance::VehicleActor' has a wrong offset!");
static_assert(offsetof(UFortValetMountedGunAnimInstance, bIsUsingMountedGun) == 0x000478, "Member 'UFortValetMountedGunAnimInstance::bIsUsingMountedGun' has a wrong offset!");
static_assert(offsetof(UFortValetMountedGunAnimInstance, SeatIndexCached) == 0x00047C, "Member 'UFortValetMountedGunAnimInstance::SeatIndexCached' has a wrong offset!");
static_assert(offsetof(UFortValetMountedGunAnimInstance, AimingYaw) == 0x000480, "Member 'UFortValetMountedGunAnimInstance::AimingYaw' has a wrong offset!");
static_assert(offsetof(UFortValetMountedGunAnimInstance, AimingPitch) == 0x000484, "Member 'UFortValetMountedGunAnimInstance::AimingPitch' has a wrong offset!");
static_assert(offsetof(UFortValetMountedGunAnimInstance, MountedWeapon) == 0x000488, "Member 'UFortValetMountedGunAnimInstance::MountedWeapon' has a wrong offset!");

// Class ValetRuntime.FortValetPassengerAnimInstance
// 0x0080 (0x0750 - 0x06D0)
class UFortValetPassengerAnimInstance final : public UFortVehicleOccupantAnimInstance
{
public:
	struct FCachedAnimRelevancyData               IntoVehicleCachedData;                             // 0x06D0(0x001C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedAnimRelevancyData               OutOfVehicleCachedData;                            // 0x06EC(0x001C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AFortDagwoodVehicle>     DagwoodVehicleInstance;                            // 0x0708(0x0028)(BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnYaw;                                           // 0x0730(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0734(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutTime;                                           // 0x0738(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NegativeTurnYaw;                                   // 0x073C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReloading;                                      // 0x0740(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTargeting;                                      // 0x0741(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFiring;                                         // 0x0742(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingConsumable;                                // 0x0743(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInAction;                                       // 0x0744(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPassengerBackLeft;                              // 0x0745(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsThrowConsumable;                                // 0x0746(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTargetingOrThrowingConsumable;                  // 0x0747(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_748[0x8];                                      // 0x0748(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortValetPassengerAnimInstance">();
	}
	static class UFortValetPassengerAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortValetPassengerAnimInstance>();
	}
};
static_assert(alignof(UFortValetPassengerAnimInstance) == 0x000010, "Wrong alignment on UFortValetPassengerAnimInstance");
static_assert(sizeof(UFortValetPassengerAnimInstance) == 0x000750, "Wrong size on UFortValetPassengerAnimInstance");
static_assert(offsetof(UFortValetPassengerAnimInstance, IntoVehicleCachedData) == 0x0006D0, "Member 'UFortValetPassengerAnimInstance::IntoVehicleCachedData' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, OutOfVehicleCachedData) == 0x0006EC, "Member 'UFortValetPassengerAnimInstance::OutOfVehicleCachedData' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, DagwoodVehicleInstance) == 0x000708, "Member 'UFortValetPassengerAnimInstance::DagwoodVehicleInstance' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, TurnYaw) == 0x000730, "Member 'UFortValetPassengerAnimInstance::TurnYaw' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, InTime) == 0x000734, "Member 'UFortValetPassengerAnimInstance::InTime' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, OutTime) == 0x000738, "Member 'UFortValetPassengerAnimInstance::OutTime' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, NegativeTurnYaw) == 0x00073C, "Member 'UFortValetPassengerAnimInstance::NegativeTurnYaw' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsReloading) == 0x000740, "Member 'UFortValetPassengerAnimInstance::bIsReloading' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsTargeting) == 0x000741, "Member 'UFortValetPassengerAnimInstance::bIsTargeting' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsFiring) == 0x000742, "Member 'UFortValetPassengerAnimInstance::bIsFiring' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsUsingConsumable) == 0x000743, "Member 'UFortValetPassengerAnimInstance::bIsUsingConsumable' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsInAction) == 0x000744, "Member 'UFortValetPassengerAnimInstance::bIsInAction' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsPassengerBackLeft) == 0x000745, "Member 'UFortValetPassengerAnimInstance::bIsPassengerBackLeft' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsThrowConsumable) == 0x000746, "Member 'UFortValetPassengerAnimInstance::bIsThrowConsumable' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsTargetingOrThrowingConsumable) == 0x000747, "Member 'UFortValetPassengerAnimInstance::bIsTargetingOrThrowingConsumable' has a wrong offset!");

}

