#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DiscoveryBrowserUI

#include "Basic.hpp"

#include "DiscoveryBrowserUI_structs.hpp"
#include "Engine_classes.hpp"
#include "SlateCore_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "CommonUI_classes.hpp"
#include "UMG_classes.hpp"
#include "CommonUILegacy_structs.hpp"
#include "CommonUILegacy_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class DiscoveryBrowserUI.FortActivityBrowserTabButton
// 0x0000 (0x0ED0 - 0x0ED0)
class UFortActivityBrowserTabButton final : public UFortTabButton
{
public:
	void OnFavoriteChanged(bool bIsFavorite);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserTabButton">();
	}
	static class UFortActivityBrowserTabButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserTabButton>();
	}
};
static_assert(alignof(UFortActivityBrowserTabButton) == 0x000010, "Wrong alignment on UFortActivityBrowserTabButton");
static_assert(sizeof(UFortActivityBrowserTabButton) == 0x000ED0, "Wrong size on UFortActivityBrowserTabButton");

// Class DiscoveryBrowserUI.ActivityLibraryComponent
// 0x0010 (0x00C0 - 0x00B0)
class UActivityLibraryComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x10];                                      // 0x00B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActivityLibraryComponent">();
	}
	static class UActivityLibraryComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivityLibraryComponent>();
	}
};
static_assert(alignof(UActivityLibraryComponent) == 0x000008, "Wrong alignment on UActivityLibraryComponent");
static_assert(sizeof(UActivityLibraryComponent) == 0x0000C0, "Wrong size on UActivityLibraryComponent");

// Class DiscoveryBrowserUI.FortActivityBrowser
// 0x0200 (0x0530 - 0x0330)
class UFortActivityBrowser final : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonActivatableWidgetSwitcher*       Switcher_ActivityBrowserViews;                     // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_Back;                                       // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_ShowCustomMatchmakingModal;                 // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_BackToTop;                                  // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_MobileShowGameDetails;                      // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_MobileAccept;                               // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_MobileClose;                                // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_JoinAsSpectator;                            // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_ShowSpectateMatchModal;                     // 0x0378(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortTabListWidgetBase*                 TabList_BrowserTabs;                               // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPrimaryContentSetup                   PrimaryContentSetup;                               // 0x0388(0x0001)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortTabButton>             TabButtonClass;                                    // 0x0390(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortActivityDetailsModal>  ActivityDetailsModalClass;                         // 0x0398(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   SoftCustomMatchmakingModalClass;                   // 0x03A0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   SoftSpectateMatchModalClass;                       // 0x03C8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortCreativeDiscoverySurfaceManager*   Manager;                                           // 0x03F0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortCreativeDiscoverySurface*          Surface;                                           // 0x03F8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UFortCreativeDiscoveryActivityProvider*> CachedSurfaceActivityProviders;                    // 0x0400(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_410[0x108];                                    // 0x0410(0x0108)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGameActivityProvider*              CachedWinterfestActivityProvider;                  // 0x0518(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_520[0x10];                                     // 0x0520(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleTabChanged(class FName TabId);
	void OnActivitySelected();
	void OnPlayerQueueTypeChanged(const EPlayerQueueType PlayerQueueType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowser">();
	}
	static class UFortActivityBrowser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowser>();
	}
};
static_assert(alignof(UFortActivityBrowser) == 0x000008, "Wrong alignment on UFortActivityBrowser");
static_assert(sizeof(UFortActivityBrowser) == 0x000530, "Wrong size on UFortActivityBrowser");
static_assert(offsetof(UFortActivityBrowser, Switcher_ActivityBrowserViews) == 0x000338, "Member 'UFortActivityBrowser::Switcher_ActivityBrowserViews' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, Button_Back) == 0x000340, "Member 'UFortActivityBrowser::Button_Back' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, Button_ShowCustomMatchmakingModal) == 0x000348, "Member 'UFortActivityBrowser::Button_ShowCustomMatchmakingModal' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, Button_BackToTop) == 0x000350, "Member 'UFortActivityBrowser::Button_BackToTop' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, Button_MobileShowGameDetails) == 0x000358, "Member 'UFortActivityBrowser::Button_MobileShowGameDetails' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, Button_MobileAccept) == 0x000360, "Member 'UFortActivityBrowser::Button_MobileAccept' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, Button_MobileClose) == 0x000368, "Member 'UFortActivityBrowser::Button_MobileClose' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, Button_JoinAsSpectator) == 0x000370, "Member 'UFortActivityBrowser::Button_JoinAsSpectator' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, Button_ShowSpectateMatchModal) == 0x000378, "Member 'UFortActivityBrowser::Button_ShowSpectateMatchModal' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, TabList_BrowserTabs) == 0x000380, "Member 'UFortActivityBrowser::TabList_BrowserTabs' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, PrimaryContentSetup) == 0x000388, "Member 'UFortActivityBrowser::PrimaryContentSetup' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, TabButtonClass) == 0x000390, "Member 'UFortActivityBrowser::TabButtonClass' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, ActivityDetailsModalClass) == 0x000398, "Member 'UFortActivityBrowser::ActivityDetailsModalClass' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, SoftCustomMatchmakingModalClass) == 0x0003A0, "Member 'UFortActivityBrowser::SoftCustomMatchmakingModalClass' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, SoftSpectateMatchModalClass) == 0x0003C8, "Member 'UFortActivityBrowser::SoftSpectateMatchModalClass' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, Manager) == 0x0003F0, "Member 'UFortActivityBrowser::Manager' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, Surface) == 0x0003F8, "Member 'UFortActivityBrowser::Surface' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, CachedSurfaceActivityProviders) == 0x000400, "Member 'UFortActivityBrowser::CachedSurfaceActivityProviders' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowser, CachedWinterfestActivityProvider) == 0x000518, "Member 'UFortActivityBrowser::CachedWinterfestActivityProvider' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityBrowserListView
// 0x0150 (0x0368 - 0x0218)
class UFortActivityBrowserListView final : public UListViewBase
{
public:
	uint8                                         Pad_218[0xC0];                                     // 0x0218(0x00C0)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectionalNavigationTimeThreshold;                // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortActivityBrowserRow>    PromotedActivityClass;                             // 0x02E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E8[0x80];                                     // 0x02E8(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserListView">();
	}
	static class UFortActivityBrowserListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserListView>();
	}
};
static_assert(alignof(UFortActivityBrowserListView) == 0x000008, "Wrong alignment on UFortActivityBrowserListView");
static_assert(sizeof(UFortActivityBrowserListView) == 0x000368, "Wrong size on UFortActivityBrowserListView");
static_assert(offsetof(UFortActivityBrowserListView, DirectionalNavigationTimeThreshold) == 0x0002D8, "Member 'UFortActivityBrowserListView::DirectionalNavigationTimeThreshold' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserListView, PromotedActivityClass) == 0x0002E0, "Member 'UFortActivityBrowserListView::PromotedActivityClass' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityBrowserRow
// 0x0068 (0x02D8 - 0x0270)
class UFortActivityBrowserRow : public UCommonUserWidget
{
public:
	uint8                                         Pad_270[0x60];                                     // 0x0270(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_CategoryName;                                 // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnCategoryItemChanged(const bool bIsActive, const bool bPlayAnimation);
	void OnRowIsActiveChanged(const bool bIsActive);
	void OnRowMoveDown();
	void OnRowMoveUp();
	void OnRowPeekStateChanged(const bool bIsInPeekState);

	bool GetIsActive() const;
	bool GetIsInPeekState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserRow">();
	}
	static class UFortActivityBrowserRow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserRow>();
	}
};
static_assert(alignof(UFortActivityBrowserRow) == 0x000008, "Wrong alignment on UFortActivityBrowserRow");
static_assert(sizeof(UFortActivityBrowserRow) == 0x0002D8, "Wrong size on UFortActivityBrowserRow");
static_assert(offsetof(UFortActivityBrowserRow, Text_CategoryName) == 0x0002D0, "Member 'UFortActivityBrowserRow::Text_CategoryName' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityBrowserRowList
// 0x0020 (0x02F8 - 0x02D8)
class UFortActivityBrowserRowList final : public UFortActivityBrowserRow
{
public:
	class UFortActivityListView*                  ListView_Activities;                               // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_PageLeft;                                   // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_PageRight;                                  // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F0[0x8];                                      // 0x02F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnQueryStatusChanged(bool bIsActive);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserRowList">();
	}
	static class UFortActivityBrowserRowList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserRowList>();
	}
};
static_assert(alignof(UFortActivityBrowserRowList) == 0x000008, "Wrong alignment on UFortActivityBrowserRowList");
static_assert(sizeof(UFortActivityBrowserRowList) == 0x0002F8, "Wrong size on UFortActivityBrowserRowList");
static_assert(offsetof(UFortActivityBrowserRowList, ListView_Activities) == 0x0002D8, "Member 'UFortActivityBrowserRowList::ListView_Activities' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserRowList, Button_PageLeft) == 0x0002E0, "Member 'UFortActivityBrowserRowList::Button_PageLeft' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserRowList, Button_PageRight) == 0x0002E8, "Member 'UFortActivityBrowserRowList::Button_PageRight' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityBrowserRowPromoted
// 0x0008 (0x02E0 - 0x02D8)
class UFortActivityBrowserRowPromoted final : public UFortActivityBrowserRow
{
public:
	class UCommonTextBlock*                       Text_ActivityName;                                 // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnPreviewImageChanged(const bool bIsLoading, const class UTexture* Texture);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserRowPromoted">();
	}
	static class UFortActivityBrowserRowPromoted* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserRowPromoted>();
	}
};
static_assert(alignof(UFortActivityBrowserRowPromoted) == 0x000008, "Wrong alignment on UFortActivityBrowserRowPromoted");
static_assert(sizeof(UFortActivityBrowserRowPromoted) == 0x0002E0, "Wrong size on UFortActivityBrowserRowPromoted");
static_assert(offsetof(UFortActivityBrowserRowPromoted, Text_ActivityName) == 0x0002D8, "Member 'UFortActivityBrowserRowPromoted::Text_ActivityName' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityBrowserSoloButton
// 0x00C0 (0x0FC0 - 0x0F00)
class UFortActivityBrowserSoloButton final : public UCommonButtonLegacy
{
public:
	class FText                                   DefaultText;                                       // 0x0EF8(0x0018)(Edit, NativeAccessSpecifierPrivate)
	bool                                          bUseAllCaps;                                       // 0x0F10(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bOverrideFont;                                     // 0x0F11(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F12[0x6];                                      // 0x0F12(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Font;                                              // 0x0F18(0x0058)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSlateColor                            FontColor;                                         // 0x0F70(0x0014)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F84[0x4];                                      // 0x0F84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_Content;                                      // 0x0F88(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinWidthOverride;                                  // 0x0F90(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinHeightOverride;                                 // 0x0F94(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMargin                                TextPaddingOverride;                               // 0x0F98(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	int32                                         FontSizeOverride;                                  // 0x0FA8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_FAC[0x4];                                      // 0x0FAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MaterialOverride;                                  // 0x0FB0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_FB8[0x8];                                      // 0x0FB8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserSoloButton">();
	}
	static class UFortActivityBrowserSoloButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserSoloButton>();
	}
};
static_assert(alignof(UFortActivityBrowserSoloButton) == 0x000010, "Wrong alignment on UFortActivityBrowserSoloButton");
static_assert(sizeof(UFortActivityBrowserSoloButton) == 0x000FC0, "Wrong size on UFortActivityBrowserSoloButton");
static_assert(offsetof(UFortActivityBrowserSoloButton, DefaultText) == 0x000EF8, "Member 'UFortActivityBrowserSoloButton::DefaultText' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserSoloButton, bUseAllCaps) == 0x000F10, "Member 'UFortActivityBrowserSoloButton::bUseAllCaps' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserSoloButton, bOverrideFont) == 0x000F11, "Member 'UFortActivityBrowserSoloButton::bOverrideFont' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserSoloButton, Font) == 0x000F18, "Member 'UFortActivityBrowserSoloButton::Font' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserSoloButton, FontColor) == 0x000F70, "Member 'UFortActivityBrowserSoloButton::FontColor' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserSoloButton, Text_Content) == 0x000F88, "Member 'UFortActivityBrowserSoloButton::Text_Content' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserSoloButton, MinWidthOverride) == 0x000F90, "Member 'UFortActivityBrowserSoloButton::MinWidthOverride' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserSoloButton, MinHeightOverride) == 0x000F94, "Member 'UFortActivityBrowserSoloButton::MinHeightOverride' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserSoloButton, TextPaddingOverride) == 0x000F98, "Member 'UFortActivityBrowserSoloButton::TextPaddingOverride' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserSoloButton, FontSizeOverride) == 0x000FA8, "Member 'UFortActivityBrowserSoloButton::FontSizeOverride' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserSoloButton, MaterialOverride) == 0x000FB0, "Member 'UFortActivityBrowserSoloButton::MaterialOverride' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityBrowserTag
// 0x0010 (0x0258 - 0x0248)
class UFortActivityBrowserTag final : public UUserWidget
{
public:
	class UCommonTextBlock*                       Text_TagDescription;                               // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_250[0x8];                                      // 0x0250(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTagUpdated();

	EFortActivityBrowserTagType GetTagType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserTag">();
	}
	static class UFortActivityBrowserTag* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserTag>();
	}
};
static_assert(alignof(UFortActivityBrowserTag) == 0x000008, "Wrong alignment on UFortActivityBrowserTag");
static_assert(sizeof(UFortActivityBrowserTag) == 0x000258, "Wrong size on UFortActivityBrowserTag");
static_assert(offsetof(UFortActivityBrowserTag, Text_TagDescription) == 0x000248, "Member 'UFortActivityBrowserTag::Text_TagDescription' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityBrowserTile
// 0x00C8 (0x0338 - 0x0270)
class UFortActivityBrowserTile final : public UCommonUserWidget
{
public:
	uint8                                         Pad_270[0x8];                                      // 0x0270(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortActivityTileDetailsDisplay*        Display_TileDetails;                               // 0x0278(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_280[0xB8];                                     // 0x0280(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleActivitySelected();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserTile">();
	}
	static class UFortActivityBrowserTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserTile>();
	}
};
static_assert(alignof(UFortActivityBrowserTile) == 0x000008, "Wrong alignment on UFortActivityBrowserTile");
static_assert(sizeof(UFortActivityBrowserTile) == 0x000338, "Wrong size on UFortActivityBrowserTile");
static_assert(offsetof(UFortActivityBrowserTile, Display_TileDetails) == 0x000278, "Member 'UFortActivityBrowserTile::Display_TileDetails' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityView
// 0x00D8 (0x0408 - 0x0330)
class UFortActivityView : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShowCustomMatchmakingModalButton;                 // 0x0338(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShowSpectateMatchModalButton;                     // 0x0339(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShowMobileGameDetailsButton;                      // 0x033A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShowMobileAcceptButton;                           // 0x033B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShowBackToTopButton;                              // 0x033C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_33D[0xCB];                                     // 0x033D(0x00CB)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnLocalPlayerDemoted();
	void BP_OnLocalPlayerPromotedToLeader();
	void BP_OnPartySizeChanged(const int32 PartySize);
	void OnSurfaceDataDirty();

	EFortInvalidActivityReason GetInvalidActivityReason() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityView">();
	}
	static class UFortActivityView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityView>();
	}
};
static_assert(alignof(UFortActivityView) == 0x000008, "Wrong alignment on UFortActivityView");
static_assert(sizeof(UFortActivityView) == 0x000408, "Wrong size on UFortActivityView");
static_assert(offsetof(UFortActivityView, bShowCustomMatchmakingModalButton) == 0x000338, "Member 'UFortActivityView::bShowCustomMatchmakingModalButton' has a wrong offset!");
static_assert(offsetof(UFortActivityView, bShowSpectateMatchModalButton) == 0x000339, "Member 'UFortActivityView::bShowSpectateMatchModalButton' has a wrong offset!");
static_assert(offsetof(UFortActivityView, bShowMobileGameDetailsButton) == 0x00033A, "Member 'UFortActivityView::bShowMobileGameDetailsButton' has a wrong offset!");
static_assert(offsetof(UFortActivityView, bShowMobileAcceptButton) == 0x00033B, "Member 'UFortActivityView::bShowMobileAcceptButton' has a wrong offset!");
static_assert(offsetof(UFortActivityView, bShowBackToTopButton) == 0x00033C, "Member 'UFortActivityView::bShowBackToTopButton' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityBrowserView
// 0x0128 (0x0530 - 0x0408)
#pragma pack(push, 0x1)
class alignas(0x10) UFortActivityBrowserView : public UFortActivityView
{
public:
	uint8                                         Pad_408[0x8];                                      // 0x0408(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MouseWheelScrollTimeThreshold;                     // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_414[0x4];                                      // 0x0414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortActivityBrowserListView*           BrowserList_Activities;                            // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_420[0x10];                                     // 0x0420(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TabNameID;                                         // 0x0430(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_438[0x8];                                      // 0x0438(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortTabButtonLabelInfo                TabButtonLabelInfo;                                // 0x0440(0x00D0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UFortSwipePanel*                        SwipePanel_Navigation;                             // 0x0510(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_518[0x10];                                     // 0x0518(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActivityUpdated();
	void OnQueryActivitiesFinished();
	void OnRowChanged(const int32 NewCategoryIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserView">();
	}
	static class UFortActivityBrowserView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserView>();
	}
};
#pragma pack(pop)
static_assert(alignof(UFortActivityBrowserView) == 0x000010, "Wrong alignment on UFortActivityBrowserView");
static_assert(sizeof(UFortActivityBrowserView) == 0x000530, "Wrong size on UFortActivityBrowserView");
static_assert(offsetof(UFortActivityBrowserView, MouseWheelScrollTimeThreshold) == 0x000410, "Member 'UFortActivityBrowserView::MouseWheelScrollTimeThreshold' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserView, BrowserList_Activities) == 0x000418, "Member 'UFortActivityBrowserView::BrowserList_Activities' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserView, TabNameID) == 0x000430, "Member 'UFortActivityBrowserView::TabNameID' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserView, TabButtonLabelInfo) == 0x000440, "Member 'UFortActivityBrowserView::TabButtonLabelInfo' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserView, SwipePanel_Navigation) == 0x000510, "Member 'UFortActivityBrowserView::SwipePanel_Navigation' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityCreateView
// 0x0108 (0x0510 - 0x0408)
class UFortActivityCreateView final : public UFortActivityView
{
public:
	uint8                                         Pad_408[0x8];                                      // 0x0408(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TabNameID;                                         // 0x0410(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_418[0x8];                                      // 0x0418(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortTabButtonLabelInfo                TabButtonLabelInfo;                                // 0x0420(0x00D0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_Create;                                     // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4F8[0x18];                                     // 0x04F8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	EFortInvalidActivityReason GetInvalidCreativeActivityReason() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityCreateView">();
	}
	static class UFortActivityCreateView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityCreateView>();
	}
};
static_assert(alignof(UFortActivityCreateView) == 0x000010, "Wrong alignment on UFortActivityCreateView");
static_assert(sizeof(UFortActivityCreateView) == 0x000510, "Wrong size on UFortActivityCreateView");
static_assert(offsetof(UFortActivityCreateView, TabNameID) == 0x000410, "Member 'UFortActivityCreateView::TabNameID' has a wrong offset!");
static_assert(offsetof(UFortActivityCreateView, TabButtonLabelInfo) == 0x000420, "Member 'UFortActivityCreateView::TabButtonLabelInfo' has a wrong offset!");
static_assert(offsetof(UFortActivityCreateView, Button_Create) == 0x0004F0, "Member 'UFortActivityCreateView::Button_Create' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityDetailsDisplay
// 0x00D8 (0x0348 - 0x0270)
class UFortActivityDetailsDisplay final : public UCommonUserWidget
{
public:
	uint8                                         Pad_270[0x68];                                     // 0x0270(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         XpTagMnemonicWhitelist;                            // 0x02D8(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	float                                         IntroDelay;                                        // 0x02E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DetailsScrollStartDelay;                           // 0x02EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DetailsScrollSpeed;                                // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DetailsScrollEndDelay;                             // 0x02F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonRichTextBlock*                   Text_ActivityOrigin;                               // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_ActivityName;                                 // 0x0300(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_ActivityDescription;                          // 0x0308(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UScrollBox*                             ScrollBox_ActivityDescription;                     // 0x0310(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDynamicEntryBox*                       EntryBox_ActivityTags;                             // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       DetailsIntro;                                      // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       DetailsOutro;                                      // 0x0328(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_Accept;                                     // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_Details;                                    // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_Favorite;                                   // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class FText GetCreatorTextFormat(const class FText& CreatorName);
	void OnDescriptionScrollRestarted();
	void OnDetailsUpdated(const bool bIsDetailsValid);
	void OnIsFavoriteChanged(const bool bIsFavorite, const bool bPlayAnimation);
	void OnLocalPlayerDemoted();
	void OnLocalPlayerPromotedToLeader();
	void OnOutroAnimationFinished();
	void OnParentActivated();
	void OnPartySizeChanged(const int32 PartySize);
	void ResetWidgetState();

	TArray<class FString> GetContentWarningStrings() const;
	EFortInvalidActivityReason GetInvalidActivityReason() const;
	bool IsActivityEpicOriginal() const;
	bool IsDisplayingCategory() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityDetailsDisplay">();
	}
	static class UFortActivityDetailsDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityDetailsDisplay>();
	}
};
static_assert(alignof(UFortActivityDetailsDisplay) == 0x000008, "Wrong alignment on UFortActivityDetailsDisplay");
static_assert(sizeof(UFortActivityDetailsDisplay) == 0x000348, "Wrong size on UFortActivityDetailsDisplay");
static_assert(offsetof(UFortActivityDetailsDisplay, XpTagMnemonicWhitelist) == 0x0002D8, "Member 'UFortActivityDetailsDisplay::XpTagMnemonicWhitelist' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsDisplay, IntroDelay) == 0x0002E8, "Member 'UFortActivityDetailsDisplay::IntroDelay' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsDisplay, DetailsScrollStartDelay) == 0x0002EC, "Member 'UFortActivityDetailsDisplay::DetailsScrollStartDelay' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsDisplay, DetailsScrollSpeed) == 0x0002F0, "Member 'UFortActivityDetailsDisplay::DetailsScrollSpeed' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsDisplay, DetailsScrollEndDelay) == 0x0002F4, "Member 'UFortActivityDetailsDisplay::DetailsScrollEndDelay' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsDisplay, Text_ActivityOrigin) == 0x0002F8, "Member 'UFortActivityDetailsDisplay::Text_ActivityOrigin' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsDisplay, Text_ActivityName) == 0x000300, "Member 'UFortActivityDetailsDisplay::Text_ActivityName' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsDisplay, Text_ActivityDescription) == 0x000308, "Member 'UFortActivityDetailsDisplay::Text_ActivityDescription' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsDisplay, ScrollBox_ActivityDescription) == 0x000310, "Member 'UFortActivityDetailsDisplay::ScrollBox_ActivityDescription' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsDisplay, EntryBox_ActivityTags) == 0x000318, "Member 'UFortActivityDetailsDisplay::EntryBox_ActivityTags' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsDisplay, DetailsIntro) == 0x000320, "Member 'UFortActivityDetailsDisplay::DetailsIntro' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsDisplay, DetailsOutro) == 0x000328, "Member 'UFortActivityDetailsDisplay::DetailsOutro' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsDisplay, Button_Accept) == 0x000330, "Member 'UFortActivityDetailsDisplay::Button_Accept' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsDisplay, Button_Details) == 0x000338, "Member 'UFortActivityDetailsDisplay::Button_Details' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsDisplay, Button_Favorite) == 0x000340, "Member 'UFortActivityDetailsDisplay::Button_Favorite' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityDetailsModal
// 0x0058 (0x0460 - 0x0408)
class UFortActivityDetailsModal final : public UFortActivityView
{
public:
	class UCommonTextBlock*                       Text_LinkCode;                                     // 0x0408(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_LinkCodeVersion;                              // 0x0410(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityDetailsDisplay*            DetailsDisplay_SelectedActivity;                   // 0x0418(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_MobileClose;                                // 0x0420(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_Back;                                       // 0x0428(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_BackBoard;                                  // 0x0430(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_Favorite;                                   // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_440[0x20];                                     // 0x0440(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnIsFavoriteChanged(const bool bIsFavorite);
	void OnPreviewImageChanged(const bool bIsLoading, const class UTexture* Texture);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityDetailsModal">();
	}
	static class UFortActivityDetailsModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityDetailsModal>();
	}
};
static_assert(alignof(UFortActivityDetailsModal) == 0x000008, "Wrong alignment on UFortActivityDetailsModal");
static_assert(sizeof(UFortActivityDetailsModal) == 0x000460, "Wrong size on UFortActivityDetailsModal");
static_assert(offsetof(UFortActivityDetailsModal, Text_LinkCode) == 0x000408, "Member 'UFortActivityDetailsModal::Text_LinkCode' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsModal, Text_LinkCodeVersion) == 0x000410, "Member 'UFortActivityDetailsModal::Text_LinkCodeVersion' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsModal, DetailsDisplay_SelectedActivity) == 0x000418, "Member 'UFortActivityDetailsModal::DetailsDisplay_SelectedActivity' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsModal, Button_MobileClose) == 0x000420, "Member 'UFortActivityDetailsModal::Button_MobileClose' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsModal, Button_Back) == 0x000428, "Member 'UFortActivityDetailsModal::Button_Back' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsModal, Button_BackBoard) == 0x000430, "Member 'UFortActivityDetailsModal::Button_BackBoard' has a wrong offset!");
static_assert(offsetof(UFortActivityDetailsModal, Button_Favorite) == 0x000438, "Member 'UFortActivityDetailsModal::Button_Favorite' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityDiscoverView
// 0x00A0 (0x05D0 - 0x0530)
class UFortActivityDiscoverView final : public UFortActivityBrowserView
{
public:
	TArray<ECommonPlatformType>                   PlatformMovieBlacklist;                            // 0x0528(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ActivityMovieBlacklist;                            // 0x0538(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	bool                                          bPlayDetailsAnimationOnScreenOpen;                 // 0x0548(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_549[0x7];                                      // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortActivatableMovieWidget> MovieWidgetClass;                                  // 0x0550(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityDetailsDisplay*            DetailsDisplay_SelectedActivity;                   // 0x0558(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityDetailsDisplay*            DetailsDisplay_PromotedActivity;                   // 0x0560(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPanelWidget*                           Panel_VideoSlot;                                   // 0x0568(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPanelWidget*                           Panel_PromotedVideoSlot;                           // 0x0570(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivatableMovieWidget*            ActivityMovieWidget;                               // 0x0578(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivatableMovieWidget*            PromotedActivityMovieWidget;                       // 0x0580(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_588[0x48];                                     // 0x0588(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleMovieWidgetMediaStarted();
	void OnMoviePlayingChanged(const bool bIsPlaying);
	void OnPreviewImageChanged(const bool bIsLoading, const class UTexture* Texture);

	bool IsShowingPromotedContent() const;
	bool IsShowingSeasonalContent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityDiscoverView">();
	}
	static class UFortActivityDiscoverView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityDiscoverView>();
	}
};
static_assert(alignof(UFortActivityDiscoverView) == 0x000010, "Wrong alignment on UFortActivityDiscoverView");
static_assert(sizeof(UFortActivityDiscoverView) == 0x0005D0, "Wrong size on UFortActivityDiscoverView");
static_assert(offsetof(UFortActivityDiscoverView, PlatformMovieBlacklist) == 0x000528, "Member 'UFortActivityDiscoverView::PlatformMovieBlacklist' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, ActivityMovieBlacklist) == 0x000538, "Member 'UFortActivityDiscoverView::ActivityMovieBlacklist' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, bPlayDetailsAnimationOnScreenOpen) == 0x000548, "Member 'UFortActivityDiscoverView::bPlayDetailsAnimationOnScreenOpen' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, MovieWidgetClass) == 0x000550, "Member 'UFortActivityDiscoverView::MovieWidgetClass' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, DetailsDisplay_SelectedActivity) == 0x000558, "Member 'UFortActivityDiscoverView::DetailsDisplay_SelectedActivity' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, DetailsDisplay_PromotedActivity) == 0x000560, "Member 'UFortActivityDiscoverView::DetailsDisplay_PromotedActivity' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, Panel_VideoSlot) == 0x000568, "Member 'UFortActivityDiscoverView::Panel_VideoSlot' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, Panel_PromotedVideoSlot) == 0x000570, "Member 'UFortActivityDiscoverView::Panel_PromotedVideoSlot' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, ActivityMovieWidget) == 0x000578, "Member 'UFortActivityDiscoverView::ActivityMovieWidget' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, PromotedActivityMovieWidget) == 0x000580, "Member 'UFortActivityDiscoverView::PromotedActivityMovieWidget' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityPlayerBrowserView
// 0x0128 (0x0530 - 0x0408)
class UFortActivityPlayerBrowserView : public UFortActivityView
{
public:
	uint8                                         Pad_408[0x8];                                      // 0x0408(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGameActivityProvider*              ActivityProvider;                                  // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TabNameID;                                         // 0x0418(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFortTabButtonLabelInfo                TabButtonLabelInfo;                                // 0x0420(0x00D0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	EFortCreativeDiscoveryPlayHistoryType         PlayHistoryProviderType;                           // 0x04F0(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4F1[0x7];                                      // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortGameActivityProvider>  ActivityProviderClass;                             // 0x04F8(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityTileView*                  TileView_PlayerActivities;                         // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_508[0x28];                                     // 0x0508(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnTileViewUpdated();
	void OnPlayViewIntro();
	void PlayViewIntro();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityPlayerBrowserView">();
	}
	static class UFortActivityPlayerBrowserView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityPlayerBrowserView>();
	}
};
static_assert(alignof(UFortActivityPlayerBrowserView) == 0x000010, "Wrong alignment on UFortActivityPlayerBrowserView");
static_assert(sizeof(UFortActivityPlayerBrowserView) == 0x000530, "Wrong size on UFortActivityPlayerBrowserView");
static_assert(offsetof(UFortActivityPlayerBrowserView, ActivityProvider) == 0x000410, "Member 'UFortActivityPlayerBrowserView::ActivityProvider' has a wrong offset!");
static_assert(offsetof(UFortActivityPlayerBrowserView, TabNameID) == 0x000418, "Member 'UFortActivityPlayerBrowserView::TabNameID' has a wrong offset!");
static_assert(offsetof(UFortActivityPlayerBrowserView, TabButtonLabelInfo) == 0x000420, "Member 'UFortActivityPlayerBrowserView::TabButtonLabelInfo' has a wrong offset!");
static_assert(offsetof(UFortActivityPlayerBrowserView, PlayHistoryProviderType) == 0x0004F0, "Member 'UFortActivityPlayerBrowserView::PlayHistoryProviderType' has a wrong offset!");
static_assert(offsetof(UFortActivityPlayerBrowserView, ActivityProviderClass) == 0x0004F8, "Member 'UFortActivityPlayerBrowserView::ActivityProviderClass' has a wrong offset!");
static_assert(offsetof(UFortActivityPlayerBrowserView, TileView_PlayerActivities) == 0x000500, "Member 'UFortActivityPlayerBrowserView::TileView_PlayerActivities' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityFavoriteBrowserView
// 0x0050 (0x0580 - 0x0530)
class UFortActivityFavoriteBrowserView final : public UFortActivityPlayerBrowserView
{
public:
	uint8                                         Pad_530[0x50];                                     // 0x0530(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityFavoriteBrowserView">();
	}
	static class UFortActivityFavoriteBrowserView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityFavoriteBrowserView>();
	}
};
static_assert(alignof(UFortActivityFavoriteBrowserView) == 0x000010, "Wrong alignment on UFortActivityFavoriteBrowserView");
static_assert(sizeof(UFortActivityFavoriteBrowserView) == 0x000580, "Wrong size on UFortActivityFavoriteBrowserView");

// Class DiscoveryBrowserUI.FortActivityListItemWrapper
// 0x0010 (0x0038 - 0x0028)
class UFortActivityListItemWrapper final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityListItemWrapper">();
	}
	static class UFortActivityListItemWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityListItemWrapper>();
	}
};
static_assert(alignof(UFortActivityListItemWrapper) == 0x000008, "Wrong alignment on UFortActivityListItemWrapper");
static_assert(sizeof(UFortActivityListItemWrapper) == 0x000038, "Wrong size on UFortActivityListItemWrapper");

// Class DiscoveryBrowserUI.FortActivityListView
// 0x00F0 (0x0308 - 0x0218)
class UFortActivityListView final : public UListViewBase
{
public:
	uint8                                         Pad_218[0xC0];                                     // 0x0218(0x00C0)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectionalNavigationTimeThreshold;                // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrientation                                  Orientation;                                       // 0x02DC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EntrySpacing;                                      // 0x02E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E4[0x24];                                     // 0x02E4(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetInViewCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityListView">();
	}
	static class UFortActivityListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityListView>();
	}
};
static_assert(alignof(UFortActivityListView) == 0x000008, "Wrong alignment on UFortActivityListView");
static_assert(sizeof(UFortActivityListView) == 0x000308, "Wrong size on UFortActivityListView");
static_assert(offsetof(UFortActivityListView, DirectionalNavigationTimeThreshold) == 0x0002D8, "Member 'UFortActivityListView::DirectionalNavigationTimeThreshold' has a wrong offset!");
static_assert(offsetof(UFortActivityListView, Orientation) == 0x0002DC, "Member 'UFortActivityListView::Orientation' has a wrong offset!");
static_assert(offsetof(UFortActivityListView, EntrySpacing) == 0x0002E0, "Member 'UFortActivityListView::EntrySpacing' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityLobbyTile
// 0x0040 (0x0F40 - 0x0F00)
class UFortActivityLobbyTile : public UCommonButtonLegacy
{
public:
	class UCommonTextBlock*                       Text_ActivityName;                                 // 0x0EF8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityBrowserTag*                ActivityBrowserTag_EpicOriginal;                   // 0x0F00(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortGameActivityProvider*              ActivityProvider;                                  // 0x0F08(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UFortGameActivity*>              CachedQueriedActivities;                           // 0x0F10(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F20[0x20];                                     // 0x0F20(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDetailsUpdated();
	void OnPreviewImageChanged(const bool bIsLoading, const class UTexture* Texture);

	bool IsActivityEpicCreated() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityLobbyTile">();
	}
	static class UFortActivityLobbyTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityLobbyTile>();
	}
};
static_assert(alignof(UFortActivityLobbyTile) == 0x000010, "Wrong alignment on UFortActivityLobbyTile");
static_assert(sizeof(UFortActivityLobbyTile) == 0x000F40, "Wrong size on UFortActivityLobbyTile");
static_assert(offsetof(UFortActivityLobbyTile, Text_ActivityName) == 0x000EF8, "Member 'UFortActivityLobbyTile::Text_ActivityName' has a wrong offset!");
static_assert(offsetof(UFortActivityLobbyTile, ActivityBrowserTag_EpicOriginal) == 0x000F00, "Member 'UFortActivityLobbyTile::ActivityBrowserTag_EpicOriginal' has a wrong offset!");
static_assert(offsetof(UFortActivityLobbyTile, ActivityProvider) == 0x000F08, "Member 'UFortActivityLobbyTile::ActivityProvider' has a wrong offset!");
static_assert(offsetof(UFortActivityLobbyTile, CachedQueriedActivities) == 0x000F10, "Member 'UFortActivityLobbyTile::CachedQueriedActivities' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityPlayerBrowserTile
// 0x00D0 (0x0340 - 0x0270)
class UFortActivityPlayerBrowserTile final : public UCommonUserWidget
{
public:
	uint8                                         Pad_270[0x8];                                      // 0x0270(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortActivityTileDetailsDisplay*        Display_TileDetails;                               // 0x0278(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_LastPlayedDate;                               // 0x0280(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_288[0xB8];                                     // 0x0288(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleActivitySelected();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityPlayerBrowserTile">();
	}
	static class UFortActivityPlayerBrowserTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityPlayerBrowserTile>();
	}
};
static_assert(alignof(UFortActivityPlayerBrowserTile) == 0x000008, "Wrong alignment on UFortActivityPlayerBrowserTile");
static_assert(sizeof(UFortActivityPlayerBrowserTile) == 0x000340, "Wrong size on UFortActivityPlayerBrowserTile");
static_assert(offsetof(UFortActivityPlayerBrowserTile, Display_TileDetails) == 0x000278, "Member 'UFortActivityPlayerBrowserTile::Display_TileDetails' has a wrong offset!");
static_assert(offsetof(UFortActivityPlayerBrowserTile, Text_LastPlayedDate) == 0x000280, "Member 'UFortActivityPlayerBrowserTile::Text_LastPlayedDate' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityPlayerView
// 0x0128 (0x0530 - 0x0408)
class UFortActivityPlayerView final : public UFortActivityView
{
public:
	uint8                                         Pad_408[0x8];                                      // 0x0408(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TabNameID;                                         // 0x0410(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_418[0x8];                                      // 0x0418(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortTabButtonLabelInfo                TabButtonLabelInfo;                                // 0x0420(0x00D0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSubclassOf<class UCommonButtonBase>          TabButtonClass;                                    // 0x04F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortTabListWidgetBase*                 TabList_PlayerViewTabs;                            // 0x04F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonActivatableWidgetSwitcher*       Switcher_PlayerBrowserViews;                       // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityPlayerBrowserView*         BrowserView_Favorites;                             // 0x0508(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityPlayerBrowserView*         BrowserView_History;                               // 0x0510(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_518[0x18];                                     // 0x0518(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityPlayerView">();
	}
	static class UFortActivityPlayerView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityPlayerView>();
	}
};
static_assert(alignof(UFortActivityPlayerView) == 0x000010, "Wrong alignment on UFortActivityPlayerView");
static_assert(sizeof(UFortActivityPlayerView) == 0x000530, "Wrong size on UFortActivityPlayerView");
static_assert(offsetof(UFortActivityPlayerView, TabNameID) == 0x000410, "Member 'UFortActivityPlayerView::TabNameID' has a wrong offset!");
static_assert(offsetof(UFortActivityPlayerView, TabButtonLabelInfo) == 0x000420, "Member 'UFortActivityPlayerView::TabButtonLabelInfo' has a wrong offset!");
static_assert(offsetof(UFortActivityPlayerView, TabButtonClass) == 0x0004F0, "Member 'UFortActivityPlayerView::TabButtonClass' has a wrong offset!");
static_assert(offsetof(UFortActivityPlayerView, TabList_PlayerViewTabs) == 0x0004F8, "Member 'UFortActivityPlayerView::TabList_PlayerViewTabs' has a wrong offset!");
static_assert(offsetof(UFortActivityPlayerView, Switcher_PlayerBrowserViews) == 0x000500, "Member 'UFortActivityPlayerView::Switcher_PlayerBrowserViews' has a wrong offset!");
static_assert(offsetof(UFortActivityPlayerView, BrowserView_Favorites) == 0x000508, "Member 'UFortActivityPlayerView::BrowserView_Favorites' has a wrong offset!");
static_assert(offsetof(UFortActivityPlayerView, BrowserView_History) == 0x000510, "Member 'UFortActivityPlayerView::BrowserView_History' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityPlayerViewTabButton
// 0x0000 (0x0ED0 - 0x0ED0)
class UFortActivityPlayerViewTabButton final : public UFortTabButton
{
public:
	class UCommonTextBlock*                       Text_Count;                                        // 0x0EC8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityPlayerViewTabButton">();
	}
	static class UFortActivityPlayerViewTabButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityPlayerViewTabButton>();
	}
};
static_assert(alignof(UFortActivityPlayerViewTabButton) == 0x000010, "Wrong alignment on UFortActivityPlayerViewTabButton");
static_assert(sizeof(UFortActivityPlayerViewTabButton) == 0x000ED0, "Wrong size on UFortActivityPlayerViewTabButton");
static_assert(offsetof(UFortActivityPlayerViewTabButton, Text_Count) == 0x000EC8, "Member 'UFortActivityPlayerViewTabButton::Text_Count' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityScaleFontList
// 0x0010 (0x0038 - 0x0028)
class UFortActivityScaleFontList final : public UObject
{
public:
	TArray<struct FFortActivityScaleFontData>     ScaleData;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityScaleFontList">();
	}
	static class UFortActivityScaleFontList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityScaleFontList>();
	}
};
static_assert(alignof(UFortActivityScaleFontList) == 0x000008, "Wrong alignment on UFortActivityScaleFontList");
static_assert(sizeof(UFortActivityScaleFontList) == 0x000038, "Wrong size on UFortActivityScaleFontList");
static_assert(offsetof(UFortActivityScaleFontList, ScaleData) == 0x000028, "Member 'UFortActivityScaleFontList::ScaleData' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityScalingTextBlock
// 0x0010 (0x0300 - 0x02F0)
class UFortActivityScalingTextBlock final : public UCommonTextBlock
{
public:
	TSubclassOf<class UFortActivityScaleFontList> Scaling;                                           // 0x02F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F8[0x8];                                      // 0x02F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityScalingTextBlock">();
	}
	static class UFortActivityScalingTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityScalingTextBlock>();
	}
};
static_assert(alignof(UFortActivityScalingTextBlock) == 0x000010, "Wrong alignment on UFortActivityScalingTextBlock");
static_assert(sizeof(UFortActivityScalingTextBlock) == 0x000300, "Wrong size on UFortActivityScalingTextBlock");
static_assert(offsetof(UFortActivityScalingTextBlock, Scaling) == 0x0002F0, "Member 'UFortActivityScalingTextBlock::Scaling' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivitySearchView
// 0x0138 (0x0540 - 0x0408)
class UFortActivitySearchView final : public UFortActivityView
{
public:
	uint8                                         Pad_408[0x8];                                      // 0x0408(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TabNameID;                                         // 0x0410(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_418[0x8];                                      // 0x0418(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortTabButtonLabelInfo                TabButtonLabelInfo;                                // 0x0420(0x00D0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UEditableText*                          EditableText_IslandLink;                           // 0x04F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4F8[0x48];                                     // 0x04F8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleTextChanged(const class FText& Text);
	void HandleTextCommitted(const class FText& InText, ETextCommit CommitInfo);
	void OnActivityClear();
	void OnActivityValidated(const EFortActivityValidationResult ValidateResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivitySearchView">();
	}
	static class UFortActivitySearchView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivitySearchView>();
	}
};
static_assert(alignof(UFortActivitySearchView) == 0x000010, "Wrong alignment on UFortActivitySearchView");
static_assert(sizeof(UFortActivitySearchView) == 0x000540, "Wrong size on UFortActivitySearchView");
static_assert(offsetof(UFortActivitySearchView, TabNameID) == 0x000410, "Member 'UFortActivitySearchView::TabNameID' has a wrong offset!");
static_assert(offsetof(UFortActivitySearchView, TabButtonLabelInfo) == 0x000420, "Member 'UFortActivitySearchView::TabButtonLabelInfo' has a wrong offset!");
static_assert(offsetof(UFortActivitySearchView, EditableText_IslandLink) == 0x0004F0, "Member 'UFortActivitySearchView::EditableText_IslandLink' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivitySeasonalBrowserView
// 0x0000 (0x0530 - 0x0530)
class UFortActivitySeasonalBrowserView final : public UFortActivityPlayerBrowserView
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivitySeasonalBrowserView">();
	}
	static class UFortActivitySeasonalBrowserView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivitySeasonalBrowserView>();
	}
};
static_assert(alignof(UFortActivitySeasonalBrowserView) == 0x000010, "Wrong alignment on UFortActivitySeasonalBrowserView");
static_assert(sizeof(UFortActivitySeasonalBrowserView) == 0x000530, "Wrong size on UFortActivitySeasonalBrowserView");

// Class DiscoveryBrowserUI.FortActivityTileDetailsDisplay
// 0x00B0 (0x0F60 - 0x0EB0)
class UFortActivityTileDetailsDisplay final : public UCommonButtonBase
{
public:
	TMulticastInlineDelegate<void()>              OnActivitySelectedDelegate;                        // 0x0EA8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnActivityUnSelectedDelegate;                      // 0x0EB8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	bool                                          bShowDetailsButton;                                // 0x0EC8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EC9[0x7];                                      // 0x0EC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_ActivityName;                                 // 0x0ED0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_PlayerCount;                                  // 0x0ED8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_Favorite;                                   // 0x0EE0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_Details;                                    // 0x0EE8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityBrowserTag*                ActivityBrowserTag_EpicOriginal;                   // 0x0EF0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EF8[0x68];                                     // 0x0EF8(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDetailsUpdated();
	void OnIsFavoriteChanged(const bool bIsFavorite);
	void OnLocalPlayerDemoted();
	void OnLocalPlayerPromotedToLeader();
	void OnPartySizeChanged(const int32 PartySize);
	void OnPreviewImageChanged(const bool bIsLoading, const class UTexture* Texture);
	void OnSocialUsersPlayingChanged(int32 NumPlaying);
	void OnTileActiveSet(const bool bIsTileActive);

	EFortInvalidActivityReason GetInvalidActivityReason() const;
	bool IsActivityEpicCreated() const;
	bool IsActivityFavorited() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityTileDetailsDisplay">();
	}
	static class UFortActivityTileDetailsDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityTileDetailsDisplay>();
	}
};
static_assert(alignof(UFortActivityTileDetailsDisplay) == 0x000010, "Wrong alignment on UFortActivityTileDetailsDisplay");
static_assert(sizeof(UFortActivityTileDetailsDisplay) == 0x000F60, "Wrong size on UFortActivityTileDetailsDisplay");
static_assert(offsetof(UFortActivityTileDetailsDisplay, OnActivitySelectedDelegate) == 0x000EA8, "Member 'UFortActivityTileDetailsDisplay::OnActivitySelectedDelegate' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, OnActivityUnSelectedDelegate) == 0x000EB8, "Member 'UFortActivityTileDetailsDisplay::OnActivityUnSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, bShowDetailsButton) == 0x000EC8, "Member 'UFortActivityTileDetailsDisplay::bShowDetailsButton' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, Text_ActivityName) == 0x000ED0, "Member 'UFortActivityTileDetailsDisplay::Text_ActivityName' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, Text_PlayerCount) == 0x000ED8, "Member 'UFortActivityTileDetailsDisplay::Text_PlayerCount' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, Button_Favorite) == 0x000EE0, "Member 'UFortActivityTileDetailsDisplay::Button_Favorite' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, Button_Details) == 0x000EE8, "Member 'UFortActivityTileDetailsDisplay::Button_Details' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, ActivityBrowserTag_EpicOriginal) == 0x000EF0, "Member 'UFortActivityTileDetailsDisplay::ActivityBrowserTag_EpicOriginal' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityTileView
// 0x0000 (0x0AA0 - 0x0AA0)
class UFortActivityTileView final : public UTileView
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityTileView">();
	}
	static class UFortActivityTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityTileView>();
	}
};
static_assert(alignof(UFortActivityTileView) == 0x000010, "Wrong alignment on UFortActivityTileView");
static_assert(sizeof(UFortActivityTileView) == 0x000AA0, "Wrong size on UFortActivityTileView");

// Class DiscoveryBrowserUI.OverrideMatchmakingUIComponent
// 0x0050 (0x0100 - 0x00B0)
class UOverrideMatchmakingUIComponent : public UActorComponent
{
public:
	struct FMatchmakingUIOverride                 MatchmakingUIOverride;                             // 0x00B0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OverrideMatchmakingUIComponent">();
	}
	static class UOverrideMatchmakingUIComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOverrideMatchmakingUIComponent>();
	}
};
static_assert(alignof(UOverrideMatchmakingUIComponent) == 0x000008, "Wrong alignment on UOverrideMatchmakingUIComponent");
static_assert(sizeof(UOverrideMatchmakingUIComponent) == 0x000100, "Wrong size on UOverrideMatchmakingUIComponent");
static_assert(offsetof(UOverrideMatchmakingUIComponent, MatchmakingUIOverride) == 0x0000B0, "Member 'UOverrideMatchmakingUIComponent::MatchmakingUIOverride' has a wrong offset!");

}

