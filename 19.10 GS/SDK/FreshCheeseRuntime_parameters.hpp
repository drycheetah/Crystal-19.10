#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FreshCheeseRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function FreshCheeseRuntime.FriendChestSpawner.LogSpawnerMessage
// 0x0010 (0x0010 - 0x0000)
struct FriendChestSpawner_LogSpawnerMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendChestSpawner_LogSpawnerMessage) == 0x000008, "Wrong alignment on FriendChestSpawner_LogSpawnerMessage");
static_assert(sizeof(FriendChestSpawner_LogSpawnerMessage) == 0x000010, "Wrong size on FriendChestSpawner_LogSpawnerMessage");
static_assert(offsetof(FriendChestSpawner_LogSpawnerMessage, Message) == 0x000000, "Member 'FriendChestSpawner_LogSpawnerMessage::Message' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestSpawner.NotifySpawnFailure
// 0x0018 (0x0018 - 0x0000)
struct FriendChestSpawner_NotifySpawnFailure final
{
public:
	class FString                                 Reason;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadId;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendChestSpawner_NotifySpawnFailure) == 0x000008, "Wrong alignment on FriendChestSpawner_NotifySpawnFailure");
static_assert(sizeof(FriendChestSpawner_NotifySpawnFailure) == 0x000018, "Wrong size on FriendChestSpawner_NotifySpawnFailure");
static_assert(offsetof(FriendChestSpawner_NotifySpawnFailure, Reason) == 0x000000, "Member 'FriendChestSpawner_NotifySpawnFailure::Reason' has a wrong offset!");
static_assert(offsetof(FriendChestSpawner_NotifySpawnFailure, SquadId) == 0x000010, "Member 'FriendChestSpawner_NotifySpawnFailure::SquadId' has a wrong offset!");

// Function FreshCheeseRuntime.FortCheatManager_FreshCheese.FreshCheeseInstancedLoot
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_FreshCheese_FreshCheeseInstancedLoot final
{
public:
	class FName                                   TierGroup;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumFriends;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_FreshCheese_FreshCheeseInstancedLoot) == 0x000004, "Wrong alignment on FortCheatManager_FreshCheese_FreshCheeseInstancedLoot");
static_assert(sizeof(FortCheatManager_FreshCheese_FreshCheeseInstancedLoot) == 0x00000C, "Wrong size on FortCheatManager_FreshCheese_FreshCheeseInstancedLoot");
static_assert(offsetof(FortCheatManager_FreshCheese_FreshCheeseInstancedLoot, TierGroup) == 0x000000, "Member 'FortCheatManager_FreshCheese_FreshCheeseInstancedLoot::TierGroup' has a wrong offset!");
static_assert(offsetof(FortCheatManager_FreshCheese_FreshCheeseInstancedLoot, NumFriends) == 0x000008, "Member 'FortCheatManager_FreshCheese_FreshCheeseInstancedLoot::NumFriends' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.HandlePlayerDeadStateChanged
// 0x0010 (0x0010 - 0x0000)
struct FriendChestNative_HandlePlayerDeadStateChanged final
{
public:
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDead;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendChestNative_HandlePlayerDeadStateChanged) == 0x000008, "Wrong alignment on FriendChestNative_HandlePlayerDeadStateChanged");
static_assert(sizeof(FriendChestNative_HandlePlayerDeadStateChanged) == 0x000010, "Wrong size on FriendChestNative_HandlePlayerDeadStateChanged");
static_assert(offsetof(FriendChestNative_HandlePlayerDeadStateChanged, PlayerState) == 0x000000, "Member 'FriendChestNative_HandlePlayerDeadStateChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(FriendChestNative_HandlePlayerDeadStateChanged, bIsDead) == 0x000008, "Member 'FriendChestNative_HandlePlayerDeadStateChanged::bIsDead' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.OnPlayerEnter
// 0x0008 (0x0008 - 0x0000)
struct FriendChestNative_OnPlayerEnter final
{
public:
	const class AFortPlayerStateAthena*           Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendChestNative_OnPlayerEnter) == 0x000008, "Wrong alignment on FriendChestNative_OnPlayerEnter");
static_assert(sizeof(FriendChestNative_OnPlayerEnter) == 0x000008, "Wrong size on FriendChestNative_OnPlayerEnter");
static_assert(offsetof(FriendChestNative_OnPlayerEnter, Player) == 0x000000, "Member 'FriendChestNative_OnPlayerEnter::Player' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.OnPlayerHit
// 0x0010 (0x0010 - 0x0000)
struct FriendChestNative_OnPlayerHit final
{
public:
	const class AFortPlayerStateAthena*           Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendChestNative_OnPlayerHit) == 0x000008, "Wrong alignment on FriendChestNative_OnPlayerHit");
static_assert(sizeof(FriendChestNative_OnPlayerHit) == 0x000010, "Wrong size on FriendChestNative_OnPlayerHit");
static_assert(offsetof(FriendChestNative_OnPlayerHit, Player) == 0x000000, "Member 'FriendChestNative_OnPlayerHit::Player' has a wrong offset!");
static_assert(offsetof(FriendChestNative_OnPlayerHit, bWasSuccessful) == 0x000008, "Member 'FriendChestNative_OnPlayerHit::bWasSuccessful' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.OnPlayerLeave
// 0x0008 (0x0008 - 0x0000)
struct FriendChestNative_OnPlayerLeave final
{
public:
	const class AFortPlayerStateAthena*           Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendChestNative_OnPlayerLeave) == 0x000008, "Wrong alignment on FriendChestNative_OnPlayerLeave");
static_assert(sizeof(FriendChestNative_OnPlayerLeave) == 0x000008, "Wrong size on FriendChestNative_OnPlayerLeave");
static_assert(offsetof(FriendChestNative_OnPlayerLeave, Player) == 0x000000, "Member 'FriendChestNative_OnPlayerLeave::Player' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.OnPlayerPawnDied
// 0x0008 (0x0008 - 0x0000)
struct FriendChestNative_OnPlayerPawnDied final
{
public:
	class AFortPlayerPawn*                        DeadPawn;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendChestNative_OnPlayerPawnDied) == 0x000008, "Wrong alignment on FriendChestNative_OnPlayerPawnDied");
static_assert(sizeof(FriendChestNative_OnPlayerPawnDied) == 0x000008, "Wrong size on FriendChestNative_OnPlayerPawnDied");
static_assert(offsetof(FriendChestNative_OnPlayerPawnDied, DeadPawn) == 0x000000, "Member 'FriendChestNative_OnPlayerPawnDied::DeadPawn' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.OnPlayerTimeout
// 0x0008 (0x0008 - 0x0000)
struct FriendChestNative_OnPlayerTimeout final
{
public:
	const class AFortPlayerStateAthena*           Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendChestNative_OnPlayerTimeout) == 0x000008, "Wrong alignment on FriendChestNative_OnPlayerTimeout");
static_assert(sizeof(FriendChestNative_OnPlayerTimeout) == 0x000008, "Wrong size on FriendChestNative_OnPlayerTimeout");
static_assert(offsetof(FriendChestNative_OnPlayerTimeout, Player) == 0x000000, "Member 'FriendChestNative_OnPlayerTimeout::Player' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.OnTriggerComponentBeginOverlap
// 0x00C0 (0x00C0 - 0x0000)
struct FriendChestNative_OnTriggerComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x009C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendChestNative_OnTriggerComponentBeginOverlap) == 0x000008, "Wrong alignment on FriendChestNative_OnTriggerComponentBeginOverlap");
static_assert(sizeof(FriendChestNative_OnTriggerComponentBeginOverlap) == 0x0000C0, "Wrong size on FriendChestNative_OnTriggerComponentBeginOverlap");
static_assert(offsetof(FriendChestNative_OnTriggerComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'FriendChestNative_OnTriggerComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FriendChestNative_OnTriggerComponentBeginOverlap, OtherActor) == 0x000008, "Member 'FriendChestNative_OnTriggerComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(FriendChestNative_OnTriggerComponentBeginOverlap, OtherComp) == 0x000010, "Member 'FriendChestNative_OnTriggerComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(FriendChestNative_OnTriggerComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'FriendChestNative_OnTriggerComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FriendChestNative_OnTriggerComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'FriendChestNative_OnTriggerComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(FriendChestNative_OnTriggerComponentBeginOverlap, SweepResult) == 0x000020, "Member 'FriendChestNative_OnTriggerComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.OnTriggerComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct FriendChestNative_OnTriggerComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendChestNative_OnTriggerComponentEndOverlap) == 0x000008, "Wrong alignment on FriendChestNative_OnTriggerComponentEndOverlap");
static_assert(sizeof(FriendChestNative_OnTriggerComponentEndOverlap) == 0x000020, "Wrong size on FriendChestNative_OnTriggerComponentEndOverlap");
static_assert(offsetof(FriendChestNative_OnTriggerComponentEndOverlap, OverlappedComponent) == 0x000000, "Member 'FriendChestNative_OnTriggerComponentEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FriendChestNative_OnTriggerComponentEndOverlap, OtherActor) == 0x000008, "Member 'FriendChestNative_OnTriggerComponentEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(FriendChestNative_OnTriggerComponentEndOverlap, OtherComp) == 0x000010, "Member 'FriendChestNative_OnTriggerComponentEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(FriendChestNative_OnTriggerComponentEndOverlap, OtherBodyIndex) == 0x000018, "Member 'FriendChestNative_OnTriggerComponentEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.OnXpEvent
// 0x00A0 (0x00A0 - 0x0000)
struct FriendChestNative_OnXpEvent final
{
public:
	struct FXPEventInfo                           XPEvent;                                           // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendChestNative_OnXpEvent) == 0x000008, "Wrong alignment on FriendChestNative_OnXpEvent");
static_assert(sizeof(FriendChestNative_OnXpEvent) == 0x0000A0, "Wrong size on FriendChestNative_OnXpEvent");
static_assert(offsetof(FriendChestNative_OnXpEvent, XPEvent) == 0x000000, "Member 'FriendChestNative_OnXpEvent::XPEvent' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.PlayerAdded
// 0x0008 (0x0008 - 0x0000)
struct FriendChestNative_PlayerAdded final
{
public:
	class AFortPlayerPawnAthena*                  Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendChestNative_PlayerAdded) == 0x000008, "Wrong alignment on FriendChestNative_PlayerAdded");
static_assert(sizeof(FriendChestNative_PlayerAdded) == 0x000008, "Wrong size on FriendChestNative_PlayerAdded");
static_assert(offsetof(FriendChestNative_PlayerAdded, Player) == 0x000000, "Member 'FriendChestNative_PlayerAdded::Player' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.PlayerRemoved
// 0x0008 (0x0008 - 0x0000)
struct FriendChestNative_PlayerRemoved final
{
public:
	class AFortPlayerPawnAthena*                  Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendChestNative_PlayerRemoved) == 0x000008, "Wrong alignment on FriendChestNative_PlayerRemoved");
static_assert(sizeof(FriendChestNative_PlayerRemoved) == 0x000008, "Wrong size on FriendChestNative_PlayerRemoved");
static_assert(offsetof(FriendChestNative_PlayerRemoved, Player) == 0x000000, "Member 'FriendChestNative_PlayerRemoved::Player' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.ResetLootTierForAssociatedSquad
// 0x0001 (0x0001 - 0x0000)
struct FriendChestNative_ResetLootTierForAssociatedSquad final
{
public:
	bool                                          bOnlyAlive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendChestNative_ResetLootTierForAssociatedSquad) == 0x000001, "Wrong alignment on FriendChestNative_ResetLootTierForAssociatedSquad");
static_assert(sizeof(FriendChestNative_ResetLootTierForAssociatedSquad) == 0x000001, "Wrong size on FriendChestNative_ResetLootTierForAssociatedSquad");
static_assert(offsetof(FriendChestNative_ResetLootTierForAssociatedSquad, bOnlyAlive) == 0x000000, "Member 'FriendChestNative_ResetLootTierForAssociatedSquad::bOnlyAlive' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.RollInstancedLootForSquadMembers
// 0x0010 (0x0010 - 0x0000)
struct FriendChestNative_RollInstancedLootForSquadMembers final
{
public:
	class AGameModeBase*                          GameMode;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SquadId;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendChestNative_RollInstancedLootForSquadMembers) == 0x000008, "Wrong alignment on FriendChestNative_RollInstancedLootForSquadMembers");
static_assert(sizeof(FriendChestNative_RollInstancedLootForSquadMembers) == 0x000010, "Wrong size on FriendChestNative_RollInstancedLootForSquadMembers");
static_assert(offsetof(FriendChestNative_RollInstancedLootForSquadMembers, GameMode) == 0x000000, "Member 'FriendChestNative_RollInstancedLootForSquadMembers::GameMode' has a wrong offset!");
static_assert(offsetof(FriendChestNative_RollInstancedLootForSquadMembers, SquadId) == 0x000008, "Member 'FriendChestNative_RollInstancedLootForSquadMembers::SquadId' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.SimulateDisconnect
// 0x0010 (0x0010 - 0x0000)
struct FriendChestNative_SimulateDisconnect final
{
public:
	TArray<class FString>                         SquadUserIds;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendChestNative_SimulateDisconnect) == 0x000008, "Wrong alignment on FriendChestNative_SimulateDisconnect");
static_assert(sizeof(FriendChestNative_SimulateDisconnect) == 0x000010, "Wrong size on FriendChestNative_SimulateDisconnect");
static_assert(offsetof(FriendChestNative_SimulateDisconnect, SquadUserIds) == 0x000000, "Member 'FriendChestNative_SimulateDisconnect::SquadUserIds' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.CalculatePlayerChangedAlpha
// 0x0010 (0x0010 - 0x0000)
struct FriendChestNative_CalculatePlayerChangedAlpha final
{
public:
	int32                                         NumberInPosition;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delta;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendChestNative_CalculatePlayerChangedAlpha) == 0x000004, "Wrong alignment on FriendChestNative_CalculatePlayerChangedAlpha");
static_assert(sizeof(FriendChestNative_CalculatePlayerChangedAlpha) == 0x000010, "Wrong size on FriendChestNative_CalculatePlayerChangedAlpha");
static_assert(offsetof(FriendChestNative_CalculatePlayerChangedAlpha, NumberInPosition) == 0x000000, "Member 'FriendChestNative_CalculatePlayerChangedAlpha::NumberInPosition' has a wrong offset!");
static_assert(offsetof(FriendChestNative_CalculatePlayerChangedAlpha, Delta) == 0x000004, "Member 'FriendChestNative_CalculatePlayerChangedAlpha::Delta' has a wrong offset!");
static_assert(offsetof(FriendChestNative_CalculatePlayerChangedAlpha, Alpha) == 0x000008, "Member 'FriendChestNative_CalculatePlayerChangedAlpha::Alpha' has a wrong offset!");
static_assert(offsetof(FriendChestNative_CalculatePlayerChangedAlpha, ReturnValue) == 0x00000C, "Member 'FriendChestNative_CalculatePlayerChangedAlpha::ReturnValue' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.GetAssociatedSquadID
// 0x0001 (0x0001 - 0x0000)
struct FriendChestNative_GetAssociatedSquadID final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendChestNative_GetAssociatedSquadID) == 0x000001, "Wrong alignment on FriendChestNative_GetAssociatedSquadID");
static_assert(sizeof(FriendChestNative_GetAssociatedSquadID) == 0x000001, "Wrong size on FriendChestNative_GetAssociatedSquadID");
static_assert(offsetof(FriendChestNative_GetAssociatedSquadID, ReturnValue) == 0x000000, "Member 'FriendChestNative_GetAssociatedSquadID::ReturnValue' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.GetAssociatedSquadMembers
// 0x0018 (0x0018 - 0x0000)
struct FriendChestNative_GetAssociatedSquadMembers final
{
public:
	bool                                          bIncludeDead;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeResurectable;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeDisconnected;                              // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerStateAthena*>         OutSquadMembers;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendChestNative_GetAssociatedSquadMembers) == 0x000008, "Wrong alignment on FriendChestNative_GetAssociatedSquadMembers");
static_assert(sizeof(FriendChestNative_GetAssociatedSquadMembers) == 0x000018, "Wrong size on FriendChestNative_GetAssociatedSquadMembers");
static_assert(offsetof(FriendChestNative_GetAssociatedSquadMembers, bIncludeDead) == 0x000000, "Member 'FriendChestNative_GetAssociatedSquadMembers::bIncludeDead' has a wrong offset!");
static_assert(offsetof(FriendChestNative_GetAssociatedSquadMembers, bIncludeResurectable) == 0x000001, "Member 'FriendChestNative_GetAssociatedSquadMembers::bIncludeResurectable' has a wrong offset!");
static_assert(offsetof(FriendChestNative_GetAssociatedSquadMembers, bIncludeDisconnected) == 0x000002, "Member 'FriendChestNative_GetAssociatedSquadMembers::bIncludeDisconnected' has a wrong offset!");
static_assert(offsetof(FriendChestNative_GetAssociatedSquadMembers, OutSquadMembers) == 0x000008, "Member 'FriendChestNative_GetAssociatedSquadMembers::OutSquadMembers' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.GetNumTargetsForNextRound
// 0x000C (0x000C - 0x0000)
struct FriendChestNative_GetNumTargetsForNextRound final
{
public:
	int32                                         SquadSize;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingTargets;                                  // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendChestNative_GetNumTargetsForNextRound) == 0x000004, "Wrong alignment on FriendChestNative_GetNumTargetsForNextRound");
static_assert(sizeof(FriendChestNative_GetNumTargetsForNextRound) == 0x00000C, "Wrong size on FriendChestNative_GetNumTargetsForNextRound");
static_assert(offsetof(FriendChestNative_GetNumTargetsForNextRound, SquadSize) == 0x000000, "Member 'FriendChestNative_GetNumTargetsForNextRound::SquadSize' has a wrong offset!");
static_assert(offsetof(FriendChestNative_GetNumTargetsForNextRound, RemainingTargets) == 0x000004, "Member 'FriendChestNative_GetNumTargetsForNextRound::RemainingTargets' has a wrong offset!");
static_assert(offsetof(FriendChestNative_GetNumTargetsForNextRound, ReturnValue) == 0x000008, "Member 'FriendChestNative_GetNumTargetsForNextRound::ReturnValue' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestNative.GetWeakpointTransformForButtonID
// 0x0050 (0x0050 - 0x0000)
struct FriendChestNative_GetWeakpointTransformForButtonID final
{
public:
	const class UInstancedStaticMeshComponent*    InstancedStaticMesh;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceIndex;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WeakpointOffset;                                   // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendChestNative_GetWeakpointTransformForButtonID) == 0x000010, "Wrong alignment on FriendChestNative_GetWeakpointTransformForButtonID");
static_assert(sizeof(FriendChestNative_GetWeakpointTransformForButtonID) == 0x000050, "Wrong size on FriendChestNative_GetWeakpointTransformForButtonID");
static_assert(offsetof(FriendChestNative_GetWeakpointTransformForButtonID, InstancedStaticMesh) == 0x000000, "Member 'FriendChestNative_GetWeakpointTransformForButtonID::InstancedStaticMesh' has a wrong offset!");
static_assert(offsetof(FriendChestNative_GetWeakpointTransformForButtonID, InstanceIndex) == 0x000008, "Member 'FriendChestNative_GetWeakpointTransformForButtonID::InstanceIndex' has a wrong offset!");
static_assert(offsetof(FriendChestNative_GetWeakpointTransformForButtonID, WeakpointOffset) == 0x00000C, "Member 'FriendChestNative_GetWeakpointTransformForButtonID::WeakpointOffset' has a wrong offset!");
static_assert(offsetof(FriendChestNative_GetWeakpointTransformForButtonID, ReturnValue) == 0x000020, "Member 'FriendChestNative_GetWeakpointTransformForButtonID::ReturnValue' has a wrong offset!");

// Function FreshCheeseRuntime.FriendChestLibrary.GetFilteredSquadMembers
// 0x0020 (0x0020 - 0x0000)
struct FriendChestLibrary_GetFilteredSquadMembers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SquadId;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeDead;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeResurectable;                              // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeDisconnected;                              // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerStateAthena*>         OutSquadMembers;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendChestLibrary_GetFilteredSquadMembers) == 0x000008, "Wrong alignment on FriendChestLibrary_GetFilteredSquadMembers");
static_assert(sizeof(FriendChestLibrary_GetFilteredSquadMembers) == 0x000020, "Wrong size on FriendChestLibrary_GetFilteredSquadMembers");
static_assert(offsetof(FriendChestLibrary_GetFilteredSquadMembers, WorldContextObject) == 0x000000, "Member 'FriendChestLibrary_GetFilteredSquadMembers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FriendChestLibrary_GetFilteredSquadMembers, SquadId) == 0x000008, "Member 'FriendChestLibrary_GetFilteredSquadMembers::SquadId' has a wrong offset!");
static_assert(offsetof(FriendChestLibrary_GetFilteredSquadMembers, bIncludeDead) == 0x000009, "Member 'FriendChestLibrary_GetFilteredSquadMembers::bIncludeDead' has a wrong offset!");
static_assert(offsetof(FriendChestLibrary_GetFilteredSquadMembers, bIncludeResurectable) == 0x00000A, "Member 'FriendChestLibrary_GetFilteredSquadMembers::bIncludeResurectable' has a wrong offset!");
static_assert(offsetof(FriendChestLibrary_GetFilteredSquadMembers, bIncludeDisconnected) == 0x00000B, "Member 'FriendChestLibrary_GetFilteredSquadMembers::bIncludeDisconnected' has a wrong offset!");
static_assert(offsetof(FriendChestLibrary_GetFilteredSquadMembers, OutSquadMembers) == 0x000010, "Member 'FriendChestLibrary_GetFilteredSquadMembers::OutSquadMembers' has a wrong offset!");

}

