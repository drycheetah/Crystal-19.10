#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SoundLibrary

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "SoundLibrary_structs.hpp"
#include "AudioGameplay_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class SoundLibrary.SoundLibraryContext
// 0x0008 (0x0030 - 0x0028)
class USoundLibraryContext : public UObject
{
public:
	class AActor*                                 Actor;                                             // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundLibraryContext">();
	}
	static class USoundLibraryContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundLibraryContext>();
	}
};
static_assert(alignof(USoundLibraryContext) == 0x000008, "Wrong alignment on USoundLibraryContext");
static_assert(sizeof(USoundLibraryContext) == 0x000030, "Wrong size on USoundLibraryContext");
static_assert(offsetof(USoundLibraryContext, Actor) == 0x000028, "Member 'USoundLibraryContext::Actor' has a wrong offset!");

// Class SoundLibrary.SoundLibraryAnimContext
// 0x0040 (0x0070 - 0x0030)
class USoundLibraryAnimContext final : public USoundLibraryContext
{
public:
	struct FSoundLibraryAnimContextSettings       AnimSettings;                                      // 0x0030(0x0028)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0058(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x0060(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimRate;                                          // 0x0068(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConfigureContext(class AActor* OwningActor, class UAnimSequenceBase* InAnimation, const struct FSoundLibraryAnimContextSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundLibraryAnimContext">();
	}
	static class USoundLibraryAnimContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundLibraryAnimContext>();
	}
};
static_assert(alignof(USoundLibraryAnimContext) == 0x000008, "Wrong alignment on USoundLibraryAnimContext");
static_assert(sizeof(USoundLibraryAnimContext) == 0x000070, "Wrong size on USoundLibraryAnimContext");
static_assert(offsetof(USoundLibraryAnimContext, AnimSettings) == 0x000030, "Member 'USoundLibraryAnimContext::AnimSettings' has a wrong offset!");
static_assert(offsetof(USoundLibraryAnimContext, Animation) == 0x000058, "Member 'USoundLibraryAnimContext::Animation' has a wrong offset!");
static_assert(offsetof(USoundLibraryAnimContext, MeshComponent) == 0x000060, "Member 'USoundLibraryAnimContext::MeshComponent' has a wrong offset!");
static_assert(offsetof(USoundLibraryAnimContext, AnimRate) == 0x000068, "Member 'USoundLibraryAnimContext::AnimRate' has a wrong offset!");

// Class SoundLibrary.SoundLibraryAnimNotifyHelper
// 0x0040 (0x0068 - 0x0028)
class USoundLibraryAnimNotifyHelper final : public UObject
{
public:
	TArray<class UAudioComponent*>                PlayingComps;                                      // 0x0028(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSoundLibraryPlaySoundResult           PlaybackResult;                                    // 0x0038(0x0030)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundLibraryAnimNotifyHelper">();
	}
	static class USoundLibraryAnimNotifyHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundLibraryAnimNotifyHelper>();
	}
};
static_assert(alignof(USoundLibraryAnimNotifyHelper) == 0x000008, "Wrong alignment on USoundLibraryAnimNotifyHelper");
static_assert(sizeof(USoundLibraryAnimNotifyHelper) == 0x000068, "Wrong size on USoundLibraryAnimNotifyHelper");
static_assert(offsetof(USoundLibraryAnimNotifyHelper, PlayingComps) == 0x000028, "Member 'USoundLibraryAnimNotifyHelper::PlayingComps' has a wrong offset!");
static_assert(offsetof(USoundLibraryAnimNotifyHelper, PlaybackResult) == 0x000038, "Member 'USoundLibraryAnimNotifyHelper::PlaybackResult' has a wrong offset!");

// Class SoundLibrary.AnimNotify_SoundLibrary
// 0x0010 (0x0048 - 0x0038)
class UAnimNotify_SoundLibrary final : public UAnimNotify
{
public:
	class USoundLibraryContext*                   SoundContext;                                      // 0x0038(0x0008)(Edit, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundLibraryAnimNotifyHelper*          NotifyHelper;                                      // 0x0040(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_SoundLibrary">();
	}
	static class UAnimNotify_SoundLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_SoundLibrary>();
	}
};
static_assert(alignof(UAnimNotify_SoundLibrary) == 0x000008, "Wrong alignment on UAnimNotify_SoundLibrary");
static_assert(sizeof(UAnimNotify_SoundLibrary) == 0x000048, "Wrong size on UAnimNotify_SoundLibrary");
static_assert(offsetof(UAnimNotify_SoundLibrary, SoundContext) == 0x000038, "Member 'UAnimNotify_SoundLibrary::SoundContext' has a wrong offset!");
static_assert(offsetof(UAnimNotify_SoundLibrary, NotifyHelper) == 0x000040, "Member 'UAnimNotify_SoundLibrary::NotifyHelper' has a wrong offset!");

// Class SoundLibrary.AnimNotifyState_SoundLibrary
// 0x0010 (0x0040 - 0x0030)
class UAnimNotifyState_SoundLibrary final : public UAnimNotifyState
{
public:
	class USoundLibraryContext*                   SoundContext;                                      // 0x0030(0x0008)(Edit, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundLibraryAnimNotifyHelper*          NotifyHelper;                                      // 0x0038(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_SoundLibrary">();
	}
	static class UAnimNotifyState_SoundLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_SoundLibrary>();
	}
};
static_assert(alignof(UAnimNotifyState_SoundLibrary) == 0x000008, "Wrong alignment on UAnimNotifyState_SoundLibrary");
static_assert(sizeof(UAnimNotifyState_SoundLibrary) == 0x000040, "Wrong size on UAnimNotifyState_SoundLibrary");
static_assert(offsetof(UAnimNotifyState_SoundLibrary, SoundContext) == 0x000030, "Member 'UAnimNotifyState_SoundLibrary::SoundContext' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_SoundLibrary, NotifyHelper) == 0x000038, "Member 'UAnimNotifyState_SoundLibrary::NotifyHelper' has a wrong offset!");

// Class SoundLibrary.SoundLibraryComponent
// 0x0020 (0x00D8 - 0x00B8)
class USoundLibraryComponent final : public UAudioGameplayComponent
{
public:
	TMulticastInlineDelegate<void(struct FSoundLibraryPlaySoundResult& Results, class USoundLibraryContext* Context)> OnSoundLibraryPlayEvent;                           // 0x00B8(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class USoundLibrary>>      SoundLibraries;                                    // 0x00C8(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundLibraryComponent">();
	}
	static class USoundLibraryComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundLibraryComponent>();
	}
};
static_assert(alignof(USoundLibraryComponent) == 0x000008, "Wrong alignment on USoundLibraryComponent");
static_assert(sizeof(USoundLibraryComponent) == 0x0000D8, "Wrong size on USoundLibraryComponent");
static_assert(offsetof(USoundLibraryComponent, OnSoundLibraryPlayEvent) == 0x0000B8, "Member 'USoundLibraryComponent::OnSoundLibraryPlayEvent' has a wrong offset!");
static_assert(offsetof(USoundLibraryComponent, SoundLibraries) == 0x0000C8, "Member 'USoundLibraryComponent::SoundLibraries' has a wrong offset!");

// Class SoundLibrary.SoundLibrarySubsystem
// 0x00F0 (0x0120 - 0x0030)
class USoundLibrarySubsystem final : public UWorldSubsystem
{
public:
	TMap<class FName, class USoundLibrary*>       SoundLibraries;                                    // 0x0030(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_80[0xA0];                                      // 0x0080(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddLibraries(const class AActor* Actor, const TArray<TSubclassOf<class USoundLibrary>>& Libraries);
	void AddLibrary(const class AActor* Actor, TSubclassOf<class USoundLibrary> Library);
	void DisableEventsForActor(const class AActor* Actor);
	void EnableEventsForActor(const class AActor* Actor);
	void PlaySound(const class USoundLibraryContext* Context, struct FSoundLibraryPlaySoundResult* OutResults);
	void RemoveLibraries(const class AActor* Actor, const TArray<TSubclassOf<class USoundLibrary>>& Libraries);
	void RemoveLibrary(const class AActor* Actor, TSubclassOf<class USoundLibrary> Library);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundLibrarySubsystem">();
	}
	static class USoundLibrarySubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundLibrarySubsystem>();
	}
};
static_assert(alignof(USoundLibrarySubsystem) == 0x000008, "Wrong alignment on USoundLibrarySubsystem");
static_assert(sizeof(USoundLibrarySubsystem) == 0x000120, "Wrong size on USoundLibrarySubsystem");
static_assert(offsetof(USoundLibrarySubsystem, SoundLibraries) == 0x000030, "Member 'USoundLibrarySubsystem::SoundLibraries' has a wrong offset!");

// Class SoundLibrary.SimpleSoundLibraryContext
// 0x0028 (0x0058 - 0x0030)
class USimpleSoundLibraryContext final : public USoundLibraryContext
{
public:
	struct FSimpleSoundLibraryContextSettings     Settings;                                          // 0x0030(0x0028)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic)

public:
	void ConfigureContext(class AActor* OwningActor, const struct FSimpleSoundLibraryContextSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleSoundLibraryContext">();
	}
	static class USimpleSoundLibraryContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleSoundLibraryContext>();
	}
};
static_assert(alignof(USimpleSoundLibraryContext) == 0x000008, "Wrong alignment on USimpleSoundLibraryContext");
static_assert(sizeof(USimpleSoundLibraryContext) == 0x000058, "Wrong size on USimpleSoundLibraryContext");
static_assert(offsetof(USimpleSoundLibraryContext, Settings) == 0x000030, "Member 'USimpleSoundLibraryContext::Settings' has a wrong offset!");

// Class SoundLibrary.AttachedSoundLibraryContext
// 0x0048 (0x0078 - 0x0030)
class UAttachedSoundLibraryContext final : public USoundLibraryContext
{
public:
	struct FAttachedSoundLibraryContextSettings   Settings;                                          // 0x0030(0x0048)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic)

public:
	void ConfigureContext(class AActor* OwningActor, const struct FAttachedSoundLibraryContextSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AttachedSoundLibraryContext">();
	}
	static class UAttachedSoundLibraryContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAttachedSoundLibraryContext>();
	}
};
static_assert(alignof(UAttachedSoundLibraryContext) == 0x000008, "Wrong alignment on UAttachedSoundLibraryContext");
static_assert(sizeof(UAttachedSoundLibraryContext) == 0x000078, "Wrong size on UAttachedSoundLibraryContext");
static_assert(offsetof(UAttachedSoundLibraryContext, Settings) == 0x000030, "Member 'UAttachedSoundLibraryContext::Settings' has a wrong offset!");

// Class SoundLibrary.SoundLibrary
// 0x0088 (0x00B0 - 0x0028)
class USoundLibrary : public UObject
{
public:
	TMap<struct FGameplayTag, TSoftObjectPtr<class USoundBase>> Sounds;                                            // 0x0028(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     LoadedSoundObjects;                                // 0x0078(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_88[0x28];                                      // 0x0088(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundLibrary">();
	}
	static class USoundLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundLibrary>();
	}
};
static_assert(alignof(USoundLibrary) == 0x000008, "Wrong alignment on USoundLibrary");
static_assert(sizeof(USoundLibrary) == 0x0000B0, "Wrong size on USoundLibrary");
static_assert(offsetof(USoundLibrary, Sounds) == 0x000028, "Member 'USoundLibrary::Sounds' has a wrong offset!");
static_assert(offsetof(USoundLibrary, LoadedSoundObjects) == 0x000078, "Member 'USoundLibrary::LoadedSoundObjects' has a wrong offset!");

}

