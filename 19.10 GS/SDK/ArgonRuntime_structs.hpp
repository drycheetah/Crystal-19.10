#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ArgonRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum ArgonRuntime.EArgonRacePhase
// NumValues: 0x0007
enum class EArgonRacePhase : uint8
{
	None                                     = 0,
	TeleportingPlayers                       = 1,
	PreRaceSequence                          = 2,
	RaceActive                               = 3,
	PostRaceSequence                         = 4,
	RaceEnded                                = 5,
	MAX                                      = 6,
};

// ScriptStruct ArgonRuntime.ArgonSupplyDropPointData
// 0x0298 (0x0298 - 0x0000)
struct FArgonSupplyDropPointData final
{
public:
	struct FScalableFloat                         NumDropPoints;                                     // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         NumDropsPerSide;                                   // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SpaceBetweenDrops;                                 // 0x0050(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxDistanceFromSpawnPointPerpendicularToRace;      // 0x0078(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxDistanceFromSpawnPointParallelToRace;           // 0x00A0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         DistanceFromCenter;                                // 0x00C8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinDropDistanceFromCenter;                         // 0x00F0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinPercentDistanceFromEnd;                         // 0x0118(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxPercentDistanceFromEnd;                         // 0x0140(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinTimeUntilSpawn;                                 // 0x0168(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxTimeUntilSpawn;                                 // 0x0190(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxRepopulations;                                  // 0x01B8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinRepopulationTime;                               // 0x01E0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxRepopulationTime;                               // 0x0208(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_230[0x68];                                     // 0x0230(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArgonSupplyDropPointData) == 0x000008, "Wrong alignment on FArgonSupplyDropPointData");
static_assert(sizeof(FArgonSupplyDropPointData) == 0x000298, "Wrong size on FArgonSupplyDropPointData");
static_assert(offsetof(FArgonSupplyDropPointData, NumDropPoints) == 0x000000, "Member 'FArgonSupplyDropPointData::NumDropPoints' has a wrong offset!");
static_assert(offsetof(FArgonSupplyDropPointData, NumDropsPerSide) == 0x000028, "Member 'FArgonSupplyDropPointData::NumDropsPerSide' has a wrong offset!");
static_assert(offsetof(FArgonSupplyDropPointData, SpaceBetweenDrops) == 0x000050, "Member 'FArgonSupplyDropPointData::SpaceBetweenDrops' has a wrong offset!");
static_assert(offsetof(FArgonSupplyDropPointData, MaxDistanceFromSpawnPointPerpendicularToRace) == 0x000078, "Member 'FArgonSupplyDropPointData::MaxDistanceFromSpawnPointPerpendicularToRace' has a wrong offset!");
static_assert(offsetof(FArgonSupplyDropPointData, MaxDistanceFromSpawnPointParallelToRace) == 0x0000A0, "Member 'FArgonSupplyDropPointData::MaxDistanceFromSpawnPointParallelToRace' has a wrong offset!");
static_assert(offsetof(FArgonSupplyDropPointData, DistanceFromCenter) == 0x0000C8, "Member 'FArgonSupplyDropPointData::DistanceFromCenter' has a wrong offset!");
static_assert(offsetof(FArgonSupplyDropPointData, MinDropDistanceFromCenter) == 0x0000F0, "Member 'FArgonSupplyDropPointData::MinDropDistanceFromCenter' has a wrong offset!");
static_assert(offsetof(FArgonSupplyDropPointData, MinPercentDistanceFromEnd) == 0x000118, "Member 'FArgonSupplyDropPointData::MinPercentDistanceFromEnd' has a wrong offset!");
static_assert(offsetof(FArgonSupplyDropPointData, MaxPercentDistanceFromEnd) == 0x000140, "Member 'FArgonSupplyDropPointData::MaxPercentDistanceFromEnd' has a wrong offset!");
static_assert(offsetof(FArgonSupplyDropPointData, MinTimeUntilSpawn) == 0x000168, "Member 'FArgonSupplyDropPointData::MinTimeUntilSpawn' has a wrong offset!");
static_assert(offsetof(FArgonSupplyDropPointData, MaxTimeUntilSpawn) == 0x000190, "Member 'FArgonSupplyDropPointData::MaxTimeUntilSpawn' has a wrong offset!");
static_assert(offsetof(FArgonSupplyDropPointData, MaxRepopulations) == 0x0001B8, "Member 'FArgonSupplyDropPointData::MaxRepopulations' has a wrong offset!");
static_assert(offsetof(FArgonSupplyDropPointData, MinRepopulationTime) == 0x0001E0, "Member 'FArgonSupplyDropPointData::MinRepopulationTime' has a wrong offset!");
static_assert(offsetof(FArgonSupplyDropPointData, MaxRepopulationTime) == 0x000208, "Member 'FArgonSupplyDropPointData::MaxRepopulationTime' has a wrong offset!");

// ScriptStruct ArgonRuntime.ArgonFinishedPlayerInfo
// 0x0060 (0x0060 - 0x0000)
struct FArgonFinishedPlayerInfo final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       PlayerId;                                          // 0x0010(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Team;                                              // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FinishedTime;                                      // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Place;                                             // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortHeroType*                          HeroType;                                          // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishedAsLastTeamLeft;                           // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArgonFinishedPlayerInfo) == 0x000008, "Wrong alignment on FArgonFinishedPlayerInfo");
static_assert(sizeof(FArgonFinishedPlayerInfo) == 0x000060, "Wrong size on FArgonFinishedPlayerInfo");
static_assert(offsetof(FArgonFinishedPlayerInfo, PlayerName) == 0x000000, "Member 'FArgonFinishedPlayerInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FArgonFinishedPlayerInfo, PlayerId) == 0x000010, "Member 'FArgonFinishedPlayerInfo::PlayerId' has a wrong offset!");
static_assert(offsetof(FArgonFinishedPlayerInfo, Team) == 0x000038, "Member 'FArgonFinishedPlayerInfo::Team' has a wrong offset!");
static_assert(offsetof(FArgonFinishedPlayerInfo, FinishedTime) == 0x00003C, "Member 'FArgonFinishedPlayerInfo::FinishedTime' has a wrong offset!");
static_assert(offsetof(FArgonFinishedPlayerInfo, Place) == 0x000040, "Member 'FArgonFinishedPlayerInfo::Place' has a wrong offset!");
static_assert(offsetof(FArgonFinishedPlayerInfo, HeroType) == 0x000048, "Member 'FArgonFinishedPlayerInfo::HeroType' has a wrong offset!");
static_assert(offsetof(FArgonFinishedPlayerInfo, PlayerState) == 0x000050, "Member 'FArgonFinishedPlayerInfo::PlayerState' has a wrong offset!");
static_assert(offsetof(FArgonFinishedPlayerInfo, bFinishedAsLastTeamLeft) == 0x000058, "Member 'FArgonFinishedPlayerInfo::bFinishedAsLastTeamLeft' has a wrong offset!");

// ScriptStruct ArgonRuntime.ArgonVehicleOption
// 0x0038 (0x0038 - 0x0000)
struct FArgonVehicleOption final
{
public:
	struct FPrimaryAssetId                        VehicleAssetId;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Enabled;                                           // 0x0010(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArgonVehicleOption) == 0x000008, "Wrong alignment on FArgonVehicleOption");
static_assert(sizeof(FArgonVehicleOption) == 0x000038, "Wrong size on FArgonVehicleOption");
static_assert(offsetof(FArgonVehicleOption, VehicleAssetId) == 0x000000, "Member 'FArgonVehicleOption::VehicleAssetId' has a wrong offset!");
static_assert(offsetof(FArgonVehicleOption, Enabled) == 0x000010, "Member 'FArgonVehicleOption::Enabled' has a wrong offset!");

// ScriptStruct ArgonRuntime.ArgonRoute
// 0x0048 (0x0048 - 0x0000)
struct FArgonRoute final
{
public:
	struct FGameplayTagContainer                  Tag;                                               // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Enabled;                                           // 0x0020(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArgonRoute) == 0x000008, "Wrong alignment on FArgonRoute");
static_assert(sizeof(FArgonRoute) == 0x000048, "Wrong size on FArgonRoute");
static_assert(offsetof(FArgonRoute, Tag) == 0x000000, "Member 'FArgonRoute::Tag' has a wrong offset!");
static_assert(offsetof(FArgonRoute, Enabled) == 0x000020, "Member 'FArgonRoute::Enabled' has a wrong offset!");

// ScriptStruct ArgonRuntime.ArgonSupplyDropInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FArgonSupplyDropInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArgonSupplyDropInfo) == 0x000004, "Wrong alignment on FArgonSupplyDropInfo");
static_assert(sizeof(FArgonSupplyDropInfo) == 0x000018, "Wrong size on FArgonSupplyDropInfo");

// ScriptStruct ArgonRuntime.ArgonPlayerInfo
// 0x0010 (0x0010 - 0x0000)
struct FArgonPlayerInfo final
{
public:
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArgonPlayerInfo) == 0x000008, "Wrong alignment on FArgonPlayerInfo");
static_assert(sizeof(FArgonPlayerInfo) == 0x000010, "Wrong size on FArgonPlayerInfo");
static_assert(offsetof(FArgonPlayerInfo, PlayerState) == 0x000000, "Member 'FArgonPlayerInfo::PlayerState' has a wrong offset!");

// ScriptStruct ArgonRuntime.ArgonRaceStateInfo
// 0x0018 (0x0018 - 0x0000)
struct FArgonRaceStateInfo final
{
public:
	EArgonRacePhase                               CurrentRacePhase;                                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FArgonFinishedPlayerInfo>       FinishedTeamLeaderInfos;                           // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArgonRaceStateInfo) == 0x000008, "Wrong alignment on FArgonRaceStateInfo");
static_assert(sizeof(FArgonRaceStateInfo) == 0x000018, "Wrong size on FArgonRaceStateInfo");
static_assert(offsetof(FArgonRaceStateInfo, CurrentRacePhase) == 0x000000, "Member 'FArgonRaceStateInfo::CurrentRacePhase' has a wrong offset!");
static_assert(offsetof(FArgonRaceStateInfo, FinishedTeamLeaderInfos) == 0x000008, "Member 'FArgonRaceStateInfo::FinishedTeamLeaderInfos' has a wrong offset!");

// ScriptStruct ArgonRuntime.ArgonTeamTicketCount
// 0x0010 (0x0010 - 0x0000)
struct FArgonTeamTicketCount final
{
public:
	uint8                                         Team;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NumTickets;                                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateAthena*                 RecentTicketPickedUpByPlayer;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArgonTeamTicketCount) == 0x000008, "Wrong alignment on FArgonTeamTicketCount");
static_assert(sizeof(FArgonTeamTicketCount) == 0x000010, "Wrong size on FArgonTeamTicketCount");
static_assert(offsetof(FArgonTeamTicketCount, Team) == 0x000000, "Member 'FArgonTeamTicketCount::Team' has a wrong offset!");
static_assert(offsetof(FArgonTeamTicketCount, NumTickets) == 0x000001, "Member 'FArgonTeamTicketCount::NumTickets' has a wrong offset!");
static_assert(offsetof(FArgonTeamTicketCount, RecentTicketPickedUpByPlayer) == 0x000008, "Member 'FArgonTeamTicketCount::RecentTicketPickedUpByPlayer' has a wrong offset!");

// ScriptStruct ArgonRuntime.ArgonTeamProgressBarInfo
// 0x000C (0x000C - 0x0000)
struct FArgonTeamProgressBarInfo final
{
public:
	uint8                                         Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PercentProgress;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumTicketsAcquired;                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArgonTeamProgressBarInfo) == 0x000004, "Wrong alignment on FArgonTeamProgressBarInfo");
static_assert(sizeof(FArgonTeamProgressBarInfo) == 0x00000C, "Wrong size on FArgonTeamProgressBarInfo");
static_assert(offsetof(FArgonTeamProgressBarInfo, Team) == 0x000000, "Member 'FArgonTeamProgressBarInfo::Team' has a wrong offset!");
static_assert(offsetof(FArgonTeamProgressBarInfo, PercentProgress) == 0x000004, "Member 'FArgonTeamProgressBarInfo::PercentProgress' has a wrong offset!");
static_assert(offsetof(FArgonTeamProgressBarInfo, NumTicketsAcquired) == 0x000008, "Member 'FArgonTeamProgressBarInfo::NumTicketsAcquired' has a wrong offset!");

}

