#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MadmanRuntime

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "PhosphorusRuntime_classes.hpp"


namespace SDK
{

// Class MadmanRuntime.FortPoiVolume_Madman
// 0x0008 (0x02B8 - 0x02B0)
class AFortPoiVolume_Madman final : public AFortPoiVolume
{
public:
	float                                         StartingSpawnYawAngle;                             // 0x02B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPoiVolume_Madman">();
	}
	static class AFortPoiVolume_Madman* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortPoiVolume_Madman>();
	}
};
static_assert(alignof(AFortPoiVolume_Madman) == 0x000008, "Wrong alignment on AFortPoiVolume_Madman");
static_assert(sizeof(AFortPoiVolume_Madman) == 0x0002B8, "Wrong size on AFortPoiVolume_Madman");
static_assert(offsetof(AFortPoiVolume_Madman, StartingSpawnYawAngle) == 0x0002B0, "Member 'AFortPoiVolume_Madman::StartingSpawnYawAngle' has a wrong offset!");

// Class MadmanRuntime.FortAthenaMutator_Madman
// 0x0010 (0x06E0 - 0x06D0)
class AFortAthenaMutator_Madman final : public AFortAthenaMutator_TDM
{
public:
	uint8                                         Pad_6D0[0x10];                                     // 0x06D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_Madman">();
	}
	static class AFortAthenaMutator_Madman* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_Madman>();
	}
};
static_assert(alignof(AFortAthenaMutator_Madman) == 0x000008, "Wrong alignment on AFortAthenaMutator_Madman");
static_assert(sizeof(AFortAthenaMutator_Madman) == 0x0006E0, "Wrong size on AFortAthenaMutator_Madman");

// Class MadmanRuntime.FortAthenaMutator_Madman_PlayerSpawnPod
// 0x00F8 (0x0900 - 0x0808)
class AFortAthenaMutator_Madman_PlayerSpawnPod final : public AFortAthenaMutator_PlayerSpawnPod
{
public:
	uint8                                         Pad_808[0x8];                                      // 0x0808(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         InnerLandRadiusPercent;                            // 0x0810(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         OuterLandRadiusPercent;                            // 0x0838(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         TeamLandWedgePercentUsed;                          // 0x0860(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SpawnCampingNumberOfSpawnLocationsToEvaluate;      // 0x0888(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_8B0[0x28];                                     // 0x08B0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortAthenaMutator_SpawnCampingDetection* SpawnCampingDetectionMutator;                      // 0x08D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8E0[0x20];                                     // 0x08E0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGamePhaseChanged(EAthenaGamePhase NewPhase);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_Madman_PlayerSpawnPod">();
	}
	static class AFortAthenaMutator_Madman_PlayerSpawnPod* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_Madman_PlayerSpawnPod>();
	}
};
static_assert(alignof(AFortAthenaMutator_Madman_PlayerSpawnPod) == 0x000008, "Wrong alignment on AFortAthenaMutator_Madman_PlayerSpawnPod");
static_assert(sizeof(AFortAthenaMutator_Madman_PlayerSpawnPod) == 0x000900, "Wrong size on AFortAthenaMutator_Madman_PlayerSpawnPod");
static_assert(offsetof(AFortAthenaMutator_Madman_PlayerSpawnPod, InnerLandRadiusPercent) == 0x000810, "Member 'AFortAthenaMutator_Madman_PlayerSpawnPod::InnerLandRadiusPercent' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Madman_PlayerSpawnPod, OuterLandRadiusPercent) == 0x000838, "Member 'AFortAthenaMutator_Madman_PlayerSpawnPod::OuterLandRadiusPercent' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Madman_PlayerSpawnPod, TeamLandWedgePercentUsed) == 0x000860, "Member 'AFortAthenaMutator_Madman_PlayerSpawnPod::TeamLandWedgePercentUsed' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Madman_PlayerSpawnPod, SpawnCampingNumberOfSpawnLocationsToEvaluate) == 0x000888, "Member 'AFortAthenaMutator_Madman_PlayerSpawnPod::SpawnCampingNumberOfSpawnLocationsToEvaluate' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Madman_PlayerSpawnPod, SpawnCampingDetectionMutator) == 0x0008D8, "Member 'AFortAthenaMutator_Madman_PlayerSpawnPod::SpawnCampingDetectionMutator' has a wrong offset!");

// Class MadmanRuntime.SpawnCampingDetection_PawnComponent
// 0x0018 (0x00C8 - 0x00B0)
class USpawnCampingDetection_PawnComponent final : public UFortPawnComponent
{
public:
	uint8                                         Pad_B0[0x10];                                      // 0x00B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortAthenaMutator_SpawnCampingDetection* OwningMutator;                                     // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnDamaged(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpawnCampingDetection_PawnComponent">();
	}
	static class USpawnCampingDetection_PawnComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpawnCampingDetection_PawnComponent>();
	}
};
static_assert(alignof(USpawnCampingDetection_PawnComponent) == 0x000008, "Wrong alignment on USpawnCampingDetection_PawnComponent");
static_assert(sizeof(USpawnCampingDetection_PawnComponent) == 0x0000C8, "Wrong size on USpawnCampingDetection_PawnComponent");
static_assert(offsetof(USpawnCampingDetection_PawnComponent, OwningMutator) == 0x0000C0, "Member 'USpawnCampingDetection_PawnComponent::OwningMutator' has a wrong offset!");

// Class MadmanRuntime.SpawnCampingDetectionConsumer
// 0x0000 (0x0028 - 0x0028)
class ISpawnCampingDetectionConsumer final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpawnCampingDetectionConsumer">();
	}
	static class ISpawnCampingDetectionConsumer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISpawnCampingDetectionConsumer>();
	}
};
static_assert(alignof(ISpawnCampingDetectionConsumer) == 0x000008, "Wrong alignment on ISpawnCampingDetectionConsumer");
static_assert(sizeof(ISpawnCampingDetectionConsumer) == 0x000028, "Wrong size on ISpawnCampingDetectionConsumer");

// Class MadmanRuntime.FortCheatManager_SpawnCampingDetection
// 0x0000 (0x0038 - 0x0038)
class UFortCheatManager_SpawnCampingDetection final : public UFortCheatManager_Coupled
{
public:
	void SpawnCampingDetectionSetEnabled(const bool bInEnable);
	void SpawnCampingDetectionTriggerPawnWasSpawnCampDamaged();
	void SpawnCampingDetectionTriggerSpawnCamp(const uint8 TeamId, const int32 SpawnCampType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCheatManager_SpawnCampingDetection">();
	}
	static class UFortCheatManager_SpawnCampingDetection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCheatManager_SpawnCampingDetection>();
	}
};
static_assert(alignof(UFortCheatManager_SpawnCampingDetection) == 0x000008, "Wrong alignment on UFortCheatManager_SpawnCampingDetection");
static_assert(sizeof(UFortCheatManager_SpawnCampingDetection) == 0x000038, "Wrong size on UFortCheatManager_SpawnCampingDetection");

// Class MadmanRuntime.SynchronizedTeleportPlayerComponent_Madman
// 0x0010 (0x0118 - 0x0108)
class USynchronizedTeleportPlayerComponent_Madman final : public USynchronizedTeleportPlayerComponent
{
public:
	class USoundMix*                              FirstLoadingScreenSoundMix;                        // 0x0108(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SynchronizedTeleportPlayerComponent_Madman">();
	}
	static class USynchronizedTeleportPlayerComponent_Madman* GetDefaultObj()
	{
		return GetDefaultObjImpl<USynchronizedTeleportPlayerComponent_Madman>();
	}
};
static_assert(alignof(USynchronizedTeleportPlayerComponent_Madman) == 0x000008, "Wrong alignment on USynchronizedTeleportPlayerComponent_Madman");
static_assert(sizeof(USynchronizedTeleportPlayerComponent_Madman) == 0x000118, "Wrong size on USynchronizedTeleportPlayerComponent_Madman");
static_assert(offsetof(USynchronizedTeleportPlayerComponent_Madman, FirstLoadingScreenSoundMix) == 0x000108, "Member 'USynchronizedTeleportPlayerComponent_Madman::FirstLoadingScreenSoundMix' has a wrong offset!");

// Class MadmanRuntime.FortAthenaMutator_SpawnCampingDetection
// 0x02A8 (0x0570 - 0x02C8)
class AFortAthenaMutator_SpawnCampingDetection final : public AFortAthenaMutator
{
public:
	uint8                                         Pad_2C8[0x31];                                     // 0x02C8(0x0031)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bOnSpawnCampingDetectedAutomaticallySuggestSpawnLocation; // 0x02F9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2FA[0x6];                                      // 0x02FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USpawnCampingDetection_PawnComponent> PawnComponentClass;                                // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SpawnCampDamageTrackingDuration;                   // 0x0308(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SpawnCampDamageTrackingDamageThreshold;            // 0x0330(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SpawnCampDamageTrackingAffectedPlayersThreshold;   // 0x0358(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SpawnCampDamageTrackingAffectedPlayersDuration;    // 0x0380(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         EnemyProximityDistance;                            // 0x03A8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         bEnableSpawnCampDetectionViaEnemyProximity;        // 0x03D0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         NumberOfRespawnsTilEnemyProximityReevaluation;     // 0x03F8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinPercentOfNearbyEnemiesToTriggerSpawnLocationReevaluation; // 0x0420(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinNumberOfNearbyEnemiesToTriggerSpawnLocationReevaluation; // 0x0448(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinTimeBetweenSpawnCampSuggestions;                // 0x0470(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         bApplySpawnCampSuggestionCooldownOnRejectedSuggestions; // 0x0498(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C0[0x50];                                     // 0x04C0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                SpawnCampingDetectionConsumerObject;               // 0x0510(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_518[0x58];                                     // 0x0518(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearLastSpawnLocationSuggestionTime();

	bool AreSpawnLocationSuggestionsOnCooldown() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_SpawnCampingDetection">();
	}
	static class AFortAthenaMutator_SpawnCampingDetection* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_SpawnCampingDetection>();
	}
};
static_assert(alignof(AFortAthenaMutator_SpawnCampingDetection) == 0x000008, "Wrong alignment on AFortAthenaMutator_SpawnCampingDetection");
static_assert(sizeof(AFortAthenaMutator_SpawnCampingDetection) == 0x000570, "Wrong size on AFortAthenaMutator_SpawnCampingDetection");
static_assert(offsetof(AFortAthenaMutator_SpawnCampingDetection, bOnSpawnCampingDetectedAutomaticallySuggestSpawnLocation) == 0x0002F9, "Member 'AFortAthenaMutator_SpawnCampingDetection::bOnSpawnCampingDetectedAutomaticallySuggestSpawnLocation' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpawnCampingDetection, PawnComponentClass) == 0x000300, "Member 'AFortAthenaMutator_SpawnCampingDetection::PawnComponentClass' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpawnCampingDetection, SpawnCampDamageTrackingDuration) == 0x000308, "Member 'AFortAthenaMutator_SpawnCampingDetection::SpawnCampDamageTrackingDuration' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpawnCampingDetection, SpawnCampDamageTrackingDamageThreshold) == 0x000330, "Member 'AFortAthenaMutator_SpawnCampingDetection::SpawnCampDamageTrackingDamageThreshold' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpawnCampingDetection, SpawnCampDamageTrackingAffectedPlayersThreshold) == 0x000358, "Member 'AFortAthenaMutator_SpawnCampingDetection::SpawnCampDamageTrackingAffectedPlayersThreshold' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpawnCampingDetection, SpawnCampDamageTrackingAffectedPlayersDuration) == 0x000380, "Member 'AFortAthenaMutator_SpawnCampingDetection::SpawnCampDamageTrackingAffectedPlayersDuration' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpawnCampingDetection, EnemyProximityDistance) == 0x0003A8, "Member 'AFortAthenaMutator_SpawnCampingDetection::EnemyProximityDistance' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpawnCampingDetection, bEnableSpawnCampDetectionViaEnemyProximity) == 0x0003D0, "Member 'AFortAthenaMutator_SpawnCampingDetection::bEnableSpawnCampDetectionViaEnemyProximity' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpawnCampingDetection, NumberOfRespawnsTilEnemyProximityReevaluation) == 0x0003F8, "Member 'AFortAthenaMutator_SpawnCampingDetection::NumberOfRespawnsTilEnemyProximityReevaluation' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpawnCampingDetection, MinPercentOfNearbyEnemiesToTriggerSpawnLocationReevaluation) == 0x000420, "Member 'AFortAthenaMutator_SpawnCampingDetection::MinPercentOfNearbyEnemiesToTriggerSpawnLocationReevaluation' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpawnCampingDetection, MinNumberOfNearbyEnemiesToTriggerSpawnLocationReevaluation) == 0x000448, "Member 'AFortAthenaMutator_SpawnCampingDetection::MinNumberOfNearbyEnemiesToTriggerSpawnLocationReevaluation' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpawnCampingDetection, MinTimeBetweenSpawnCampSuggestions) == 0x000470, "Member 'AFortAthenaMutator_SpawnCampingDetection::MinTimeBetweenSpawnCampSuggestions' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpawnCampingDetection, bApplySpawnCampSuggestionCooldownOnRejectedSuggestions) == 0x000498, "Member 'AFortAthenaMutator_SpawnCampingDetection::bApplySpawnCampSuggestionCooldownOnRejectedSuggestions' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpawnCampingDetection, SpawnCampingDetectionConsumerObject) == 0x000510, "Member 'AFortAthenaMutator_SpawnCampingDetection::SpawnCampingDetectionConsumerObject' has a wrong offset!");

}

