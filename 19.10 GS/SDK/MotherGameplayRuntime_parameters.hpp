#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MotherGameplayRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function MotherGameplayRuntime.GravityGunTargetTrackingComponent.FindTargetActor
// 0x0020 (0x0020 - 0x0000)
struct GravityGunTargetTrackingComponent_FindTargetActor final
{
public:
	class AActor*                                 OwningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceStart;                                        // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceEnd;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GravityGunTargetTrackingComponent_FindTargetActor) == 0x000008, "Wrong alignment on GravityGunTargetTrackingComponent_FindTargetActor");
static_assert(sizeof(GravityGunTargetTrackingComponent_FindTargetActor) == 0x000020, "Wrong size on GravityGunTargetTrackingComponent_FindTargetActor");
static_assert(offsetof(GravityGunTargetTrackingComponent_FindTargetActor, OwningPlayer) == 0x000000, "Member 'GravityGunTargetTrackingComponent_FindTargetActor::OwningPlayer' has a wrong offset!");
static_assert(offsetof(GravityGunTargetTrackingComponent_FindTargetActor, TraceStart) == 0x000008, "Member 'GravityGunTargetTrackingComponent_FindTargetActor::TraceStart' has a wrong offset!");
static_assert(offsetof(GravityGunTargetTrackingComponent_FindTargetActor, TraceEnd) == 0x000014, "Member 'GravityGunTargetTrackingComponent_FindTargetActor::TraceEnd' has a wrong offset!");

// Function MotherGameplayRuntime.GravityGunTargetTrackingComponent.FindTargetProjectile
// 0x0028 (0x0028 - 0x0000)
struct GravityGunTargetTrackingComponent_FindTargetProjectile final
{
public:
	class AActor*                                 OwningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceStart;                                        // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceEnd;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetingRadius;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GravityGunTargetTrackingComponent_FindTargetProjectile) == 0x000008, "Wrong alignment on GravityGunTargetTrackingComponent_FindTargetProjectile");
static_assert(sizeof(GravityGunTargetTrackingComponent_FindTargetProjectile) == 0x000028, "Wrong size on GravityGunTargetTrackingComponent_FindTargetProjectile");
static_assert(offsetof(GravityGunTargetTrackingComponent_FindTargetProjectile, OwningPlayer) == 0x000000, "Member 'GravityGunTargetTrackingComponent_FindTargetProjectile::OwningPlayer' has a wrong offset!");
static_assert(offsetof(GravityGunTargetTrackingComponent_FindTargetProjectile, TraceStart) == 0x000008, "Member 'GravityGunTargetTrackingComponent_FindTargetProjectile::TraceStart' has a wrong offset!");
static_assert(offsetof(GravityGunTargetTrackingComponent_FindTargetProjectile, TraceEnd) == 0x000014, "Member 'GravityGunTargetTrackingComponent_FindTargetProjectile::TraceEnd' has a wrong offset!");
static_assert(offsetof(GravityGunTargetTrackingComponent_FindTargetProjectile, TargetingRadius) == 0x000020, "Member 'GravityGunTargetTrackingComponent_FindTargetProjectile::TargetingRadius' has a wrong offset!");
static_assert(offsetof(GravityGunTargetTrackingComponent_FindTargetProjectile, ReturnValue) == 0x000024, "Member 'GravityGunTargetTrackingComponent_FindTargetProjectile::ReturnValue' has a wrong offset!");

// Function MotherGameplayRuntime.GravityGunTargetTrackingComponent.IsValidTarget
// 0x0038 (0x0038 - 0x0000)
struct GravityGunTargetTrackingComponent_IsValidTarget final
{
public:
	class AActor*                                 OwningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 PotentialTarget;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReasonForFailure;                                  // 0x0010(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GravityGunTargetTrackingComponent_IsValidTarget) == 0x000008, "Wrong alignment on GravityGunTargetTrackingComponent_IsValidTarget");
static_assert(sizeof(GravityGunTargetTrackingComponent_IsValidTarget) == 0x000038, "Wrong size on GravityGunTargetTrackingComponent_IsValidTarget");
static_assert(offsetof(GravityGunTargetTrackingComponent_IsValidTarget, OwningPlayer) == 0x000000, "Member 'GravityGunTargetTrackingComponent_IsValidTarget::OwningPlayer' has a wrong offset!");
static_assert(offsetof(GravityGunTargetTrackingComponent_IsValidTarget, PotentialTarget) == 0x000008, "Member 'GravityGunTargetTrackingComponent_IsValidTarget::PotentialTarget' has a wrong offset!");
static_assert(offsetof(GravityGunTargetTrackingComponent_IsValidTarget, ReasonForFailure) == 0x000010, "Member 'GravityGunTargetTrackingComponent_IsValidTarget::ReasonForFailure' has a wrong offset!");
static_assert(offsetof(GravityGunTargetTrackingComponent_IsValidTarget, ReturnValue) == 0x000030, "Member 'GravityGunTargetTrackingComponent_IsValidTarget::ReturnValue' has a wrong offset!");

// Function MotherGameplayRuntime.PropGunFunctionLibrary.UpdatePropPreviewPosition
// 0x0058 (0x0058 - 0x0000)
struct PropGunFunctionLibrary_UpdatePropPreviewPosition final
{
public:
	class USceneComponent*                        PropPreviewComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AFortPawn*                        AttachPawn;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocket;                                      // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USkeletalMeshComponent*           WeaponMesh;                                        // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DesiredRelativeTransform;                          // 0x0028(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumZOffset;                                    // 0x0034(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0038(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CachedScale;                                       // 0x0044(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PropGunFunctionLibrary_UpdatePropPreviewPosition) == 0x000008, "Wrong alignment on PropGunFunctionLibrary_UpdatePropPreviewPosition");
static_assert(sizeof(PropGunFunctionLibrary_UpdatePropPreviewPosition) == 0x000058, "Wrong size on PropGunFunctionLibrary_UpdatePropPreviewPosition");
static_assert(offsetof(PropGunFunctionLibrary_UpdatePropPreviewPosition, PropPreviewComponent) == 0x000000, "Member 'PropGunFunctionLibrary_UpdatePropPreviewPosition::PropPreviewComponent' has a wrong offset!");
static_assert(offsetof(PropGunFunctionLibrary_UpdatePropPreviewPosition, DeltaTime) == 0x000008, "Member 'PropGunFunctionLibrary_UpdatePropPreviewPosition::DeltaTime' has a wrong offset!");
static_assert(offsetof(PropGunFunctionLibrary_UpdatePropPreviewPosition, AttachPawn) == 0x000010, "Member 'PropGunFunctionLibrary_UpdatePropPreviewPosition::AttachPawn' has a wrong offset!");
static_assert(offsetof(PropGunFunctionLibrary_UpdatePropPreviewPosition, AttachSocket) == 0x000018, "Member 'PropGunFunctionLibrary_UpdatePropPreviewPosition::AttachSocket' has a wrong offset!");
static_assert(offsetof(PropGunFunctionLibrary_UpdatePropPreviewPosition, WeaponMesh) == 0x000020, "Member 'PropGunFunctionLibrary_UpdatePropPreviewPosition::WeaponMesh' has a wrong offset!");
static_assert(offsetof(PropGunFunctionLibrary_UpdatePropPreviewPosition, DesiredRelativeTransform) == 0x000028, "Member 'PropGunFunctionLibrary_UpdatePropPreviewPosition::DesiredRelativeTransform' has a wrong offset!");
static_assert(offsetof(PropGunFunctionLibrary_UpdatePropPreviewPosition, MinimumZOffset) == 0x000034, "Member 'PropGunFunctionLibrary_UpdatePropPreviewPosition::MinimumZOffset' has a wrong offset!");
static_assert(offsetof(PropGunFunctionLibrary_UpdatePropPreviewPosition, RelativeRotation) == 0x000038, "Member 'PropGunFunctionLibrary_UpdatePropPreviewPosition::RelativeRotation' has a wrong offset!");
static_assert(offsetof(PropGunFunctionLibrary_UpdatePropPreviewPosition, CachedScale) == 0x000044, "Member 'PropGunFunctionLibrary_UpdatePropPreviewPosition::CachedScale' has a wrong offset!");
static_assert(offsetof(PropGunFunctionLibrary_UpdatePropPreviewPosition, InterpSpeed) == 0x000050, "Member 'PropGunFunctionLibrary_UpdatePropPreviewPosition::InterpSpeed' has a wrong offset!");

// Function MotherGameplayRuntime.ReactorGradeGameplayCue_ChargeUp.OnEndPointFound
// 0x000C (0x000C - 0x0000)
struct ReactorGradeGameplayCue_ChargeUp_OnEndPointFound final
{
public:
	struct FVector                                FoundPoint;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReactorGradeGameplayCue_ChargeUp_OnEndPointFound) == 0x000004, "Wrong alignment on ReactorGradeGameplayCue_ChargeUp_OnEndPointFound");
static_assert(sizeof(ReactorGradeGameplayCue_ChargeUp_OnEndPointFound) == 0x00000C, "Wrong size on ReactorGradeGameplayCue_ChargeUp_OnEndPointFound");
static_assert(offsetof(ReactorGradeGameplayCue_ChargeUp_OnEndPointFound, FoundPoint) == 0x000000, "Member 'ReactorGradeGameplayCue_ChargeUp_OnEndPointFound::FoundPoint' has a wrong offset!");

// Function MotherGameplayRuntime.ReactorGradeGameplayCue_ChargeUp.GetFoundEndPoint
// 0x000C (0x000C - 0x0000)
struct ReactorGradeGameplayCue_ChargeUp_GetFoundEndPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReactorGradeGameplayCue_ChargeUp_GetFoundEndPoint) == 0x000004, "Wrong alignment on ReactorGradeGameplayCue_ChargeUp_GetFoundEndPoint");
static_assert(sizeof(ReactorGradeGameplayCue_ChargeUp_GetFoundEndPoint) == 0x00000C, "Wrong size on ReactorGradeGameplayCue_ChargeUp_GetFoundEndPoint");
static_assert(offsetof(ReactorGradeGameplayCue_ChargeUp_GetFoundEndPoint, ReturnValue) == 0x000000, "Member 'ReactorGradeGameplayCue_ChargeUp_GetFoundEndPoint::ReturnValue' has a wrong offset!");

}

