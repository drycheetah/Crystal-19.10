#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FreshCheeseRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum FreshCheeseRuntime.EFriendChestResult
// NumValues: 0x0005
enum class EFriendChestResult : uint8
{
	Ignored                                  = 0,
	Partial                                  = 1,
	Abandoned                                = 2,
	Opened                                   = 3,
	SpawnFailure                             = 4,
};

// ScriptStruct FreshCheeseRuntime.FriendChestRoundPacing
// 0x0010 (0x0010 - 0x0000)
struct FFriendChestRoundPacing final
{
public:
	TArray<int32>                                 NumTargetsPerRound;                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendChestRoundPacing) == 0x000008, "Wrong alignment on FFriendChestRoundPacing");
static_assert(sizeof(FFriendChestRoundPacing) == 0x000010, "Wrong size on FFriendChestRoundPacing");
static_assert(offsetof(FFriendChestRoundPacing, NumTargetsPerRound) == 0x000000, "Member 'FFriendChestRoundPacing::NumTargetsPerRound' has a wrong offset!");

// ScriptStruct FreshCheeseRuntime.FriendChestPlayerActivationPair
// 0x0010 (0x0010 - 0x0000)
struct FFriendChestPlayerActivationPair final
{
public:
	class AFortPlayerPawnAthena*                  Player;                                            // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           ActivationTimer;                                   // 0x0008(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendChestPlayerActivationPair) == 0x000008, "Wrong alignment on FFriendChestPlayerActivationPair");
static_assert(sizeof(FFriendChestPlayerActivationPair) == 0x000010, "Wrong size on FFriendChestPlayerActivationPair");
static_assert(offsetof(FFriendChestPlayerActivationPair, Player) == 0x000000, "Member 'FFriendChestPlayerActivationPair::Player' has a wrong offset!");
static_assert(offsetof(FFriendChestPlayerActivationPair, ActivationTimer) == 0x000008, "Member 'FFriendChestPlayerActivationPair::ActivationTimer' has a wrong offset!");

// ScriptStruct FreshCheeseRuntime.FriendChestAnalyticsLootRoll
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FFriendChestAnalyticsLootRoll final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriendChestAnalyticsLootRoll) == 0x000008, "Wrong alignment on FFriendChestAnalyticsLootRoll");
static_assert(sizeof(FFriendChestAnalyticsLootRoll) == 0x000048, "Wrong size on FFriendChestAnalyticsLootRoll");

// ScriptStruct FreshCheeseRuntime.FriendChestAnalyticsParticipant
// 0x0068 (0x0068 - 0x0000)
struct FFriendChestAnalyticsParticipant final
{
public:
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 AccountId;                                         // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                SpawnCoordinates;                                  // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x24];                                      // 0x0024(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFriendChestAnalyticsLootRoll>  InstancedLoot;                                     // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FFriendChestAnalyticsLootRoll>  FailedLoot;                                        // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFriendChestAnalyticsParticipant) == 0x000008, "Wrong alignment on FFriendChestAnalyticsParticipant");
static_assert(sizeof(FFriendChestAnalyticsParticipant) == 0x000068, "Wrong size on FFriendChestAnalyticsParticipant");
static_assert(offsetof(FFriendChestAnalyticsParticipant, PlayerState) == 0x000000, "Member 'FFriendChestAnalyticsParticipant::PlayerState' has a wrong offset!");
static_assert(offsetof(FFriendChestAnalyticsParticipant, AccountId) == 0x000008, "Member 'FFriendChestAnalyticsParticipant::AccountId' has a wrong offset!");
static_assert(offsetof(FFriendChestAnalyticsParticipant, SpawnCoordinates) == 0x000018, "Member 'FFriendChestAnalyticsParticipant::SpawnCoordinates' has a wrong offset!");
static_assert(offsetof(FFriendChestAnalyticsParticipant, InstancedLoot) == 0x000048, "Member 'FFriendChestAnalyticsParticipant::InstancedLoot' has a wrong offset!");
static_assert(offsetof(FFriendChestAnalyticsParticipant, FailedLoot) == 0x000058, "Member 'FFriendChestAnalyticsParticipant::FailedLoot' has a wrong offset!");

}

