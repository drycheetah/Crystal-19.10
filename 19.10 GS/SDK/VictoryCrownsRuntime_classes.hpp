#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VictoryCrownsRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class VictoryCrownsRuntime.FortControllerComponent_VictoryCrowns
// 0x0188 (0x0238 - 0x00B0)
class UFortControllerComponent_VictoryCrowns : public UFortControllerComponent
{
public:
	TMulticastInlineDelegate<void(class AFortPlayerControllerAthena* FortPlayerControllerAthena, class UFortItem* CrownItem)> OnVictoryCrownStatusChanged;                       // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnHasWonCrownInMatch;                              // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnHasWonRoyalRoyale;                               // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x18];                                      // 0x00E0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortWorldItemDefinition> CrownInventoryItemClass;                           // 0x00F8(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWonCrownInMatch;                                  // 0x0120(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWonRoyalRoyale;                                   // 0x0121(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortVictoryCrownAccountItemDefinition* VictoryCrownAccountItemDefinition;                 // 0x0128(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UFortMontageItemDefinitionBase> RoyalRoyaleEmoteItemDefinition;                    // 0x0130(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             VictoryCrownPlaylistData;                          // 0x0158(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  SourceTagsForRoyalRoyale;                          // 0x0160(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FVictoryCrownAccountData               VictoryCrownAccountData;                           // 0x0180(0x0010)(Net, Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_190[0xA0];                                     // 0x0190(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bKillFeedBroadcastReady;                           // 0x0230(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CacheAccountItemData();
	void DebugForceSetRoyalRoyaleAchievedCount(int32 NewRoyalRoyaleCount);
	void HandleEnterAircraft();
	void HandlePawnChanged(class APawn* OldPawn, class APawn* NewPawn);
	void OnAthenaProfileInitialized();
	void OnRep_WonCrownInMatch();
	void OnRep_WonRoyalRoyale();

	bool AuthorityHasDroppedCrownItem(const class UFortItem* CrownItem) const;
	bool AuthorityHasHeldCrownItem(const class UFortItem* CrownItem) const;
	bool AuthorityHasSquadDroppedCrownItem(const class UFortItem* CrownItem) const;
	bool AuthorityHasSquadHeldCrownItem(const class UFortItem* CrownItem) const;
	bool AuthoritySquadHasSeenCrownItem(const class UFortItem* CrownItem, const bool bDropped) const;
	const class UFortWorldItem* GetCrownInPlayerInventory() const;
	const int32 GetRoyalRoyaleAchievedCount() const;
	const int32 GetVictoryCrownsBestowedCount() const;
	bool HasWonCrownInMatch() const;
	bool HasWonRoyalRoyale() const;
	bool IsCrownInPlayerInventory() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortControllerComponent_VictoryCrowns">();
	}
	static class UFortControllerComponent_VictoryCrowns* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortControllerComponent_VictoryCrowns>();
	}
};
static_assert(alignof(UFortControllerComponent_VictoryCrowns) == 0x000008, "Wrong alignment on UFortControllerComponent_VictoryCrowns");
static_assert(sizeof(UFortControllerComponent_VictoryCrowns) == 0x000238, "Wrong size on UFortControllerComponent_VictoryCrowns");
static_assert(offsetof(UFortControllerComponent_VictoryCrowns, OnVictoryCrownStatusChanged) == 0x0000B0, "Member 'UFortControllerComponent_VictoryCrowns::OnVictoryCrownStatusChanged' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_VictoryCrowns, OnHasWonCrownInMatch) == 0x0000C0, "Member 'UFortControllerComponent_VictoryCrowns::OnHasWonCrownInMatch' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_VictoryCrowns, OnHasWonRoyalRoyale) == 0x0000D0, "Member 'UFortControllerComponent_VictoryCrowns::OnHasWonRoyalRoyale' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_VictoryCrowns, CrownInventoryItemClass) == 0x0000F8, "Member 'UFortControllerComponent_VictoryCrowns::CrownInventoryItemClass' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_VictoryCrowns, bWonCrownInMatch) == 0x000120, "Member 'UFortControllerComponent_VictoryCrowns::bWonCrownInMatch' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_VictoryCrowns, bWonRoyalRoyale) == 0x000121, "Member 'UFortControllerComponent_VictoryCrowns::bWonRoyalRoyale' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_VictoryCrowns, VictoryCrownAccountItemDefinition) == 0x000128, "Member 'UFortControllerComponent_VictoryCrowns::VictoryCrownAccountItemDefinition' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_VictoryCrowns, RoyalRoyaleEmoteItemDefinition) == 0x000130, "Member 'UFortControllerComponent_VictoryCrowns::RoyalRoyaleEmoteItemDefinition' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_VictoryCrowns, VictoryCrownPlaylistData) == 0x000158, "Member 'UFortControllerComponent_VictoryCrowns::VictoryCrownPlaylistData' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_VictoryCrowns, SourceTagsForRoyalRoyale) == 0x000160, "Member 'UFortControllerComponent_VictoryCrowns::SourceTagsForRoyalRoyale' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_VictoryCrowns, VictoryCrownAccountData) == 0x000180, "Member 'UFortControllerComponent_VictoryCrowns::VictoryCrownAccountData' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_VictoryCrowns, bKillFeedBroadcastReady) == 0x000230, "Member 'UFortControllerComponent_VictoryCrowns::bKillFeedBroadcastReady' has a wrong offset!");

// Class VictoryCrownsRuntime.FortCosmeticStatObject_TotalRoyalRoyales
// 0x0018 (0x00A8 - 0x0090)
class UFortCosmeticStatObject_TotalRoyalRoyales : public UFortCosmeticStatObject
{
public:
	class UFortVictoryCrownAccountItemDefinition* VictoryCrownAccountItemDefinition;                 // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UFortControllerComponent_VictoryCrowns*> CachedCrownComponents;                             // 0x0098(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCosmeticStatObject_TotalRoyalRoyales">();
	}
	static class UFortCosmeticStatObject_TotalRoyalRoyales* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCosmeticStatObject_TotalRoyalRoyales>();
	}
};
static_assert(alignof(UFortCosmeticStatObject_TotalRoyalRoyales) == 0x000008, "Wrong alignment on UFortCosmeticStatObject_TotalRoyalRoyales");
static_assert(sizeof(UFortCosmeticStatObject_TotalRoyalRoyales) == 0x0000A8, "Wrong size on UFortCosmeticStatObject_TotalRoyalRoyales");
static_assert(offsetof(UFortCosmeticStatObject_TotalRoyalRoyales, VictoryCrownAccountItemDefinition) == 0x000090, "Member 'UFortCosmeticStatObject_TotalRoyalRoyales::VictoryCrownAccountItemDefinition' has a wrong offset!");
static_assert(offsetof(UFortCosmeticStatObject_TotalRoyalRoyales, CachedCrownComponents) == 0x000098, "Member 'UFortCosmeticStatObject_TotalRoyalRoyales::CachedCrownComponents' has a wrong offset!");

// Class VictoryCrownsRuntime.FortCosmeticStatObject_TotalVictoryCrowns
// 0x0008 (0x0098 - 0x0090)
class UFortCosmeticStatObject_TotalVictoryCrowns : public UFortCosmeticStatObject
{
public:
	class UFortVictoryCrownAccountItemDefinition* VictoryCrownAccountItemDefinition;                 // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCosmeticStatObject_TotalVictoryCrowns">();
	}
	static class UFortCosmeticStatObject_TotalVictoryCrowns* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCosmeticStatObject_TotalVictoryCrowns>();
	}
};
static_assert(alignof(UFortCosmeticStatObject_TotalVictoryCrowns) == 0x000008, "Wrong alignment on UFortCosmeticStatObject_TotalVictoryCrowns");
static_assert(sizeof(UFortCosmeticStatObject_TotalVictoryCrowns) == 0x000098, "Wrong size on UFortCosmeticStatObject_TotalVictoryCrowns");
static_assert(offsetof(UFortCosmeticStatObject_TotalVictoryCrowns, VictoryCrownAccountItemDefinition) == 0x000090, "Member 'UFortCosmeticStatObject_TotalVictoryCrowns::VictoryCrownAccountItemDefinition' has a wrong offset!");

// Class VictoryCrownsRuntime.FortGameStateComponent_VictoryCrowns
// 0x0058 (0x0108 - 0x00B0)
class UFortGameStateComponent_VictoryCrowns : public UFortGameStateComponent
{
public:
	TArray<class AFortPlayerStateAthena*>         CrownBearerPlayerStates;                           // 0x00B0(0x0010)(Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	class FText                                   KillFeedFormat_Dropped;                            // 0x00C0(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   KillFeedFormat_PickedUp;                           // 0x00D8(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F0[0x18];                                      // 0x00F0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientKillFeedMessage(const class AFortPlayerStateAthena* FortPSA, bool bAdded);
	void HandleCrownStatusChanged(class AFortPlayerControllerAthena* FortPlayerControllerAthena, const class UFortItem* CrownItem);
	void OnRep_CrownBearerPlayerStates();

	bool IsCrownBearer(const class AFortPlayerStateAthena* FortPSA) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameStateComponent_VictoryCrowns">();
	}
	static class UFortGameStateComponent_VictoryCrowns* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameStateComponent_VictoryCrowns>();
	}
};
static_assert(alignof(UFortGameStateComponent_VictoryCrowns) == 0x000008, "Wrong alignment on UFortGameStateComponent_VictoryCrowns");
static_assert(sizeof(UFortGameStateComponent_VictoryCrowns) == 0x000108, "Wrong size on UFortGameStateComponent_VictoryCrowns");
static_assert(offsetof(UFortGameStateComponent_VictoryCrowns, CrownBearerPlayerStates) == 0x0000B0, "Member 'UFortGameStateComponent_VictoryCrowns::CrownBearerPlayerStates' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_VictoryCrowns, KillFeedFormat_Dropped) == 0x0000C0, "Member 'UFortGameStateComponent_VictoryCrowns::KillFeedFormat_Dropped' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_VictoryCrowns, KillFeedFormat_PickedUp) == 0x0000D8, "Member 'UFortGameStateComponent_VictoryCrowns::KillFeedFormat_PickedUp' has a wrong offset!");

// Class VictoryCrownsRuntime.FortPlayerStateComponent_VictoryCrowns
// 0x0008 (0x00B8 - 0x00B0)
class UFortPlayerStateComponent_VictoryCrowns final : public UFortPlayerStateComponent
{
public:
	bool                                          bHasWonRoyalRoyale;                                // 0x00B0(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetWonRoyalRoyale() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerStateComponent_VictoryCrowns">();
	}
	static class UFortPlayerStateComponent_VictoryCrowns* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerStateComponent_VictoryCrowns>();
	}
};
static_assert(alignof(UFortPlayerStateComponent_VictoryCrowns) == 0x000008, "Wrong alignment on UFortPlayerStateComponent_VictoryCrowns");
static_assert(sizeof(UFortPlayerStateComponent_VictoryCrowns) == 0x0000B8, "Wrong size on UFortPlayerStateComponent_VictoryCrowns");
static_assert(offsetof(UFortPlayerStateComponent_VictoryCrowns, bHasWonRoyalRoyale) == 0x0000B0, "Member 'UFortPlayerStateComponent_VictoryCrowns::bHasWonRoyalRoyale' has a wrong offset!");

}

