#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PictureInPictureFNEvents

#include "Basic.hpp"

#include "PictureInPictureFNEvents_classes.hpp"
#include "PictureInPictureFNEvents_parameters.hpp"


namespace SDK
{

// Function PictureInPictureFNEvents.LiveEventHUDAd.ShowAdvertisement
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULiveEventHUDAd::ShowAdvertisement(bool* Result)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ShowAdvertisement");

	Params::LiveEventHUDAd_ShowAdvertisement Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function PictureInPictureFNEvents.PictureInPictureFNEventsCheatManager.AddPiPEvent
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           VUID                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPictureInPictureFNEventsCheatManager::AddPiPEvent(const class FString& EventName, const class FString& VUID)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddPiPEvent");

	Params::PictureInPictureFNEventsCheatManager_AddPiPEvent Parms{};

	Parms.EventName = std::move(EventName);
	Parms.VUID = std::move(VUID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PictureInPictureFNEvents.PictureInPictureFNEventsCheatManager.ListPiPEvents
// (Final, Exec, Native, Public, BlueprintCallable)

void UPictureInPictureFNEventsCheatManager::ListPiPEvents()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ListPiPEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PictureInPictureFNEvents.PictureInPictureFNEventsCheatManager.RemovePiPEvent
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPictureInPictureFNEventsCheatManager::RemovePiPEvent(const class FString& EventName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemovePiPEvent");

	Params::PictureInPictureFNEventsCheatManager_RemovePiPEvent Parms{};

	Parms.EventName = std::move(EventName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PictureInPictureFNEvents.PictureInPictureFNEventsCheatManager.SelectPiPEvent
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPictureInPictureFNEventsCheatManager::SelectPiPEvent(const class FString& EventName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SelectPiPEvent");

	Params::PictureInPictureFNEventsCheatManager_SelectPiPEvent Parms{};

	Parms.EventName = std::move(EventName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PictureInPictureFNEvents.PictureInPictureFNEventsCheatManager.StartPiPBouncingLlama
// (Final, Exec, Native, Public, BlueprintCallable)

void UPictureInPictureFNEventsCheatManager::StartPiPBouncingLlama()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StartPiPBouncingLlama");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PictureInPictureFNEvents.PictureInPictureFNEventsCheatManager.StopPiPBouncingLlama
// (Final, Exec, Native, Public, BlueprintCallable)

void UPictureInPictureFNEventsCheatManager::StopPiPBouncingLlama()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StopPiPBouncingLlama");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PictureInPictureFNEvents.PictureInPictureFNEventsController.AddPartnerActionAnalytics
// (Final, Native, Private)
// Parameters:
// class FString                           InPartnerName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPictureInPictureAction                 InActionType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPictureInPictureFNEventsController::AddPartnerActionAnalytics(const class FString& InPartnerName, EPictureInPictureAction InActionType)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddPartnerActionAnalytics");

	Params::PictureInPictureFNEventsController_AddPartnerActionAnalytics Parms{};

	Parms.InPartnerName = std::move(InPartnerName);
	Parms.InActionType = InActionType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PictureInPictureFNEvents.PictureInPictureFNEventsController.ExitEvent
// (Final, Native, Private)

void UPictureInPictureFNEventsController::ExitEvent()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ExitEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PictureInPictureFNEvents.PictureInPictureFNEventsController.HandleFNMediaEventsStreams
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FFortMediaEventsStreamAssets     VideoStreamAssets                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPictureInPictureFNEventsController::HandleFNMediaEventsStreams(const struct FFortMediaEventsStreamAssets& VideoStreamAssets)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleFNMediaEventsStreams");

	Params::PictureInPictureFNEventsController_HandleFNMediaEventsStreams Parms{};

	Parms.VideoStreamAssets = std::move(VideoStreamAssets);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PictureInPictureFNEvents.PictureInPictureFNEventsController.HandleFNMediaRemoveEventsStream
// (Final, Native, Protected)
// Parameters:
// class FString                           InEventName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPictureInPictureFNEventsController::HandleFNMediaRemoveEventsStream(const class FString& InEventName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleFNMediaRemoveEventsStream");

	Params::PictureInPictureFNEventsController_HandleFNMediaRemoveEventsStream Parms{};

	Parms.InEventName = std::move(InEventName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PictureInPictureFNEvents.PictureInPictureFNEventsController.OnClientLoginSuccess
// (Final, Native, Private)

void UPictureInPictureFNEventsController::OnClientLoginSuccess()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnClientLoginSuccess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PictureInPictureFNEvents.PictureInPictureFNEventsController.OnClientLogoutSuccess
// (Final, Native, Private)

void UPictureInPictureFNEventsController::OnClientLogoutSuccess()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnClientLogoutSuccess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PictureInPictureFNEvents.PictureInPictureFNEventsController.UpdateClientLoginState
// (Final, Native, Private, HasOutParams)
// Parameters:
// TArray<struct FPiPPartnerSource>        UpdatedSources                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UPictureInPictureFNEventsController::UpdateClientLoginState(const TArray<struct FPiPPartnerSource>& UpdatedSources)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateClientLoginState");

	Params::PictureInPictureFNEventsController_UpdateClientLoginState Parms{};

	Parms.UpdatedSources = std::move(UpdatedSources);

	UObject::ProcessEvent(Func, &Parms);
}

}

