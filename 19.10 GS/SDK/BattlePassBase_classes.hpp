#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlePassBase

#include "Basic.hpp"

#include "CommonUI_classes.hpp"
#include "BattlePassBase_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "FortniteUI_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "BlueprintContext_classes.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class BattlePassBase.BattlePassLandingPageBase
// 0x0108 (0x0438 - 0x0330)
class UBattlePassLandingPageBase : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_330[0xF0];                                     // 0x0330(0x00F0)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassLandingPageButton*           LastHoveredPageButton;                             // 0x0420(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_428[0x10];                                     // 0x0428(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattlePassLandingPageBase">();
	}
	static class UBattlePassLandingPageBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattlePassLandingPageBase>();
	}
};
static_assert(alignof(UBattlePassLandingPageBase) == 0x000008, "Wrong alignment on UBattlePassLandingPageBase");
static_assert(sizeof(UBattlePassLandingPageBase) == 0x000438, "Wrong size on UBattlePassLandingPageBase");
static_assert(offsetof(UBattlePassLandingPageBase, LastHoveredPageButton) == 0x000420, "Member 'UBattlePassLandingPageBase::LastHoveredPageButton' has a wrong offset!");

// Class BattlePassBase.BattlePassLandingPageButton
// 0x0090 (0x0F40 - 0x0EB0)
class UBattlePassLandingPageButton : public UCommonButtonBase
{
public:
	EBattlePassView                               SubPageType;                                       // 0x0EA8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBattlePassFeatures                           FeatureType;                                       // 0x0EA9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EAA[0x6];                                      // 0x0EAA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBattlePassLandingPageEntryPreviewInfo PreviewInfo;                                       // 0x0EB0(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UFortBangWrapper_NUI*                   BangWrapper;                                       // 0x0EF0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUsesTelemetry;                                    // 0x0EF8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EF9[0x3];                                      // 0x0EF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              Telemetry_Size;                                    // 0x0EFC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntPoint                              Telemetry_Position;                                // 0x0F04(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F0C[0x34];                                     // 0x0F0C(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSubscriptionOwnershipUpdated(const bool bOwnsSubsciption);
	void OnSubscriptionTextureLoaded(class UTexture2D* Texture);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattlePassLandingPageButton">();
	}
	static class UBattlePassLandingPageButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattlePassLandingPageButton>();
	}
};
static_assert(alignof(UBattlePassLandingPageButton) == 0x000010, "Wrong alignment on UBattlePassLandingPageButton");
static_assert(sizeof(UBattlePassLandingPageButton) == 0x000F40, "Wrong size on UBattlePassLandingPageButton");
static_assert(offsetof(UBattlePassLandingPageButton, SubPageType) == 0x000EA8, "Member 'UBattlePassLandingPageButton::SubPageType' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, FeatureType) == 0x000EA9, "Member 'UBattlePassLandingPageButton::FeatureType' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, PreviewInfo) == 0x000EB0, "Member 'UBattlePassLandingPageButton::PreviewInfo' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, BangWrapper) == 0x000EF0, "Member 'UBattlePassLandingPageButton::BangWrapper' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, bUsesTelemetry) == 0x000EF8, "Member 'UBattlePassLandingPageButton::bUsesTelemetry' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, Telemetry_Size) == 0x000EFC, "Member 'UBattlePassLandingPageButton::Telemetry_Size' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, Telemetry_Position) == 0x000F04, "Member 'UBattlePassLandingPageButton::Telemetry_Position' has a wrong offset!");

// Class BattlePassBase.FortBattlePassContext
// 0x0000 (0x0030 - 0x0030)
class UFortBattlePassContext final : public UBlueprintContextBase
{
public:
	bool CanPurchaseBattlePassLevel() const;
	class FText GetCurrentChapterAsText(const bool bFullText) const;
	class FText GetCurrentSeasonNumberAsText(const bool bFullText) const;
	TArray<struct FSeasonCurrencyMcpData> GetSeasonalCurrencies() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassContext">();
	}
	static class UFortBattlePassContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassContext>();
	}
};
static_assert(alignof(UFortBattlePassContext) == 0x000008, "Wrong alignment on UFortBattlePassContext");
static_assert(sizeof(UFortBattlePassContext) == 0x000030, "Wrong size on UFortBattlePassContext");

// Class BattlePassBase.BattlePassRewardPageBase
// 0x00E8 (0x0418 - 0x0330)
class UBattlePassRewardPageBase : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_330[0xE8];                                     // 0x0330(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattlePassRewardPageBase">();
	}
	static class UBattlePassRewardPageBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattlePassRewardPageBase>();
	}
};
static_assert(alignof(UBattlePassRewardPageBase) == 0x000008, "Wrong alignment on UBattlePassRewardPageBase");
static_assert(sizeof(UBattlePassRewardPageBase) == 0x000418, "Wrong size on UBattlePassRewardPageBase");

// Class BattlePassBase.BattlePassSubPageInterface
// 0x0000 (0x0028 - 0x0028)
class IBattlePassSubPageInterface final : public IInterface
{
public:
	void OnEnterSubPage();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattlePassSubPageInterface">();
	}
	static class IBattlePassSubPageInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBattlePassSubPageInterface>();
	}
};
static_assert(alignof(IBattlePassSubPageInterface) == 0x000008, "Wrong alignment on IBattlePassSubPageInterface");
static_assert(sizeof(IBattlePassSubPageInterface) == 0x000028, "Wrong size on IBattlePassSubPageInterface");

// Class BattlePassBase.BattlePassUIGameFeatureAction
// 0x0078 (0x00A0 - 0x0028)
class UBattlePassUIGameFeatureAction final : public UFortUIGameFeatureAction
{
public:
	TSoftClassPtr<class UClass>                   BattlePassScreenClass;                             // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   BattlePassResourceWidgetClass;                     // 0x0050(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   BattlePassInfoModalClass;                          // 0x0078(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattlePassUIGameFeatureAction">();
	}
	static class UBattlePassUIGameFeatureAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattlePassUIGameFeatureAction>();
	}
};
static_assert(alignof(UBattlePassUIGameFeatureAction) == 0x000008, "Wrong alignment on UBattlePassUIGameFeatureAction");
static_assert(sizeof(UBattlePassUIGameFeatureAction) == 0x0000A0, "Wrong size on UBattlePassUIGameFeatureAction");
static_assert(offsetof(UBattlePassUIGameFeatureAction, BattlePassScreenClass) == 0x000028, "Member 'UBattlePassUIGameFeatureAction::BattlePassScreenClass' has a wrong offset!");
static_assert(offsetof(UBattlePassUIGameFeatureAction, BattlePassResourceWidgetClass) == 0x000050, "Member 'UBattlePassUIGameFeatureAction::BattlePassResourceWidgetClass' has a wrong offset!");
static_assert(offsetof(UBattlePassUIGameFeatureAction, BattlePassInfoModalClass) == 0x000078, "Member 'UBattlePassUIGameFeatureAction::BattlePassInfoModalClass' has a wrong offset!");

// Class BattlePassBase.FortBattlePassBulkBuyPageBase
// 0x0168 (0x0498 - 0x0330)
class UFortBattlePassBulkBuyPageBase : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_330[0xE8];                                     // 0x0330(0x00E8)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      Button_Addition;                                   // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Subtraction;                                // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDynamicEntryBox*                       DynamicEntryBox_TilesEntries;                      // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonVisibilitySwitcher*              Switcher_BottomButtons;                            // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortHoldableButton*                    Button_BuyLevels;                                  // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortHoldableButton*                    Button_ClaimReward;                                // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAthenaSeasonItemData_BattleStar*       SeasonData_BattleStar;                             // 0x0448(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAthenaSeasonItemDefinition*            SeasonItemDefinition;                              // 0x0450(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortBattlePassTile*                    FocusedReward;                                     // 0x0458(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_460[0x30];                                     // 0x0460(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UScrollBox*                             ScrollBox_Pages;                                   // 0x0490(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleUserScrolled(float ScrollAmount);
	void OnCostChanged(const int32 Cost);
	void OnPageRangeChanged(const int32 FromPage, const int32 ToPage);
	void OnRewardCountChanged(const int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassBulkBuyPageBase">();
	}
	static class UFortBattlePassBulkBuyPageBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassBulkBuyPageBase>();
	}
};
static_assert(alignof(UFortBattlePassBulkBuyPageBase) == 0x000008, "Wrong alignment on UFortBattlePassBulkBuyPageBase");
static_assert(sizeof(UFortBattlePassBulkBuyPageBase) == 0x000498, "Wrong size on UFortBattlePassBulkBuyPageBase");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, Button_Addition) == 0x000418, "Member 'UFortBattlePassBulkBuyPageBase::Button_Addition' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, Button_Subtraction) == 0x000420, "Member 'UFortBattlePassBulkBuyPageBase::Button_Subtraction' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, DynamicEntryBox_TilesEntries) == 0x000428, "Member 'UFortBattlePassBulkBuyPageBase::DynamicEntryBox_TilesEntries' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, Switcher_BottomButtons) == 0x000430, "Member 'UFortBattlePassBulkBuyPageBase::Switcher_BottomButtons' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, Button_BuyLevels) == 0x000438, "Member 'UFortBattlePassBulkBuyPageBase::Button_BuyLevels' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, Button_ClaimReward) == 0x000440, "Member 'UFortBattlePassBulkBuyPageBase::Button_ClaimReward' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, SeasonData_BattleStar) == 0x000448, "Member 'UFortBattlePassBulkBuyPageBase::SeasonData_BattleStar' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, SeasonItemDefinition) == 0x000450, "Member 'UFortBattlePassBulkBuyPageBase::SeasonItemDefinition' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, FocusedReward) == 0x000458, "Member 'UFortBattlePassBulkBuyPageBase::FocusedReward' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, ScrollBox_Pages) == 0x000490, "Member 'UFortBattlePassBulkBuyPageBase::ScrollBox_Pages' has a wrong offset!");

// Class BattlePassBase.FortBattlePassCheckBoxButton
// 0x0000 (0x0EB0 - 0x0EB0)
class UFortBattlePassCheckBoxButton : public UCommonButtonBase
{
public:
	void OnStateChanged(const bool bNewIsChecked);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassCheckBoxButton">();
	}
	static class UFortBattlePassCheckBoxButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassCheckBoxButton>();
	}
};
static_assert(alignof(UFortBattlePassCheckBoxButton) == 0x000010, "Wrong alignment on UFortBattlePassCheckBoxButton");
static_assert(sizeof(UFortBattlePassCheckBoxButton) == 0x000EB0, "Wrong size on UFortBattlePassCheckBoxButton");

// Class BattlePassBase.FortBattlePassCurrencyPanel
// 0x0040 (0x0288 - 0x0248)
class UFortBattlePassCurrencyPanel : public UUserWidget
{
public:
	class UHorizontalBox*                         HBox_BattleStarContainer;                          // 0x0248(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_BattleStar;                                   // 0x0250(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHorizontalBox*                         HBox_CustomSkinContainer;                          // 0x0258(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_CustomSkin;                                   // 0x0260(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_268[0x20];                                     // 0x0268(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassCurrencyPanel">();
	}
	static class UFortBattlePassCurrencyPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassCurrencyPanel>();
	}
};
static_assert(alignof(UFortBattlePassCurrencyPanel) == 0x000008, "Wrong alignment on UFortBattlePassCurrencyPanel");
static_assert(sizeof(UFortBattlePassCurrencyPanel) == 0x000288, "Wrong size on UFortBattlePassCurrencyPanel");
static_assert(offsetof(UFortBattlePassCurrencyPanel, HBox_BattleStarContainer) == 0x000248, "Member 'UFortBattlePassCurrencyPanel::HBox_BattleStarContainer' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCurrencyPanel, Text_BattleStar) == 0x000250, "Member 'UFortBattlePassCurrencyPanel::Text_BattleStar' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCurrencyPanel, HBox_CustomSkinContainer) == 0x000258, "Member 'UFortBattlePassCurrencyPanel::HBox_CustomSkinContainer' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCurrencyPanel, Text_CustomSkin) == 0x000260, "Member 'UFortBattlePassCurrencyPanel::Text_CustomSkin' has a wrong offset!");

// Class BattlePassBase.FortBattlePassCustomSkinCategoryTile
// 0x00C0 (0x0308 - 0x0248)
class UFortBattlePassCustomSkinCategoryTile final : public UUserWidget
{
public:
	uint8                                         Pad_248[0x20];                                     // 0x0248(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UProgressBar*                           ProgressBar;                                       // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortDynamicEntryBox*                   FortDynamicEntryBox_Items;                         // 0x0270(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URichTextBlock*                         Text_CategoryTitle;                                // 0x0278(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortBattlePassTile*                    PreviewedTile;                                     // 0x0280(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OwnedRewards;                                      // 0x0288(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_28C[0x7C];                                     // 0x028C(0x007C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FocusTile(const int32 Index_0);
	void OnLockedProgressUpdated(const int32 CurrentlyOwnedBeforeCategory, const int32 TotalRewardsBeforeCategory, const float LockedProgress);
	void OnLockedStateChanged(const bool bCategoryLocked);
	void OnOwnedTilesUpdated(const int32 CurrentlyOwnedRewards, const int32 TotalRewards, const float CategoryProgress);
	void SetPreviewedTile(const int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassCustomSkinCategoryTile">();
	}
	static class UFortBattlePassCustomSkinCategoryTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassCustomSkinCategoryTile>();
	}
};
static_assert(alignof(UFortBattlePassCustomSkinCategoryTile) == 0x000008, "Wrong alignment on UFortBattlePassCustomSkinCategoryTile");
static_assert(sizeof(UFortBattlePassCustomSkinCategoryTile) == 0x000308, "Wrong size on UFortBattlePassCustomSkinCategoryTile");
static_assert(offsetof(UFortBattlePassCustomSkinCategoryTile, ProgressBar) == 0x000268, "Member 'UFortBattlePassCustomSkinCategoryTile::ProgressBar' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinCategoryTile, FortDynamicEntryBox_Items) == 0x000270, "Member 'UFortBattlePassCustomSkinCategoryTile::FortDynamicEntryBox_Items' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinCategoryTile, Text_CategoryTitle) == 0x000278, "Member 'UFortBattlePassCustomSkinCategoryTile::Text_CategoryTitle' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinCategoryTile, PreviewedTile) == 0x000280, "Member 'UFortBattlePassCustomSkinCategoryTile::PreviewedTile' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinCategoryTile, OwnedRewards) == 0x000288, "Member 'UFortBattlePassCustomSkinCategoryTile::OwnedRewards' has a wrong offset!");

// Class BattlePassBase.FortBattlePassCustomSkinPageBase
// 0x0188 (0x04B8 - 0x0330)
class UFortBattlePassCustomSkinPageBase : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_330[0x168];                                    // 0x0330(0x0168)(Fixing Size After Last Property [ Dumper-7 ])
	class UScrollBox*                             ScrollBox_Categories;                              // 0x0498(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortDynamicEntryBox*                   FortDynamicEntryBox_Categories;                    // 0x04A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A8[0x8];                                      // 0x04A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassEnabledInputData*            EquipEnabledData;                                  // 0x04B0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassCustomSkinPageBase">();
	}
	static class UFortBattlePassCustomSkinPageBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassCustomSkinPageBase>();
	}
};
static_assert(alignof(UFortBattlePassCustomSkinPageBase) == 0x000008, "Wrong alignment on UFortBattlePassCustomSkinPageBase");
static_assert(sizeof(UFortBattlePassCustomSkinPageBase) == 0x0004B8, "Wrong size on UFortBattlePassCustomSkinPageBase");
static_assert(offsetof(UFortBattlePassCustomSkinPageBase, ScrollBox_Categories) == 0x000498, "Member 'UFortBattlePassCustomSkinPageBase::ScrollBox_Categories' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinPageBase, FortDynamicEntryBox_Categories) == 0x0004A0, "Member 'UFortBattlePassCustomSkinPageBase::FortDynamicEntryBox_Categories' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinPageBase, EquipEnabledData) == 0x0004B0, "Member 'UFortBattlePassCustomSkinPageBase::EquipEnabledData' has a wrong offset!");

// Class BattlePassBase.FortBattlePassPurchaseResourcesWidget
// 0x00B8 (0x03E8 - 0x0330)
class UFortBattlePassPurchaseResourcesWidget : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      Button_Addition;                                   // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_BatchAddition;                              // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Subtraction;                                // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_BatchSubtraction;                           // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortHoldableButton*                    Button_Purchase;                                   // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_GetVBucks;                                  // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_ReloadMtx;                                  // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Back;                                       // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortBattlePassCheckBoxButton*          CheckBox_Bundle;                                   // 0x0378(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_CloseMobile;                                // 0x0380(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentLevel;                                      // 0x0388(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsOfferActive;                                    // 0x038C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38D[0x3];                                      // 0x038D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentVBucks;                                     // 0x0390(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentBattleStars;                                // 0x0394(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BatchNum;                                          // 0x0398(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentPage;                                       // 0x039C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOfferUnavailable;                                 // 0x03A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A1[0x3];                                      // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxBundleLevel;                                    // 0x03A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxLevel;                                          // 0x03A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxLevelPurchases;                                 // 0x03AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BundleAmount;                                      // 0x03B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B4[0x4];                                      // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemDefinition*                    LevelPreviewItem;                                  // 0x03B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C0[0x28];                                     // 0x03C0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePurchaseComplete(bool bSuccess, const TArray<struct FPurchasedItemInfo>& PurchasedItems, const class FString& OfferId);
	void HandlePurchaseMultiComplete(bool bSuccess, const TArray<struct FPurchasedItemInfo>& PurchasedItems, const TArray<class FString>& OfferIdList);
	bool IsReloadMtxEnabled();
	void OnAmountChangeButtonClicked();
	void OnOfferUnavailable();
	void OnPurchaseAmountChanged(const int32 NewAmount, const int32 LevelsLeft);
	void OnTotalPriceChanged(const int32 NewPrice);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassPurchaseResourcesWidget">();
	}
	static class UFortBattlePassPurchaseResourcesWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassPurchaseResourcesWidget>();
	}
};
static_assert(alignof(UFortBattlePassPurchaseResourcesWidget) == 0x000008, "Wrong alignment on UFortBattlePassPurchaseResourcesWidget");
static_assert(sizeof(UFortBattlePassPurchaseResourcesWidget) == 0x0003E8, "Wrong size on UFortBattlePassPurchaseResourcesWidget");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_Addition) == 0x000338, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_Addition' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_BatchAddition) == 0x000340, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_BatchAddition' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_Subtraction) == 0x000348, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_Subtraction' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_BatchSubtraction) == 0x000350, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_BatchSubtraction' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_Purchase) == 0x000358, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_Purchase' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_GetVBucks) == 0x000360, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_GetVBucks' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_ReloadMtx) == 0x000368, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_ReloadMtx' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_Back) == 0x000370, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_Back' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, CheckBox_Bundle) == 0x000378, "Member 'UFortBattlePassPurchaseResourcesWidget::CheckBox_Bundle' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_CloseMobile) == 0x000380, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_CloseMobile' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, CurrentLevel) == 0x000388, "Member 'UFortBattlePassPurchaseResourcesWidget::CurrentLevel' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, bIsOfferActive) == 0x00038C, "Member 'UFortBattlePassPurchaseResourcesWidget::bIsOfferActive' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, CurrentVBucks) == 0x000390, "Member 'UFortBattlePassPurchaseResourcesWidget::CurrentVBucks' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, CurrentBattleStars) == 0x000394, "Member 'UFortBattlePassPurchaseResourcesWidget::CurrentBattleStars' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, BatchNum) == 0x000398, "Member 'UFortBattlePassPurchaseResourcesWidget::BatchNum' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, CurrentPage) == 0x00039C, "Member 'UFortBattlePassPurchaseResourcesWidget::CurrentPage' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, bOfferUnavailable) == 0x0003A0, "Member 'UFortBattlePassPurchaseResourcesWidget::bOfferUnavailable' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, MaxBundleLevel) == 0x0003A4, "Member 'UFortBattlePassPurchaseResourcesWidget::MaxBundleLevel' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, MaxLevel) == 0x0003A8, "Member 'UFortBattlePassPurchaseResourcesWidget::MaxLevel' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, MaxLevelPurchases) == 0x0003AC, "Member 'UFortBattlePassPurchaseResourcesWidget::MaxLevelPurchases' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, BundleAmount) == 0x0003B0, "Member 'UFortBattlePassPurchaseResourcesWidget::BundleAmount' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, LevelPreviewItem) == 0x0003B8, "Member 'UFortBattlePassPurchaseResourcesWidget::LevelPreviewItem' has a wrong offset!");

// Class BattlePassBase.FortBattlePassResourceCounter
// 0x0028 (0x0298 - 0x0270)
class UFortBattlePassResourceCounter : public UCommonUserWidget
{
public:
	class UCommonTextBlock*                       Text_ResourceName;                                 // 0x0270(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortLazyImage*                         LazyImage_ResourceIcon;                            // 0x0278(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_ResourceCount;                                // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_288[0x10];                                     // 0x0288(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassResourceCounter">();
	}
	static class UFortBattlePassResourceCounter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassResourceCounter>();
	}
};
static_assert(alignof(UFortBattlePassResourceCounter) == 0x000008, "Wrong alignment on UFortBattlePassResourceCounter");
static_assert(sizeof(UFortBattlePassResourceCounter) == 0x000298, "Wrong size on UFortBattlePassResourceCounter");
static_assert(offsetof(UFortBattlePassResourceCounter, Text_ResourceName) == 0x000270, "Member 'UFortBattlePassResourceCounter::Text_ResourceName' has a wrong offset!");
static_assert(offsetof(UFortBattlePassResourceCounter, LazyImage_ResourceIcon) == 0x000278, "Member 'UFortBattlePassResourceCounter::LazyImage_ResourceIcon' has a wrong offset!");
static_assert(offsetof(UFortBattlePassResourceCounter, Text_ResourceCount) == 0x000280, "Member 'UFortBattlePassResourceCounter::Text_ResourceCount' has a wrong offset!");

// Class BattlePassBase.FortBattlePassResourcesWidgetBase
// 0x0038 (0x02A8 - 0x0270)
class UFortBattlePassResourcesWidgetBase : public UFortGlobalSeasonResourceWidget
{
public:
	TSubclassOf<class UFortBattlePassResourceCounter> ResourceCounterClass;                              // 0x0270(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   MoreInfoModal;                                     // 0x0278(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDynamicEntryBox*                       EntryBox_ResourceCounters;                         // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ShowResourcesInfoModal();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassResourcesWidgetBase">();
	}
	static class UFortBattlePassResourcesWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassResourcesWidgetBase>();
	}
};
static_assert(alignof(UFortBattlePassResourcesWidgetBase) == 0x000008, "Wrong alignment on UFortBattlePassResourcesWidgetBase");
static_assert(sizeof(UFortBattlePassResourcesWidgetBase) == 0x0002A8, "Wrong size on UFortBattlePassResourcesWidgetBase");
static_assert(offsetof(UFortBattlePassResourcesWidgetBase, ResourceCounterClass) == 0x000270, "Member 'UFortBattlePassResourcesWidgetBase::ResourceCounterClass' has a wrong offset!");
static_assert(offsetof(UFortBattlePassResourcesWidgetBase, MoreInfoModal) == 0x000278, "Member 'UFortBattlePassResourcesWidgetBase::MoreInfoModal' has a wrong offset!");
static_assert(offsetof(UFortBattlePassResourcesWidgetBase, EntryBox_ResourceCounters) == 0x0002A0, "Member 'UFortBattlePassResourcesWidgetBase::EntryBox_ResourceCounters' has a wrong offset!");

// Class BattlePassBase.FortBattlePassRewardGrid
// 0x00C8 (0x03F8 - 0x0330)
class UFortBattlePassRewardGrid : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_330[0x68];                                     // 0x0330(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortBattlePassTileBase>    GridTileClass;                                     // 0x0398(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortBattlePassTileBase>    GridEmptyTileClass;                                // 0x03A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              GridCellPadding;                                   // 0x03A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortBattlePassRewardGridHeader*        PageHeader;                                        // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGridPanel*                             GridPanel_Rewards;                                 // 0x03B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortBattlePassTileBase*                TopLeftTile;                                       // 0x03C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UCommonButtonBase>       LastFocusedTile;                                   // 0x03C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D0[0x28];                                     // 0x03D0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPageSelected();
	void OnPageUnselected();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassRewardGrid">();
	}
	static class UFortBattlePassRewardGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassRewardGrid>();
	}
};
static_assert(alignof(UFortBattlePassRewardGrid) == 0x000008, "Wrong alignment on UFortBattlePassRewardGrid");
static_assert(sizeof(UFortBattlePassRewardGrid) == 0x0003F8, "Wrong size on UFortBattlePassRewardGrid");
static_assert(offsetof(UFortBattlePassRewardGrid, GridTileClass) == 0x000398, "Member 'UFortBattlePassRewardGrid::GridTileClass' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardGrid, GridEmptyTileClass) == 0x0003A0, "Member 'UFortBattlePassRewardGrid::GridEmptyTileClass' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardGrid, GridCellPadding) == 0x0003A8, "Member 'UFortBattlePassRewardGrid::GridCellPadding' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardGrid, PageHeader) == 0x0003B0, "Member 'UFortBattlePassRewardGrid::PageHeader' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardGrid, GridPanel_Rewards) == 0x0003B8, "Member 'UFortBattlePassRewardGrid::GridPanel_Rewards' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardGrid, TopLeftTile) == 0x0003C0, "Member 'UFortBattlePassRewardGrid::TopLeftTile' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardGrid, LastFocusedTile) == 0x0003C8, "Member 'UFortBattlePassRewardGrid::LastFocusedTile' has a wrong offset!");

// Class BattlePassBase.FortBattlePassRewardGridHeader
// 0x0008 (0x0250 - 0x0248)
class UFortBattlePassRewardGridHeader : public UUserWidget
{
public:
	uint8                                         Pad_248[0x8];                                      // 0x0248(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBattlePassLevelSet(const int32 BattlePassLevel);
	void OnPageLocked(const int32 RequiredLevel, const int32 RequiredRewards);
	void OnPageNumberSet(const int32 InPageNumber);
	void OnPageUnlocked(const int32 PurchasedRewards, const int32 TotalRewards);
	void OnSetPageCustomName(const class FText& CustomName);
	void OnSetPageType(const ERewardPageType PageType);

	int32 GetPageNumber() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassRewardGridHeader">();
	}
	static class UFortBattlePassRewardGridHeader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassRewardGridHeader>();
	}
};
static_assert(alignof(UFortBattlePassRewardGridHeader) == 0x000008, "Wrong alignment on UFortBattlePassRewardGridHeader");
static_assert(sizeof(UFortBattlePassRewardGridHeader) == 0x000250, "Wrong size on UFortBattlePassRewardGridHeader");

// Class BattlePassBase.FortBattlePassTileBase
// 0x0050 (0x0F80 - 0x0F30)
class UFortBattlePassTileBase : public UFortHoldableButton
{
public:
	class USizeBox*                               SizeBox_Content;                                   // 0x0F30(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         UnitHeight;                                        // 0x0F38(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         UnitWidth;                                         // 0x0F3C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F40[0x40];                                     // 0x0F40(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPeeked();
	void OnRevealed();
	void OnSetRequiresBattlePass(const bool bRequiresBP);
	void OnSizeChanged(const struct FVector2D& NewSize);
	void OnStateChanged(const EBattlePassTileAvailabilityStates NewState);
	void SetSize(const EPageItemTileSize TileSize, const struct FVector2D& CellSpacing);
	void SetState(const EBattlePassTileAvailabilityStates NewState);

	const EBattlePassTileAvailabilityStates GetState() const;
	bool IsAvailable() const;
	bool IsLocked() const;
	bool IsOwned() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassTileBase">();
	}
	static class UFortBattlePassTileBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassTileBase>();
	}
};
static_assert(alignof(UFortBattlePassTileBase) == 0x000010, "Wrong alignment on UFortBattlePassTileBase");
static_assert(sizeof(UFortBattlePassTileBase) == 0x000F80, "Wrong size on UFortBattlePassTileBase");
static_assert(offsetof(UFortBattlePassTileBase, SizeBox_Content) == 0x000F30, "Member 'UFortBattlePassTileBase::SizeBox_Content' has a wrong offset!");
static_assert(offsetof(UFortBattlePassTileBase, UnitHeight) == 0x000F38, "Member 'UFortBattlePassTileBase::UnitHeight' has a wrong offset!");
static_assert(offsetof(UFortBattlePassTileBase, UnitWidth) == 0x000F3C, "Member 'UFortBattlePassTileBase::UnitWidth' has a wrong offset!");

// Class BattlePassBase.FortBattlePassTile
// 0x0060 (0x0FE0 - 0x0F80)
class UFortBattlePassTile : public UFortBattlePassTileBase
{
public:
	uint8                                         Pad_F80[0x10];                                     // 0x0F80(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortLazyImage*                         Image_RewardItem;                                  // 0x0F90(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Image_Currency;                                    // 0x0F98(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FA0[0x40];                                     // 0x0FA0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAffordabilityChanged(const bool bHasEnougCurrency);
	void OnHighlighted();
	void OnLockedProgressUpdated(const float Progress, const int32 CurrentlyOwnedRewards, const int32 NeededRewards);
	void OnLockedStateUpdated(const bool OwnsBattlePass, const bool ParentUnlocked, const bool HasRemainingPrerequisites, const bool bIsDelayed);
	void OnPreviewed();
	void OnSetCurrencyAndPrice(const EBattlePassCurrencyType Currency, const int32 Price);
	void OnSetTrack(const bool bIsFreeTrack, const bool bOwnsBattlePass);
	void OnTilePreviewCycled();
	void OnUnhighlighted();
	void OnUnpreviewed();

	bool HasPrerequisites() const;
	bool IsAffordable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassTile">();
	}
	static class UFortBattlePassTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassTile>();
	}
};
static_assert(alignof(UFortBattlePassTile) == 0x000010, "Wrong alignment on UFortBattlePassTile");
static_assert(sizeof(UFortBattlePassTile) == 0x000FE0, "Wrong size on UFortBattlePassTile");
static_assert(offsetof(UFortBattlePassTile, Image_RewardItem) == 0x000F90, "Member 'UFortBattlePassTile::Image_RewardItem' has a wrong offset!");
static_assert(offsetof(UFortBattlePassTile, Image_Currency) == 0x000F98, "Member 'UFortBattlePassTile::Image_Currency' has a wrong offset!");

// Class BattlePassBase.FortBattlePassTutorialTooltip
// 0x0010 (0x0280 - 0x0270)
class UFortBattlePassTutorialTooltip : public UCommonUserWidget
{
public:
	class UCommonRichTextBlock*                   Text_Tooltip;                                      // 0x0270(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_278[0x8];                                      // 0x0278(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideTooltip();
	void SetText(const class FText& Text);
	void SetTooltipEnabled(const bool bEnable);
	void ShowTooltip();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassTutorialTooltip">();
	}
	static class UFortBattlePassTutorialTooltip* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassTutorialTooltip>();
	}
};
static_assert(alignof(UFortBattlePassTutorialTooltip) == 0x000008, "Wrong alignment on UFortBattlePassTutorialTooltip");
static_assert(sizeof(UFortBattlePassTutorialTooltip) == 0x000280, "Wrong size on UFortBattlePassTutorialTooltip");
static_assert(offsetof(UFortBattlePassTutorialTooltip, Text_Tooltip) == 0x000270, "Member 'UFortBattlePassTutorialTooltip::Text_Tooltip' has a wrong offset!");

}

