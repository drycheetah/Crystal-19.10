#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MadmanRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function MadmanRuntime.FortAthenaMutator_Madman_PlayerSpawnPod.OnGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMutator_Madman_PlayerSpawnPod_OnGamePhaseChanged final
{
public:
	EAthenaGamePhase                              NewPhase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Madman_PlayerSpawnPod_OnGamePhaseChanged) == 0x000001, "Wrong alignment on FortAthenaMutator_Madman_PlayerSpawnPod_OnGamePhaseChanged");
static_assert(sizeof(FortAthenaMutator_Madman_PlayerSpawnPod_OnGamePhaseChanged) == 0x000001, "Wrong size on FortAthenaMutator_Madman_PlayerSpawnPod_OnGamePhaseChanged");
static_assert(offsetof(FortAthenaMutator_Madman_PlayerSpawnPod_OnGamePhaseChanged, NewPhase) == 0x000000, "Member 'FortAthenaMutator_Madman_PlayerSpawnPod_OnGamePhaseChanged::NewPhase' has a wrong offset!");

// Function MadmanRuntime.SpawnCampingDetection_PawnComponent.OnDamaged
// 0x0050 (0x0050 - 0x0000)
struct SpawnCampingDetection_PawnComponent_OnDamaged final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0040(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpawnCampingDetection_PawnComponent_OnDamaged) == 0x000008, "Wrong alignment on SpawnCampingDetection_PawnComponent_OnDamaged");
static_assert(sizeof(SpawnCampingDetection_PawnComponent_OnDamaged) == 0x000050, "Wrong size on SpawnCampingDetection_PawnComponent_OnDamaged");
static_assert(offsetof(SpawnCampingDetection_PawnComponent_OnDamaged, DamagedActor) == 0x000000, "Member 'SpawnCampingDetection_PawnComponent_OnDamaged::DamagedActor' has a wrong offset!");
static_assert(offsetof(SpawnCampingDetection_PawnComponent_OnDamaged, Damage) == 0x000008, "Member 'SpawnCampingDetection_PawnComponent_OnDamaged::Damage' has a wrong offset!");
static_assert(offsetof(SpawnCampingDetection_PawnComponent_OnDamaged, InstigatedBy) == 0x000010, "Member 'SpawnCampingDetection_PawnComponent_OnDamaged::InstigatedBy' has a wrong offset!");
static_assert(offsetof(SpawnCampingDetection_PawnComponent_OnDamaged, DamageCauser) == 0x000018, "Member 'SpawnCampingDetection_PawnComponent_OnDamaged::DamageCauser' has a wrong offset!");
static_assert(offsetof(SpawnCampingDetection_PawnComponent_OnDamaged, HitLocation) == 0x000020, "Member 'SpawnCampingDetection_PawnComponent_OnDamaged::HitLocation' has a wrong offset!");
static_assert(offsetof(SpawnCampingDetection_PawnComponent_OnDamaged, FHitComponent) == 0x000030, "Member 'SpawnCampingDetection_PawnComponent_OnDamaged::FHitComponent' has a wrong offset!");
static_assert(offsetof(SpawnCampingDetection_PawnComponent_OnDamaged, BoneName) == 0x000038, "Member 'SpawnCampingDetection_PawnComponent_OnDamaged::BoneName' has a wrong offset!");
static_assert(offsetof(SpawnCampingDetection_PawnComponent_OnDamaged, Momentum) == 0x000040, "Member 'SpawnCampingDetection_PawnComponent_OnDamaged::Momentum' has a wrong offset!");

// Function MadmanRuntime.FortCheatManager_SpawnCampingDetection.SpawnCampingDetectionSetEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_SpawnCampingDetection_SpawnCampingDetectionSetEnabled final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SpawnCampingDetection_SpawnCampingDetectionSetEnabled) == 0x000001, "Wrong alignment on FortCheatManager_SpawnCampingDetection_SpawnCampingDetectionSetEnabled");
static_assert(sizeof(FortCheatManager_SpawnCampingDetection_SpawnCampingDetectionSetEnabled) == 0x000001, "Wrong size on FortCheatManager_SpawnCampingDetection_SpawnCampingDetectionSetEnabled");
static_assert(offsetof(FortCheatManager_SpawnCampingDetection_SpawnCampingDetectionSetEnabled, bInEnable) == 0x000000, "Member 'FortCheatManager_SpawnCampingDetection_SpawnCampingDetectionSetEnabled::bInEnable' has a wrong offset!");

// Function MadmanRuntime.FortCheatManager_SpawnCampingDetection.SpawnCampingDetectionTriggerSpawnCamp
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_SpawnCampingDetection_SpawnCampingDetectionTriggerSpawnCamp final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnCampType;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SpawnCampingDetection_SpawnCampingDetectionTriggerSpawnCamp) == 0x000004, "Wrong alignment on FortCheatManager_SpawnCampingDetection_SpawnCampingDetectionTriggerSpawnCamp");
static_assert(sizeof(FortCheatManager_SpawnCampingDetection_SpawnCampingDetectionTriggerSpawnCamp) == 0x000008, "Wrong size on FortCheatManager_SpawnCampingDetection_SpawnCampingDetectionTriggerSpawnCamp");
static_assert(offsetof(FortCheatManager_SpawnCampingDetection_SpawnCampingDetectionTriggerSpawnCamp, TeamId) == 0x000000, "Member 'FortCheatManager_SpawnCampingDetection_SpawnCampingDetectionTriggerSpawnCamp::TeamId' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SpawnCampingDetection_SpawnCampingDetectionTriggerSpawnCamp, SpawnCampType) == 0x000004, "Member 'FortCheatManager_SpawnCampingDetection_SpawnCampingDetectionTriggerSpawnCamp::SpawnCampType' has a wrong offset!");

// Function MadmanRuntime.FortAthenaMutator_SpawnCampingDetection.AreSpawnLocationSuggestionsOnCooldown
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMutator_SpawnCampingDetection_AreSpawnLocationSuggestionsOnCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_SpawnCampingDetection_AreSpawnLocationSuggestionsOnCooldown) == 0x000001, "Wrong alignment on FortAthenaMutator_SpawnCampingDetection_AreSpawnLocationSuggestionsOnCooldown");
static_assert(sizeof(FortAthenaMutator_SpawnCampingDetection_AreSpawnLocationSuggestionsOnCooldown) == 0x000001, "Wrong size on FortAthenaMutator_SpawnCampingDetection_AreSpawnLocationSuggestionsOnCooldown");
static_assert(offsetof(FortAthenaMutator_SpawnCampingDetection_AreSpawnLocationSuggestionsOnCooldown, ReturnValue) == 0x000000, "Member 'FortAthenaMutator_SpawnCampingDetection_AreSpawnLocationSuggestionsOnCooldown::ReturnValue' has a wrong offset!");

}

