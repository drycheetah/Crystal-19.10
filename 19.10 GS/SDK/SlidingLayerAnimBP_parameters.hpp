#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SlidingLayerAnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function SlidingLayerAnimBP.SlidingLayerAnimBP_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct SlidingLayerAnimBP_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(SlidingLayerAnimBP_C_AnimGraph) == 0x000008, "Wrong alignment on SlidingLayerAnimBP_C_AnimGraph");
static_assert(sizeof(SlidingLayerAnimBP_C_AnimGraph) == 0x000010, "Wrong size on SlidingLayerAnimBP_C_AnimGraph");
static_assert(offsetof(SlidingLayerAnimBP_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'SlidingLayerAnimBP_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function SlidingLayerAnimBP.SlidingLayerAnimBP_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct SlidingLayerAnimBP_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SlidingLayerAnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on SlidingLayerAnimBP_C_BlueprintUpdateAnimation");
static_assert(sizeof(SlidingLayerAnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on SlidingLayerAnimBP_C_BlueprintUpdateAnimation");
static_assert(offsetof(SlidingLayerAnimBP_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'SlidingLayerAnimBP_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function SlidingLayerAnimBP.SlidingLayerAnimBP_C.Correct Yaw Value
// 0x00C0 (0x00C0 - 0x0000)
struct SlidingLayerAnimBP_C_Correct_Yaw_Value final
{
public:
	struct FRotator                               InRot;                                             // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CallFunc_Conv_RotatorToQuaternion_ReturnValue;     // 0x0020(0x0010)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CallFunc_Conv_RotatorToQuaternion_ReturnValue_1;   // 0x0070(0x0010)(IsPlainOldData, NoDestructor)
	struct FQuat                                  CallFunc_Conv_RotatorToQuaternion_ReturnValue_2;   // 0x0080(0x0010)(IsPlainOldData, NoDestructor)
	struct FQuat                                  CallFunc_Multiply_QuatQuat_ReturnValue;            // 0x0090(0x0010)(IsPlainOldData, NoDestructor)
	struct FQuat                                  CallFunc_Multiply_QuatQuat_ReturnValue_1;          // 0x00A0(0x0010)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Quat_Rotator_ReturnValue;                 // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SlidingLayerAnimBP_C_Correct_Yaw_Value) == 0x000010, "Wrong alignment on SlidingLayerAnimBP_C_Correct_Yaw_Value");
static_assert(sizeof(SlidingLayerAnimBP_C_Correct_Yaw_Value) == 0x0000C0, "Wrong size on SlidingLayerAnimBP_C_Correct_Yaw_Value");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, InRot) == 0x000000, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::InRot' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, ReturnValue) == 0x00000C, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::ReturnValue' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, CallFunc_Conv_RotatorToQuaternion_ReturnValue) == 0x000020, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::CallFunc_Conv_RotatorToQuaternion_ReturnValue' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, CallFunc_BreakRotator_Roll) == 0x000030, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, CallFunc_BreakRotator_Pitch) == 0x000034, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, CallFunc_BreakRotator_Yaw) == 0x000038, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, CallFunc_BreakRotator_Roll_1) == 0x00003C, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, CallFunc_BreakRotator_Pitch_1) == 0x000040, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, CallFunc_BreakRotator_Yaw_1) == 0x000044, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000048, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00004C, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, CallFunc_MakeRotator_ReturnValue) == 0x000050, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, CallFunc_MakeRotator_ReturnValue_1) == 0x00005C, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, CallFunc_Conv_RotatorToQuaternion_ReturnValue_1) == 0x000070, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::CallFunc_Conv_RotatorToQuaternion_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, CallFunc_Conv_RotatorToQuaternion_ReturnValue_2) == 0x000080, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::CallFunc_Conv_RotatorToQuaternion_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, CallFunc_Multiply_QuatQuat_ReturnValue) == 0x000090, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::CallFunc_Multiply_QuatQuat_ReturnValue' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, CallFunc_Multiply_QuatQuat_ReturnValue_1) == 0x0000A0, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::CallFunc_Multiply_QuatQuat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_Correct_Yaw_Value, CallFunc_Quat_Rotator_ReturnValue) == 0x0000B0, "Member 'SlidingLayerAnimBP_C_Correct_Yaw_Value::CallFunc_Quat_Rotator_ReturnValue' has a wrong offset!");

// Function SlidingLayerAnimBP.SlidingLayerAnimBP_C.ExecuteUbergraph_SlidingLayerAnimBP
// 0x0008 (0x0008 - 0x0000)
struct SlidingLayerAnimBP_C_ExecuteUbergraph_SlidingLayerAnimBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SlidingLayerAnimBP_C_ExecuteUbergraph_SlidingLayerAnimBP) == 0x000004, "Wrong alignment on SlidingLayerAnimBP_C_ExecuteUbergraph_SlidingLayerAnimBP");
static_assert(sizeof(SlidingLayerAnimBP_C_ExecuteUbergraph_SlidingLayerAnimBP) == 0x000008, "Wrong size on SlidingLayerAnimBP_C_ExecuteUbergraph_SlidingLayerAnimBP");
static_assert(offsetof(SlidingLayerAnimBP_C_ExecuteUbergraph_SlidingLayerAnimBP, EntryPoint) == 0x000000, "Member 'SlidingLayerAnimBP_C_ExecuteUbergraph_SlidingLayerAnimBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_ExecuteUbergraph_SlidingLayerAnimBP, K2Node_Event_DeltaTimeX) == 0x000004, "Member 'SlidingLayerAnimBP_C_ExecuteUbergraph_SlidingLayerAnimBP::K2Node_Event_DeltaTimeX' has a wrong offset!");

// Function SlidingLayerAnimBP.SlidingLayerAnimBP_C.MovementMode_LocomotionUpperBodyAdditive
// 0x0030 (0x0030 - 0x0000)
struct SlidingLayerAnimBP_C_MovementMode_LocomotionUpperBodyAdditive final
{
public:
	struct FPoseLink                              InPose_0;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              IdleAdditive_CachedPose;                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              MovementMode_LocomotionUpperBodyAdditive_0;        // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(SlidingLayerAnimBP_C_MovementMode_LocomotionUpperBodyAdditive) == 0x000008, "Wrong alignment on SlidingLayerAnimBP_C_MovementMode_LocomotionUpperBodyAdditive");
static_assert(sizeof(SlidingLayerAnimBP_C_MovementMode_LocomotionUpperBodyAdditive) == 0x000030, "Wrong size on SlidingLayerAnimBP_C_MovementMode_LocomotionUpperBodyAdditive");
static_assert(offsetof(SlidingLayerAnimBP_C_MovementMode_LocomotionUpperBodyAdditive, InPose_0) == 0x000000, "Member 'SlidingLayerAnimBP_C_MovementMode_LocomotionUpperBodyAdditive::InPose_0' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_MovementMode_LocomotionUpperBodyAdditive, IdleAdditive_CachedPose) == 0x000010, "Member 'SlidingLayerAnimBP_C_MovementMode_LocomotionUpperBodyAdditive::IdleAdditive_CachedPose' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_MovementMode_LocomotionUpperBodyAdditive, MovementMode_LocomotionUpperBodyAdditive_0) == 0x000020, "Member 'SlidingLayerAnimBP_C_MovementMode_LocomotionUpperBodyAdditive::MovementMode_LocomotionUpperBodyAdditive_0' has a wrong offset!");

// Function SlidingLayerAnimBP.SlidingLayerAnimBP_C.MovementMode_LowerBodyOverride
// 0x0020 (0x0020 - 0x0000)
struct SlidingLayerAnimBP_C_MovementMode_LowerBodyOverride final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              MovementMode_LowerBodyOverride_0;                  // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(SlidingLayerAnimBP_C_MovementMode_LowerBodyOverride) == 0x000008, "Wrong alignment on SlidingLayerAnimBP_C_MovementMode_LowerBodyOverride");
static_assert(sizeof(SlidingLayerAnimBP_C_MovementMode_LowerBodyOverride) == 0x000020, "Wrong size on SlidingLayerAnimBP_C_MovementMode_LowerBodyOverride");
static_assert(offsetof(SlidingLayerAnimBP_C_MovementMode_LowerBodyOverride, InPose) == 0x000000, "Member 'SlidingLayerAnimBP_C_MovementMode_LowerBodyOverride::InPose' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_MovementMode_LowerBodyOverride, MovementMode_LowerBodyOverride_0) == 0x000010, "Member 'SlidingLayerAnimBP_C_MovementMode_LowerBodyOverride::MovementMode_LowerBodyOverride_0' has a wrong offset!");

// Function SlidingLayerAnimBP.SlidingLayerAnimBP_C.MovementMode_UpperBodyPose
// 0x0030 (0x0030 - 0x0000)
struct SlidingLayerAnimBP_C_MovementMode_UpperBodyPose final
{
public:
	struct FPoseLink                              UppperBodyPose_BasePose;                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              UpperBodyPose_AdditiveIdentityPose;                // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              MovementMode_UpperBodyPose_0;                      // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(SlidingLayerAnimBP_C_MovementMode_UpperBodyPose) == 0x000008, "Wrong alignment on SlidingLayerAnimBP_C_MovementMode_UpperBodyPose");
static_assert(sizeof(SlidingLayerAnimBP_C_MovementMode_UpperBodyPose) == 0x000030, "Wrong size on SlidingLayerAnimBP_C_MovementMode_UpperBodyPose");
static_assert(offsetof(SlidingLayerAnimBP_C_MovementMode_UpperBodyPose, UppperBodyPose_BasePose) == 0x000000, "Member 'SlidingLayerAnimBP_C_MovementMode_UpperBodyPose::UppperBodyPose_BasePose' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_MovementMode_UpperBodyPose, UpperBodyPose_AdditiveIdentityPose) == 0x000010, "Member 'SlidingLayerAnimBP_C_MovementMode_UpperBodyPose::UpperBodyPose_AdditiveIdentityPose' has a wrong offset!");
static_assert(offsetof(SlidingLayerAnimBP_C_MovementMode_UpperBodyPose, MovementMode_UpperBodyPose_0) == 0x000020, "Member 'SlidingLayerAnimBP_C_MovementMode_UpperBodyPose::MovementMode_UpperBodyPose_0' has a wrong offset!");

}

