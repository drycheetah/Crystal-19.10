#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DiscoveryBrowserUI

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "SlateCore_structs.hpp"
#include "DiscoveryBrowserUI_structs.hpp"


namespace SDK::Params
{

// Function DiscoveryBrowserUI.FortActivityBrowserTabButton.OnFavoriteChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserTabButton_OnFavoriteChanged final
{
public:
	bool                                          bIsFavorite;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserTabButton_OnFavoriteChanged) == 0x000001, "Wrong alignment on FortActivityBrowserTabButton_OnFavoriteChanged");
static_assert(sizeof(FortActivityBrowserTabButton_OnFavoriteChanged) == 0x000001, "Wrong size on FortActivityBrowserTabButton_OnFavoriteChanged");
static_assert(offsetof(FortActivityBrowserTabButton_OnFavoriteChanged, bIsFavorite) == 0x000000, "Member 'FortActivityBrowserTabButton_OnFavoriteChanged::bIsFavorite' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowser.HandleTabChanged
// 0x0008 (0x0008 - 0x0000)
struct FortActivityBrowser_HandleTabChanged final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowser_HandleTabChanged) == 0x000004, "Wrong alignment on FortActivityBrowser_HandleTabChanged");
static_assert(sizeof(FortActivityBrowser_HandleTabChanged) == 0x000008, "Wrong size on FortActivityBrowser_HandleTabChanged");
static_assert(offsetof(FortActivityBrowser_HandleTabChanged, TabId) == 0x000000, "Member 'FortActivityBrowser_HandleTabChanged::TabId' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowser.OnPlayerQueueTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowser_OnPlayerQueueTypeChanged final
{
public:
	EPlayerQueueType                              PlayerQueueType;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowser_OnPlayerQueueTypeChanged) == 0x000001, "Wrong alignment on FortActivityBrowser_OnPlayerQueueTypeChanged");
static_assert(sizeof(FortActivityBrowser_OnPlayerQueueTypeChanged) == 0x000001, "Wrong size on FortActivityBrowser_OnPlayerQueueTypeChanged");
static_assert(offsetof(FortActivityBrowser_OnPlayerQueueTypeChanged, PlayerQueueType) == 0x000000, "Member 'FortActivityBrowser_OnPlayerQueueTypeChanged::PlayerQueueType' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.OnCategoryItemChanged
// 0x0002 (0x0002 - 0x0000)
struct FortActivityBrowserRow_OnCategoryItemChanged final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayAnimation;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_OnCategoryItemChanged) == 0x000001, "Wrong alignment on FortActivityBrowserRow_OnCategoryItemChanged");
static_assert(sizeof(FortActivityBrowserRow_OnCategoryItemChanged) == 0x000002, "Wrong size on FortActivityBrowserRow_OnCategoryItemChanged");
static_assert(offsetof(FortActivityBrowserRow_OnCategoryItemChanged, bIsActive) == 0x000000, "Member 'FortActivityBrowserRow_OnCategoryItemChanged::bIsActive' has a wrong offset!");
static_assert(offsetof(FortActivityBrowserRow_OnCategoryItemChanged, bPlayAnimation) == 0x000001, "Member 'FortActivityBrowserRow_OnCategoryItemChanged::bPlayAnimation' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.OnRowIsActiveChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_OnRowIsActiveChanged final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_OnRowIsActiveChanged) == 0x000001, "Wrong alignment on FortActivityBrowserRow_OnRowIsActiveChanged");
static_assert(sizeof(FortActivityBrowserRow_OnRowIsActiveChanged) == 0x000001, "Wrong size on FortActivityBrowserRow_OnRowIsActiveChanged");
static_assert(offsetof(FortActivityBrowserRow_OnRowIsActiveChanged, bIsActive) == 0x000000, "Member 'FortActivityBrowserRow_OnRowIsActiveChanged::bIsActive' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.OnRowPeekStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_OnRowPeekStateChanged final
{
public:
	bool                                          bIsInPeekState;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_OnRowPeekStateChanged) == 0x000001, "Wrong alignment on FortActivityBrowserRow_OnRowPeekStateChanged");
static_assert(sizeof(FortActivityBrowserRow_OnRowPeekStateChanged) == 0x000001, "Wrong size on FortActivityBrowserRow_OnRowPeekStateChanged");
static_assert(offsetof(FortActivityBrowserRow_OnRowPeekStateChanged, bIsInPeekState) == 0x000000, "Member 'FortActivityBrowserRow_OnRowPeekStateChanged::bIsInPeekState' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.GetIsActive
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_GetIsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_GetIsActive) == 0x000001, "Wrong alignment on FortActivityBrowserRow_GetIsActive");
static_assert(sizeof(FortActivityBrowserRow_GetIsActive) == 0x000001, "Wrong size on FortActivityBrowserRow_GetIsActive");
static_assert(offsetof(FortActivityBrowserRow_GetIsActive, ReturnValue) == 0x000000, "Member 'FortActivityBrowserRow_GetIsActive::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.GetIsInPeekState
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_GetIsInPeekState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_GetIsInPeekState) == 0x000001, "Wrong alignment on FortActivityBrowserRow_GetIsInPeekState");
static_assert(sizeof(FortActivityBrowserRow_GetIsInPeekState) == 0x000001, "Wrong size on FortActivityBrowserRow_GetIsInPeekState");
static_assert(offsetof(FortActivityBrowserRow_GetIsInPeekState, ReturnValue) == 0x000000, "Member 'FortActivityBrowserRow_GetIsInPeekState::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowList.OnQueryStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRowList_OnQueryStatusChanged final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowList_OnQueryStatusChanged) == 0x000001, "Wrong alignment on FortActivityBrowserRowList_OnQueryStatusChanged");
static_assert(sizeof(FortActivityBrowserRowList_OnQueryStatusChanged) == 0x000001, "Wrong size on FortActivityBrowserRowList_OnQueryStatusChanged");
static_assert(offsetof(FortActivityBrowserRowList_OnQueryStatusChanged, bIsActive) == 0x000000, "Member 'FortActivityBrowserRowList_OnQueryStatusChanged::bIsActive' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowPromoted.OnPreviewImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivityBrowserRowPromoted_OnPreviewImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowPromoted_OnPreviewImageChanged) == 0x000008, "Wrong alignment on FortActivityBrowserRowPromoted_OnPreviewImageChanged");
static_assert(sizeof(FortActivityBrowserRowPromoted_OnPreviewImageChanged) == 0x000010, "Wrong size on FortActivityBrowserRowPromoted_OnPreviewImageChanged");
static_assert(offsetof(FortActivityBrowserRowPromoted_OnPreviewImageChanged, bIsLoading) == 0x000000, "Member 'FortActivityBrowserRowPromoted_OnPreviewImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortActivityBrowserRowPromoted_OnPreviewImageChanged, Texture) == 0x000008, "Member 'FortActivityBrowserRowPromoted_OnPreviewImageChanged::Texture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserTag.GetTagType
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserTag_GetTagType final
{
public:
	EFortActivityBrowserTagType                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserTag_GetTagType) == 0x000001, "Wrong alignment on FortActivityBrowserTag_GetTagType");
static_assert(sizeof(FortActivityBrowserTag_GetTagType) == 0x000001, "Wrong size on FortActivityBrowserTag_GetTagType");
static_assert(offsetof(FortActivityBrowserTag_GetTagType, ReturnValue) == 0x000000, "Member 'FortActivityBrowserTag_GetTagType::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityView.BP_OnPartySizeChanged
// 0x0004 (0x0004 - 0x0000)
struct FortActivityView_BP_OnPartySizeChanged final
{
public:
	int32                                         PartySize;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityView_BP_OnPartySizeChanged) == 0x000004, "Wrong alignment on FortActivityView_BP_OnPartySizeChanged");
static_assert(sizeof(FortActivityView_BP_OnPartySizeChanged) == 0x000004, "Wrong size on FortActivityView_BP_OnPartySizeChanged");
static_assert(offsetof(FortActivityView_BP_OnPartySizeChanged, PartySize) == 0x000000, "Member 'FortActivityView_BP_OnPartySizeChanged::PartySize' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityView.GetInvalidActivityReason
// 0x0001 (0x0001 - 0x0000)
struct FortActivityView_GetInvalidActivityReason final
{
public:
	EFortInvalidActivityReason                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityView_GetInvalidActivityReason) == 0x000001, "Wrong alignment on FortActivityView_GetInvalidActivityReason");
static_assert(sizeof(FortActivityView_GetInvalidActivityReason) == 0x000001, "Wrong size on FortActivityView_GetInvalidActivityReason");
static_assert(offsetof(FortActivityView_GetInvalidActivityReason, ReturnValue) == 0x000000, "Member 'FortActivityView_GetInvalidActivityReason::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserView.OnRowChanged
// 0x0004 (0x0004 - 0x0000)
struct FortActivityBrowserView_OnRowChanged final
{
public:
	int32                                         NewCategoryIndex;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserView_OnRowChanged) == 0x000004, "Wrong alignment on FortActivityBrowserView_OnRowChanged");
static_assert(sizeof(FortActivityBrowserView_OnRowChanged) == 0x000004, "Wrong size on FortActivityBrowserView_OnRowChanged");
static_assert(offsetof(FortActivityBrowserView_OnRowChanged, NewCategoryIndex) == 0x000000, "Member 'FortActivityBrowserView_OnRowChanged::NewCategoryIndex' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityCreateView.GetInvalidCreativeActivityReason
// 0x0001 (0x0001 - 0x0000)
struct FortActivityCreateView_GetInvalidCreativeActivityReason final
{
public:
	EFortInvalidActivityReason                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityCreateView_GetInvalidCreativeActivityReason) == 0x000001, "Wrong alignment on FortActivityCreateView_GetInvalidCreativeActivityReason");
static_assert(sizeof(FortActivityCreateView_GetInvalidCreativeActivityReason) == 0x000001, "Wrong size on FortActivityCreateView_GetInvalidCreativeActivityReason");
static_assert(offsetof(FortActivityCreateView_GetInvalidCreativeActivityReason, ReturnValue) == 0x000000, "Member 'FortActivityCreateView_GetInvalidCreativeActivityReason::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDetailsDisplay.GetCreatorTextFormat
// 0x0030 (0x0030 - 0x0000)
struct FortActivityDetailsDisplay_GetCreatorTextFormat final
{
public:
	class FText                                   CreatorName;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDetailsDisplay_GetCreatorTextFormat) == 0x000008, "Wrong alignment on FortActivityDetailsDisplay_GetCreatorTextFormat");
static_assert(sizeof(FortActivityDetailsDisplay_GetCreatorTextFormat) == 0x000030, "Wrong size on FortActivityDetailsDisplay_GetCreatorTextFormat");
static_assert(offsetof(FortActivityDetailsDisplay_GetCreatorTextFormat, CreatorName) == 0x000000, "Member 'FortActivityDetailsDisplay_GetCreatorTextFormat::CreatorName' has a wrong offset!");
static_assert(offsetof(FortActivityDetailsDisplay_GetCreatorTextFormat, ReturnValue) == 0x000018, "Member 'FortActivityDetailsDisplay_GetCreatorTextFormat::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDetailsDisplay.OnDetailsUpdated
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDetailsDisplay_OnDetailsUpdated final
{
public:
	bool                                          bIsDetailsValid;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDetailsDisplay_OnDetailsUpdated) == 0x000001, "Wrong alignment on FortActivityDetailsDisplay_OnDetailsUpdated");
static_assert(sizeof(FortActivityDetailsDisplay_OnDetailsUpdated) == 0x000001, "Wrong size on FortActivityDetailsDisplay_OnDetailsUpdated");
static_assert(offsetof(FortActivityDetailsDisplay_OnDetailsUpdated, bIsDetailsValid) == 0x000000, "Member 'FortActivityDetailsDisplay_OnDetailsUpdated::bIsDetailsValid' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDetailsDisplay.OnIsFavoriteChanged
// 0x0002 (0x0002 - 0x0000)
struct FortActivityDetailsDisplay_OnIsFavoriteChanged final
{
public:
	bool                                          bIsFavorite;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayAnimation;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDetailsDisplay_OnIsFavoriteChanged) == 0x000001, "Wrong alignment on FortActivityDetailsDisplay_OnIsFavoriteChanged");
static_assert(sizeof(FortActivityDetailsDisplay_OnIsFavoriteChanged) == 0x000002, "Wrong size on FortActivityDetailsDisplay_OnIsFavoriteChanged");
static_assert(offsetof(FortActivityDetailsDisplay_OnIsFavoriteChanged, bIsFavorite) == 0x000000, "Member 'FortActivityDetailsDisplay_OnIsFavoriteChanged::bIsFavorite' has a wrong offset!");
static_assert(offsetof(FortActivityDetailsDisplay_OnIsFavoriteChanged, bPlayAnimation) == 0x000001, "Member 'FortActivityDetailsDisplay_OnIsFavoriteChanged::bPlayAnimation' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDetailsDisplay.OnPartySizeChanged
// 0x0004 (0x0004 - 0x0000)
struct FortActivityDetailsDisplay_OnPartySizeChanged final
{
public:
	int32                                         PartySize;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDetailsDisplay_OnPartySizeChanged) == 0x000004, "Wrong alignment on FortActivityDetailsDisplay_OnPartySizeChanged");
static_assert(sizeof(FortActivityDetailsDisplay_OnPartySizeChanged) == 0x000004, "Wrong size on FortActivityDetailsDisplay_OnPartySizeChanged");
static_assert(offsetof(FortActivityDetailsDisplay_OnPartySizeChanged, PartySize) == 0x000000, "Member 'FortActivityDetailsDisplay_OnPartySizeChanged::PartySize' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDetailsDisplay.GetContentWarningStrings
// 0x0010 (0x0010 - 0x0000)
struct FortActivityDetailsDisplay_GetContentWarningStrings final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDetailsDisplay_GetContentWarningStrings) == 0x000008, "Wrong alignment on FortActivityDetailsDisplay_GetContentWarningStrings");
static_assert(sizeof(FortActivityDetailsDisplay_GetContentWarningStrings) == 0x000010, "Wrong size on FortActivityDetailsDisplay_GetContentWarningStrings");
static_assert(offsetof(FortActivityDetailsDisplay_GetContentWarningStrings, ReturnValue) == 0x000000, "Member 'FortActivityDetailsDisplay_GetContentWarningStrings::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDetailsDisplay.GetInvalidActivityReason
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDetailsDisplay_GetInvalidActivityReason final
{
public:
	EFortInvalidActivityReason                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDetailsDisplay_GetInvalidActivityReason) == 0x000001, "Wrong alignment on FortActivityDetailsDisplay_GetInvalidActivityReason");
static_assert(sizeof(FortActivityDetailsDisplay_GetInvalidActivityReason) == 0x000001, "Wrong size on FortActivityDetailsDisplay_GetInvalidActivityReason");
static_assert(offsetof(FortActivityDetailsDisplay_GetInvalidActivityReason, ReturnValue) == 0x000000, "Member 'FortActivityDetailsDisplay_GetInvalidActivityReason::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDetailsDisplay.IsActivityEpicOriginal
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDetailsDisplay_IsActivityEpicOriginal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDetailsDisplay_IsActivityEpicOriginal) == 0x000001, "Wrong alignment on FortActivityDetailsDisplay_IsActivityEpicOriginal");
static_assert(sizeof(FortActivityDetailsDisplay_IsActivityEpicOriginal) == 0x000001, "Wrong size on FortActivityDetailsDisplay_IsActivityEpicOriginal");
static_assert(offsetof(FortActivityDetailsDisplay_IsActivityEpicOriginal, ReturnValue) == 0x000000, "Member 'FortActivityDetailsDisplay_IsActivityEpicOriginal::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDetailsDisplay.IsDisplayingCategory
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDetailsDisplay_IsDisplayingCategory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDetailsDisplay_IsDisplayingCategory) == 0x000001, "Wrong alignment on FortActivityDetailsDisplay_IsDisplayingCategory");
static_assert(sizeof(FortActivityDetailsDisplay_IsDisplayingCategory) == 0x000001, "Wrong size on FortActivityDetailsDisplay_IsDisplayingCategory");
static_assert(offsetof(FortActivityDetailsDisplay_IsDisplayingCategory, ReturnValue) == 0x000000, "Member 'FortActivityDetailsDisplay_IsDisplayingCategory::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDetailsModal.OnIsFavoriteChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDetailsModal_OnIsFavoriteChanged final
{
public:
	bool                                          bIsFavorite;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDetailsModal_OnIsFavoriteChanged) == 0x000001, "Wrong alignment on FortActivityDetailsModal_OnIsFavoriteChanged");
static_assert(sizeof(FortActivityDetailsModal_OnIsFavoriteChanged) == 0x000001, "Wrong size on FortActivityDetailsModal_OnIsFavoriteChanged");
static_assert(offsetof(FortActivityDetailsModal_OnIsFavoriteChanged, bIsFavorite) == 0x000000, "Member 'FortActivityDetailsModal_OnIsFavoriteChanged::bIsFavorite' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDetailsModal.OnPreviewImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivityDetailsModal_OnPreviewImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDetailsModal_OnPreviewImageChanged) == 0x000008, "Wrong alignment on FortActivityDetailsModal_OnPreviewImageChanged");
static_assert(sizeof(FortActivityDetailsModal_OnPreviewImageChanged) == 0x000010, "Wrong size on FortActivityDetailsModal_OnPreviewImageChanged");
static_assert(offsetof(FortActivityDetailsModal_OnPreviewImageChanged, bIsLoading) == 0x000000, "Member 'FortActivityDetailsModal_OnPreviewImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortActivityDetailsModal_OnPreviewImageChanged, Texture) == 0x000008, "Member 'FortActivityDetailsModal_OnPreviewImageChanged::Texture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.OnMoviePlayingChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverView_OnMoviePlayingChanged final
{
public:
	bool                                          bIsPlaying;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_OnMoviePlayingChanged) == 0x000001, "Wrong alignment on FortActivityDiscoverView_OnMoviePlayingChanged");
static_assert(sizeof(FortActivityDiscoverView_OnMoviePlayingChanged) == 0x000001, "Wrong size on FortActivityDiscoverView_OnMoviePlayingChanged");
static_assert(offsetof(FortActivityDiscoverView_OnMoviePlayingChanged, bIsPlaying) == 0x000000, "Member 'FortActivityDiscoverView_OnMoviePlayingChanged::bIsPlaying' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.OnPreviewImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivityDiscoverView_OnPreviewImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_OnPreviewImageChanged) == 0x000008, "Wrong alignment on FortActivityDiscoverView_OnPreviewImageChanged");
static_assert(sizeof(FortActivityDiscoverView_OnPreviewImageChanged) == 0x000010, "Wrong size on FortActivityDiscoverView_OnPreviewImageChanged");
static_assert(offsetof(FortActivityDiscoverView_OnPreviewImageChanged, bIsLoading) == 0x000000, "Member 'FortActivityDiscoverView_OnPreviewImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortActivityDiscoverView_OnPreviewImageChanged, Texture) == 0x000008, "Member 'FortActivityDiscoverView_OnPreviewImageChanged::Texture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.IsShowingPromotedContent
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverView_IsShowingPromotedContent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_IsShowingPromotedContent) == 0x000001, "Wrong alignment on FortActivityDiscoverView_IsShowingPromotedContent");
static_assert(sizeof(FortActivityDiscoverView_IsShowingPromotedContent) == 0x000001, "Wrong size on FortActivityDiscoverView_IsShowingPromotedContent");
static_assert(offsetof(FortActivityDiscoverView_IsShowingPromotedContent, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_IsShowingPromotedContent::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.IsShowingSeasonalContent
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverView_IsShowingSeasonalContent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_IsShowingSeasonalContent) == 0x000001, "Wrong alignment on FortActivityDiscoverView_IsShowingSeasonalContent");
static_assert(sizeof(FortActivityDiscoverView_IsShowingSeasonalContent) == 0x000001, "Wrong size on FortActivityDiscoverView_IsShowingSeasonalContent");
static_assert(offsetof(FortActivityDiscoverView_IsShowingSeasonalContent, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_IsShowingSeasonalContent::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityListView.GetInViewCount
// 0x0004 (0x0004 - 0x0000)
struct FortActivityListView_GetInViewCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityListView_GetInViewCount) == 0x000004, "Wrong alignment on FortActivityListView_GetInViewCount");
static_assert(sizeof(FortActivityListView_GetInViewCount) == 0x000004, "Wrong size on FortActivityListView_GetInViewCount");
static_assert(offsetof(FortActivityListView_GetInViewCount, ReturnValue) == 0x000000, "Member 'FortActivityListView_GetInViewCount::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityLobbyTile.OnPreviewImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivityLobbyTile_OnPreviewImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityLobbyTile_OnPreviewImageChanged) == 0x000008, "Wrong alignment on FortActivityLobbyTile_OnPreviewImageChanged");
static_assert(sizeof(FortActivityLobbyTile_OnPreviewImageChanged) == 0x000010, "Wrong size on FortActivityLobbyTile_OnPreviewImageChanged");
static_assert(offsetof(FortActivityLobbyTile_OnPreviewImageChanged, bIsLoading) == 0x000000, "Member 'FortActivityLobbyTile_OnPreviewImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortActivityLobbyTile_OnPreviewImageChanged, Texture) == 0x000008, "Member 'FortActivityLobbyTile_OnPreviewImageChanged::Texture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityLobbyTile.IsActivityEpicCreated
// 0x0001 (0x0001 - 0x0000)
struct FortActivityLobbyTile_IsActivityEpicCreated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityLobbyTile_IsActivityEpicCreated) == 0x000001, "Wrong alignment on FortActivityLobbyTile_IsActivityEpicCreated");
static_assert(sizeof(FortActivityLobbyTile_IsActivityEpicCreated) == 0x000001, "Wrong size on FortActivityLobbyTile_IsActivityEpicCreated");
static_assert(offsetof(FortActivityLobbyTile_IsActivityEpicCreated, ReturnValue) == 0x000000, "Member 'FortActivityLobbyTile_IsActivityEpicCreated::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivitySearchView.HandleTextChanged
// 0x0018 (0x0018 - 0x0000)
struct FortActivitySearchView_HandleTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivitySearchView_HandleTextChanged) == 0x000008, "Wrong alignment on FortActivitySearchView_HandleTextChanged");
static_assert(sizeof(FortActivitySearchView_HandleTextChanged) == 0x000018, "Wrong size on FortActivitySearchView_HandleTextChanged");
static_assert(offsetof(FortActivitySearchView_HandleTextChanged, Text) == 0x000000, "Member 'FortActivitySearchView_HandleTextChanged::Text' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivitySearchView.HandleTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct FortActivitySearchView_HandleTextCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitInfo;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortActivitySearchView_HandleTextCommitted) == 0x000008, "Wrong alignment on FortActivitySearchView_HandleTextCommitted");
static_assert(sizeof(FortActivitySearchView_HandleTextCommitted) == 0x000020, "Wrong size on FortActivitySearchView_HandleTextCommitted");
static_assert(offsetof(FortActivitySearchView_HandleTextCommitted, InText) == 0x000000, "Member 'FortActivitySearchView_HandleTextCommitted::InText' has a wrong offset!");
static_assert(offsetof(FortActivitySearchView_HandleTextCommitted, CommitInfo) == 0x000018, "Member 'FortActivitySearchView_HandleTextCommitted::CommitInfo' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivitySearchView.OnActivityValidated
// 0x0001 (0x0001 - 0x0000)
struct FortActivitySearchView_OnActivityValidated final
{
public:
	EFortActivityValidationResult                 ValidateResult;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivitySearchView_OnActivityValidated) == 0x000001, "Wrong alignment on FortActivitySearchView_OnActivityValidated");
static_assert(sizeof(FortActivitySearchView_OnActivityValidated) == 0x000001, "Wrong size on FortActivitySearchView_OnActivityValidated");
static_assert(offsetof(FortActivitySearchView_OnActivityValidated, ValidateResult) == 0x000000, "Member 'FortActivitySearchView_OnActivityValidated::ValidateResult' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnIsFavoriteChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_OnIsFavoriteChanged final
{
public:
	bool                                          bIsFavorite;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnIsFavoriteChanged) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_OnIsFavoriteChanged");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnIsFavoriteChanged) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_OnIsFavoriteChanged");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnIsFavoriteChanged, bIsFavorite) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnIsFavoriteChanged::bIsFavorite' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnPartySizeChanged
// 0x0004 (0x0004 - 0x0000)
struct FortActivityTileDetailsDisplay_OnPartySizeChanged final
{
public:
	int32                                         PartySize;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnPartySizeChanged) == 0x000004, "Wrong alignment on FortActivityTileDetailsDisplay_OnPartySizeChanged");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnPartySizeChanged) == 0x000004, "Wrong size on FortActivityTileDetailsDisplay_OnPartySizeChanged");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnPartySizeChanged, PartySize) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnPartySizeChanged::PartySize' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnPreviewImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivityTileDetailsDisplay_OnPreviewImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnPreviewImageChanged) == 0x000008, "Wrong alignment on FortActivityTileDetailsDisplay_OnPreviewImageChanged");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnPreviewImageChanged) == 0x000010, "Wrong size on FortActivityTileDetailsDisplay_OnPreviewImageChanged");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnPreviewImageChanged, bIsLoading) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnPreviewImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnPreviewImageChanged, Texture) == 0x000008, "Member 'FortActivityTileDetailsDisplay_OnPreviewImageChanged::Texture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnSocialUsersPlayingChanged
// 0x0004 (0x0004 - 0x0000)
struct FortActivityTileDetailsDisplay_OnSocialUsersPlayingChanged final
{
public:
	int32                                         NumPlaying;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnSocialUsersPlayingChanged) == 0x000004, "Wrong alignment on FortActivityTileDetailsDisplay_OnSocialUsersPlayingChanged");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnSocialUsersPlayingChanged) == 0x000004, "Wrong size on FortActivityTileDetailsDisplay_OnSocialUsersPlayingChanged");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnSocialUsersPlayingChanged, NumPlaying) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnSocialUsersPlayingChanged::NumPlaying' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnTileActiveSet
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_OnTileActiveSet final
{
public:
	bool                                          bIsTileActive;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnTileActiveSet) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_OnTileActiveSet");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnTileActiveSet) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_OnTileActiveSet");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnTileActiveSet, bIsTileActive) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnTileActiveSet::bIsTileActive' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.GetInvalidActivityReason
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_GetInvalidActivityReason final
{
public:
	EFortInvalidActivityReason                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_GetInvalidActivityReason) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_GetInvalidActivityReason");
static_assert(sizeof(FortActivityTileDetailsDisplay_GetInvalidActivityReason) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_GetInvalidActivityReason");
static_assert(offsetof(FortActivityTileDetailsDisplay_GetInvalidActivityReason, ReturnValue) == 0x000000, "Member 'FortActivityTileDetailsDisplay_GetInvalidActivityReason::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.IsActivityEpicCreated
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_IsActivityEpicCreated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_IsActivityEpicCreated) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_IsActivityEpicCreated");
static_assert(sizeof(FortActivityTileDetailsDisplay_IsActivityEpicCreated) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_IsActivityEpicCreated");
static_assert(offsetof(FortActivityTileDetailsDisplay_IsActivityEpicCreated, ReturnValue) == 0x000000, "Member 'FortActivityTileDetailsDisplay_IsActivityEpicCreated::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.IsActivityFavorited
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_IsActivityFavorited final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_IsActivityFavorited) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_IsActivityFavorited");
static_assert(sizeof(FortActivityTileDetailsDisplay_IsActivityFavorited) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_IsActivityFavorited");
static_assert(offsetof(FortActivityTileDetailsDisplay_IsActivityFavorited, ReturnValue) == 0x000000, "Member 'FortActivityTileDetailsDisplay_IsActivityFavorited::ReturnValue' has a wrong offset!");

}

