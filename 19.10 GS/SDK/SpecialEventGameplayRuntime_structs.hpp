#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpecialEventGameplayRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "NetCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum SpecialEventGameplayRuntime.EFakeKillRelevancyPlayerKillStep
// NumValues: 0x0003
enum class EFakeKillRelevancyPlayerKillStep : uint8
{
	Initiated                                = 0,
	BlueprintNotified                        = 1,
	VisualsPerformed                         = 2,
};

// Enum SpecialEventGameplayRuntime.EMutatorMovementMode
// NumValues: 0x0005
enum class EMutatorMovementMode : uint8
{
	None                                     = 0,
	BuffetBubbles                            = 19,
	BuffetBubblesIntro                       = 20,
	BuffetFlying                             = 21,
	BuffetFlyingRicochet                     = 22,
};

// Enum SpecialEventGameplayRuntime.ESpecialEventPhaseState
// NumValues: 0x0004
enum class ESpecialEventPhaseState : uint8
{
	Unregistered                             = 0,
	Inactive                                 = 1,
	Active                                   = 2,
	Deactivated                              = 3,
};

// ScriptStruct SpecialEventGameplayRuntime.FakeKillRelevancySupergroup
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FFakeKillRelevancySupergroup final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFakeKillRelevancySupergroup) == 0x000008, "Wrong alignment on FFakeKillRelevancySupergroup");
static_assert(sizeof(FFakeKillRelevancySupergroup) == 0x000020, "Wrong size on FFakeKillRelevancySupergroup");

// ScriptStruct SpecialEventGameplayRuntime.SpecialClientEvent
// 0x0018 (0x0018 - 0x0000)
struct FSpecialClientEvent final
{
public:
	class AFortPlayerControllerAthena*            PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSeconds;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EventTag;                                          // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialClientEvent) == 0x000008, "Wrong alignment on FSpecialClientEvent");
static_assert(sizeof(FSpecialClientEvent) == 0x000018, "Wrong size on FSpecialClientEvent");
static_assert(offsetof(FSpecialClientEvent, PlayerController) == 0x000000, "Member 'FSpecialClientEvent::PlayerController' has a wrong offset!");
static_assert(offsetof(FSpecialClientEvent, TimeSeconds) == 0x000008, "Member 'FSpecialClientEvent::TimeSeconds' has a wrong offset!");
static_assert(offsetof(FSpecialClientEvent, EventTag) == 0x00000C, "Member 'FSpecialClientEvent::EventTag' has a wrong offset!");
static_assert(offsetof(FSpecialClientEvent, Count) == 0x000014, "Member 'FSpecialClientEvent::Count' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.FakeKillRelevancyVictim
// 0x0018 (0x0018 - 0x0000)
struct FFakeKillRelevancyVictim final
{
public:
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DeathLocation;                                     // 0x0008(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFakeKillRelevancyVictim) == 0x000008, "Wrong alignment on FFakeKillRelevancyVictim");
static_assert(sizeof(FFakeKillRelevancyVictim) == 0x000018, "Wrong size on FFakeKillRelevancyVictim");
static_assert(offsetof(FFakeKillRelevancyVictim, PlayerState) == 0x000000, "Member 'FFakeKillRelevancyVictim::PlayerState' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyVictim, DeathLocation) == 0x000008, "Member 'FFakeKillRelevancyVictim::DeathLocation' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.FakeKillRelevancyPlayerDataEntry
// 0x002C (0x0038 - 0x000C)
struct FFakeKillRelevancyPlayerDataEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFakeKillRelevancyVictim>       Victims;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Reason;                                            // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhaseNum;                                          // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveNum;                                           // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelevancyDelay;                                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelevancyChangeServerWorldTime;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFakeKillRelevancyPlayerDataEntry) == 0x000008, "Wrong alignment on FFakeKillRelevancyPlayerDataEntry");
static_assert(sizeof(FFakeKillRelevancyPlayerDataEntry) == 0x000038, "Wrong size on FFakeKillRelevancyPlayerDataEntry");
static_assert(offsetof(FFakeKillRelevancyPlayerDataEntry, Victims) == 0x000010, "Member 'FFakeKillRelevancyPlayerDataEntry::Victims' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPlayerDataEntry, Reason) == 0x000020, "Member 'FFakeKillRelevancyPlayerDataEntry::Reason' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPlayerDataEntry, PhaseNum) == 0x000028, "Member 'FFakeKillRelevancyPlayerDataEntry::PhaseNum' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPlayerDataEntry, WaveNum) == 0x00002C, "Member 'FFakeKillRelevancyPlayerDataEntry::WaveNum' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPlayerDataEntry, RelevancyDelay) == 0x000030, "Member 'FFakeKillRelevancyPlayerDataEntry::RelevancyDelay' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPlayerDataEntry, RelevancyChangeServerWorldTime) == 0x000034, "Member 'FFakeKillRelevancyPlayerDataEntry::RelevancyChangeServerWorldTime' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.FakeKillRelevancyPlayerDataArray
// 0x0018 (0x0120 - 0x0108)
struct FFakeKillRelevancyPlayerDataArray final : public FFastArraySerializer
{
public:
	TArray<struct FFakeKillRelevancyPlayerDataEntry> Entries;                                           // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UFortControllerComponent_FakeKillRelevancy* ControllerComponent;                               // 0x0118(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFakeKillRelevancyPlayerDataArray) == 0x000008, "Wrong alignment on FFakeKillRelevancyPlayerDataArray");
static_assert(sizeof(FFakeKillRelevancyPlayerDataArray) == 0x000120, "Wrong size on FFakeKillRelevancyPlayerDataArray");
static_assert(offsetof(FFakeKillRelevancyPlayerDataArray, Entries) == 0x000108, "Member 'FFakeKillRelevancyPlayerDataArray::Entries' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPlayerDataArray, ControllerComponent) == 0x000118, "Member 'FFakeKillRelevancyPlayerDataArray::ControllerComponent' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.FakeKillRelevancyPhaseData
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FFakeKillRelevancyPhaseData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Reason;                                            // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWavesExpected;                                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveNum;                                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelevancyDelay;                                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x14];                                      // 0x0024(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFakeKillRelevancyPhaseData) == 0x000008, "Wrong alignment on FFakeKillRelevancyPhaseData");
static_assert(sizeof(FFakeKillRelevancyPhaseData) == 0x000038, "Wrong size on FFakeKillRelevancyPhaseData");
static_assert(offsetof(FFakeKillRelevancyPhaseData, Reason) == 0x000010, "Member 'FFakeKillRelevancyPhaseData::Reason' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPhaseData, NumWavesExpected) == 0x000018, "Member 'FFakeKillRelevancyPhaseData::NumWavesExpected' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPhaseData, WaveNum) == 0x00001C, "Member 'FFakeKillRelevancyPhaseData::WaveNum' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPhaseData, RelevancyDelay) == 0x000020, "Member 'FFakeKillRelevancyPhaseData::RelevancyDelay' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.FakeKillRelevancyBucket
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFakeKillRelevancyBucket final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFakeKillRelevancyBucket) == 0x000008, "Wrong alignment on FFakeKillRelevancyBucket");
static_assert(sizeof(FFakeKillRelevancyBucket) == 0x000010, "Wrong size on FFakeKillRelevancyBucket");

// ScriptStruct SpecialEventGameplayRuntime.FakeKillRelevancyTestParameters
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FFakeKillRelevancyTestParameters final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFakeKillRelevancyTestParameters) == 0x000008, "Wrong alignment on FFakeKillRelevancyTestParameters");
static_assert(sizeof(FFakeKillRelevancyTestParameters) == 0x000038, "Wrong size on FFakeKillRelevancyTestParameters");

// ScriptStruct SpecialEventGameplayRuntime.SpecialEventMapData
// 0x0020 (0x0020 - 0x0000)
struct FSpecialEventMapData final
{
public:
	struct FGameplayTag                           MapTag;                                            // 0x0000(0x0008)(Edit, DisableEditOnInstance, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           MapNames;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, RepSkip, NativeAccessSpecifierPublic)
	bool                                          bReplicatedHasBeenUnloaded;                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBeenUnloaded;                                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpecialEventMapData) == 0x000008, "Wrong alignment on FSpecialEventMapData");
static_assert(sizeof(FSpecialEventMapData) == 0x000020, "Wrong size on FSpecialEventMapData");
static_assert(offsetof(FSpecialEventMapData, MapTag) == 0x000000, "Member 'FSpecialEventMapData::MapTag' has a wrong offset!");
static_assert(offsetof(FSpecialEventMapData, MapNames) == 0x000008, "Member 'FSpecialEventMapData::MapNames' has a wrong offset!");
static_assert(offsetof(FSpecialEventMapData, bReplicatedHasBeenUnloaded) == 0x000018, "Member 'FSpecialEventMapData::bReplicatedHasBeenUnloaded' has a wrong offset!");
static_assert(offsetof(FSpecialEventMapData, bHasBeenUnloaded) == 0x000019, "Member 'FSpecialEventMapData::bHasBeenUnloaded' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.FortDelayRTMMData
// 0x0010 (0x0010 - 0x0000)
struct FFortDelayRTMMData final
{
public:
	bool                                          bDelayRTTM;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinRTTMDelay;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRTTMDelay;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDelayRTMMData) == 0x000004, "Wrong alignment on FFortDelayRTMMData");
static_assert(sizeof(FFortDelayRTMMData) == 0x000010, "Wrong size on FFortDelayRTMMData");
static_assert(offsetof(FFortDelayRTMMData, bDelayRTTM) == 0x000000, "Member 'FFortDelayRTMMData::bDelayRTTM' has a wrong offset!");
static_assert(offsetof(FFortDelayRTMMData, MinRTTMDelay) == 0x000004, "Member 'FFortDelayRTMMData::MinRTTMDelay' has a wrong offset!");
static_assert(offsetof(FFortDelayRTMMData, MaxRTTMDelay) == 0x000008, "Member 'FFortDelayRTMMData::MaxRTTMDelay' has a wrong offset!");
static_assert(offsetof(FFortDelayRTMMData, Timestamp) == 0x00000C, "Member 'FFortDelayRTMMData::Timestamp' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.FortSpecialEventGEData
// 0x0010 (0x0010 - 0x0000)
struct FFortSpecialEventGEData final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSpecialEventGEData) == 0x000008, "Wrong alignment on FFortSpecialEventGEData");
static_assert(sizeof(FFortSpecialEventGEData) == 0x000010, "Wrong size on FFortSpecialEventGEData");
static_assert(offsetof(FFortSpecialEventGEData, GameplayEffect) == 0x000000, "Member 'FFortSpecialEventGEData::GameplayEffect' has a wrong offset!");
static_assert(offsetof(FFortSpecialEventGEData, Level) == 0x000008, "Member 'FFortSpecialEventGEData::Level' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.FortSpecialEventOverrideParts
// 0x0020 (0x0020 - 0x0000)
struct FFortSpecialEventOverrideParts final
{
public:
	TArray<class UCustomCharacterPart*>           OverrideParts;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFortSpecialEventGEData                GameplayEffectToApplyOnSwap;                       // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSpecialEventOverrideParts) == 0x000008, "Wrong alignment on FFortSpecialEventOverrideParts");
static_assert(sizeof(FFortSpecialEventOverrideParts) == 0x000020, "Wrong size on FFortSpecialEventOverrideParts");
static_assert(offsetof(FFortSpecialEventOverrideParts, OverrideParts) == 0x000000, "Member 'FFortSpecialEventOverrideParts::OverrideParts' has a wrong offset!");
static_assert(offsetof(FFortSpecialEventOverrideParts, GameplayEffectToApplyOnSwap) == 0x000010, "Member 'FFortSpecialEventOverrideParts::GameplayEffectToApplyOnSwap' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.BuffetBubblesReplicatedData
// 0x0040 (0x0040 - 0x0000)
struct FBuffetBubblesReplicatedData final
{
public:
	struct FTransform                             RelativeTransform;                                 // 0x0000(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RelativeVelocity;                                  // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuffetBubblesReplicatedData) == 0x000010, "Wrong alignment on FBuffetBubblesReplicatedData");
static_assert(sizeof(FBuffetBubblesReplicatedData) == 0x000040, "Wrong size on FBuffetBubblesReplicatedData");
static_assert(offsetof(FBuffetBubblesReplicatedData, RelativeTransform) == 0x000000, "Member 'FBuffetBubblesReplicatedData::RelativeTransform' has a wrong offset!");
static_assert(offsetof(FBuffetBubblesReplicatedData, RelativeVelocity) == 0x000030, "Member 'FBuffetBubblesReplicatedData::RelativeVelocity' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.BuffetBubblesDebugData
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x10) FBuffetBubblesDebugData final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuffetBubblesDebugData) == 0x000010, "Wrong alignment on FBuffetBubblesDebugData");
static_assert(sizeof(FBuffetBubblesDebugData) == 0x000080, "Wrong size on FBuffetBubblesDebugData");

// ScriptStruct SpecialEventGameplayRuntime.BuffetFlyingRicochetReplicatedData
// 0x0010 (0x0010 - 0x0000)
struct FBuffetFlyingRicochetReplicatedData final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffetFlyingRicochetReplicatedData) == 0x000004, "Wrong alignment on FBuffetFlyingRicochetReplicatedData");
static_assert(sizeof(FBuffetFlyingRicochetReplicatedData) == 0x000010, "Wrong size on FBuffetFlyingRicochetReplicatedData");
static_assert(offsetof(FBuffetFlyingRicochetReplicatedData, StartTime) == 0x000000, "Member 'FBuffetFlyingRicochetReplicatedData::StartTime' has a wrong offset!");
static_assert(offsetof(FBuffetFlyingRicochetReplicatedData, Velocity) == 0x000004, "Member 'FBuffetFlyingRicochetReplicatedData::Velocity' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.SpecialEventAudioHapticsAction
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSpecialEventAudioHapticsAction final
{
public:
	float                                         LoudnessFloor;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoudnessCeiling;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HapticsIntensity;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChannelIndex;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAffectsLeftLarge : 1;                             // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectsLeftSmall : 1;                             // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectsRightLarge : 1;                            // 0x0010(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectsRightSmall : 1;                            // 0x0010(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpecialEventAudioHapticsAction) == 0x000008, "Wrong alignment on FSpecialEventAudioHapticsAction");
static_assert(sizeof(FSpecialEventAudioHapticsAction) == 0x000020, "Wrong size on FSpecialEventAudioHapticsAction");
static_assert(offsetof(FSpecialEventAudioHapticsAction, LoudnessFloor) == 0x000000, "Member 'FSpecialEventAudioHapticsAction::LoudnessFloor' has a wrong offset!");
static_assert(offsetof(FSpecialEventAudioHapticsAction, LoudnessCeiling) == 0x000004, "Member 'FSpecialEventAudioHapticsAction::LoudnessCeiling' has a wrong offset!");
static_assert(offsetof(FSpecialEventAudioHapticsAction, HapticsIntensity) == 0x000008, "Member 'FSpecialEventAudioHapticsAction::HapticsIntensity' has a wrong offset!");
static_assert(offsetof(FSpecialEventAudioHapticsAction, ChannelIndex) == 0x00000C, "Member 'FSpecialEventAudioHapticsAction::ChannelIndex' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.PhaseLevelEntry
// 0x00A0 (0x00A0 - 0x0000)
struct FPhaseLevelEntry final
{
public:
	TSoftObjectPtr<class UWorld>                  LevelToLoad;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadLevelOnScriptStart;                           // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLevelStartsVisible;                               // 0x0039(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnloadLevelOnPhaseEnd;                            // 0x003A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeFromServerPreload;                         // 0x003B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  MakeVisibleAtPhaseTags;                            // 0x0040(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  UnloadLevelAtPhaseTags;                            // 0x0060(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0080(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x008C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ULevelStreamingDynamic*                 LevelInstance;                                     // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhaseLevelEntry) == 0x000008, "Wrong alignment on FPhaseLevelEntry");
static_assert(sizeof(FPhaseLevelEntry) == 0x0000A0, "Wrong size on FPhaseLevelEntry");
static_assert(offsetof(FPhaseLevelEntry, LevelToLoad) == 0x000000, "Member 'FPhaseLevelEntry::LevelToLoad' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, LevelName) == 0x000028, "Member 'FPhaseLevelEntry::LevelName' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, bLoadLevelOnScriptStart) == 0x000038, "Member 'FPhaseLevelEntry::bLoadLevelOnScriptStart' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, bLevelStartsVisible) == 0x000039, "Member 'FPhaseLevelEntry::bLevelStartsVisible' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, bUnloadLevelOnPhaseEnd) == 0x00003A, "Member 'FPhaseLevelEntry::bUnloadLevelOnPhaseEnd' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, bExcludeFromServerPreload) == 0x00003B, "Member 'FPhaseLevelEntry::bExcludeFromServerPreload' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, MakeVisibleAtPhaseTags) == 0x000040, "Member 'FPhaseLevelEntry::MakeVisibleAtPhaseTags' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, UnloadLevelAtPhaseTags) == 0x000060, "Member 'FPhaseLevelEntry::UnloadLevelAtPhaseTags' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, Location) == 0x000080, "Member 'FPhaseLevelEntry::Location' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, Rotation) == 0x00008C, "Member 'FPhaseLevelEntry::Rotation' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, LevelInstance) == 0x000098, "Member 'FPhaseLevelEntry::LevelInstance' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.PhaseInfo
// 0x0060 (0x0060 - 0x0000)
struct FPhaseInfo final
{
public:
	TSubclassOf<class ASpecialEventPhase>         PhaseActorClass;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PhaseTag;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SequenceTime;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetRelevancyMode;                                 // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialRelevancyMode                         RelevancyMode;                                     // 0x0015(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumOfSquadsInRelevancyGroup;                       // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RequireLevelsFromPhaseTags;                        // 0x0020(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bStartNextPhaseOnPhaseFinished;                    // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGarbageCollectAtPhaseStart;                       // 0x0041(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPhaseLevelEntry>               Levels;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class ASpecialEventPhase*                     PhaseActor;                                        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhaseInfo) == 0x000008, "Wrong alignment on FPhaseInfo");
static_assert(sizeof(FPhaseInfo) == 0x000060, "Wrong size on FPhaseInfo");
static_assert(offsetof(FPhaseInfo, PhaseActorClass) == 0x000000, "Member 'FPhaseInfo::PhaseActorClass' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, PhaseTag) == 0x000008, "Member 'FPhaseInfo::PhaseTag' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, SequenceTime) == 0x000010, "Member 'FPhaseInfo::SequenceTime' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, bSetRelevancyMode) == 0x000014, "Member 'FPhaseInfo::bSetRelevancyMode' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, RelevancyMode) == 0x000015, "Member 'FPhaseInfo::RelevancyMode' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, NumOfSquadsInRelevancyGroup) == 0x000018, "Member 'FPhaseInfo::NumOfSquadsInRelevancyGroup' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, RequireLevelsFromPhaseTags) == 0x000020, "Member 'FPhaseInfo::RequireLevelsFromPhaseTags' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, bStartNextPhaseOnPhaseFinished) == 0x000040, "Member 'FPhaseInfo::bStartNextPhaseOnPhaseFinished' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, bGarbageCollectAtPhaseStart) == 0x000041, "Member 'FPhaseInfo::bGarbageCollectAtPhaseStart' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, Levels) == 0x000048, "Member 'FPhaseInfo::Levels' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, PhaseActor) == 0x000058, "Member 'FPhaseInfo::PhaseActor' has a wrong offset!");

}

