#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CampsiteRuntime

#include "Basic.hpp"

#include "CampsiteRuntime_classes.hpp"
#include "CampsiteRuntime_parameters.hpp"


namespace SDK
{

// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.CacheAccountItemData
// (Final, Native, Private)

void UFortControllerComponent_CampsiteAccountItem::CacheAccountItemData()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CacheAccountItemData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.ClearStashedItem
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   StashedItemIndex                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_CampsiteAccountItem::ClearStashedItem(const int32 StashedItemIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClearStashedItem");

	Params::FortControllerComponent_CampsiteAccountItem_ClearStashedItem Parms{};

	Parms.StashedItemIndex = StashedItemIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.ClearStashedItemAndGiveToPlayer
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           SourceActor                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StashedItemIndex                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortControllerComponent_CampsiteAccountItem::ClearStashedItemAndGiveToPlayer(const class AActor* SourceActor, const int32 StashedItemIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClearStashedItemAndGiveToPlayer");

	Params::FortControllerComponent_CampsiteAccountItem_ClearStashedItemAndGiveToPlayer Parms{};

	Parms.SourceActor = SourceActor;
	Parms.StashedItemIndex = StashedItemIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.ClearStoredCampsiteLocations
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UFortControllerComponent_CampsiteAccountItem::ClearStoredCampsiteLocations()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClearStoredCampsiteLocations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.OnAthenaProfileInitialized
// (Final, Native, Private)

void UFortControllerComponent_CampsiteAccountItem::OnAthenaProfileInitialized()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnAthenaProfileInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.StashCurrentlyHeldItemAndRemoveFromInventory
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   StashedItemIndex                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortControllerComponent_CampsiteAccountItem::StashCurrentlyHeldItemAndRemoveFromInventory(const int32 StashedItemIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StashCurrentlyHeldItemAndRemoveFromInventory");

	Params::FortControllerComponent_CampsiteAccountItem_StashCurrentlyHeldItemAndRemoveFromInventory Parms{};

	Parms.StashedItemIndex = StashedItemIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.SwapStashedItem
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           SourceActor                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StashedItemIndex                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortControllerComponent_CampsiteAccountItem::SwapStashedItem(const class AActor* SourceActor, const int32 StashedItemIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SwapStashedItem");

	Params::FortControllerComponent_CampsiteAccountItem_SwapStashedItem Parms{};

	Parms.SourceActor = SourceActor;
	Parms.StashedItemIndex = StashedItemIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.WriteStashedItem
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UFortWorldItem*                   Item                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StashedItemIndex                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_CampsiteAccountItem::WriteStashedItem(const class UFortWorldItem* Item, const int32 StashedItemIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("WriteStashedItem");

	Params::FortControllerComponent_CampsiteAccountItem_WriteStashedItem Parms{};

	Parms.Item = Item;
	Parms.StashedItemIndex = StashedItemIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.WriteStashedItemFromEntry
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFortItemEntry                   ItemEntry                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   StashedItemIndex                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_CampsiteAccountItem::WriteStashedItemFromEntry(const struct FFortItemEntry& ItemEntry, const int32 StashedItemIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("WriteStashedItemFromEntry");

	Params::FortControllerComponent_CampsiteAccountItem_WriteStashedItemFromEntry Parms{};

	Parms.ItemEntry = std::move(ItemEntry);
	Parms.StashedItemIndex = StashedItemIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.GetCurrentlyStashedItemAsItemEntry
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   StashedItemIndex                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortItemEntry                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFortItemEntry UFortControllerComponent_CampsiteAccountItem::GetCurrentlyStashedItemAsItemEntry(const int32 StashedItemIndex) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentlyStashedItemAsItemEntry");

	Params::FortControllerComponent_CampsiteAccountItem_GetCurrentlyStashedItemAsItemEntry Parms{};

	Parms.StashedItemIndex = StashedItemIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.HasCurrentlyStashedItem
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   StashedItemIndex                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortControllerComponent_CampsiteAccountItem::HasCurrentlyStashedItem(const int32 StashedItemIndex) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HasCurrentlyStashedItem");

	Params::FortControllerComponent_CampsiteAccountItem_HasCurrentlyStashedItem Parms{};

	Parms.StashedItemIndex = StashedItemIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CampsiteRuntime.AbandonedCampsiteManager.OnGamePhaseStepChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TScriptInterface<class IFortSafeZoneInterface>SafeZoneInterface                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAthenaGamePhaseStep                    GamePhaseStep                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAbandonedCampsiteManager::OnGamePhaseStepChanged(const TScriptInterface<class IFortSafeZoneInterface>& SafeZoneInterface, const EAthenaGamePhaseStep GamePhaseStep)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnGamePhaseStepChanged");

	Params::AbandonedCampsiteManager_OnGamePhaseStepChanged Parms{};

	Parms.SafeZoneInterface = SafeZoneInterface;
	Parms.GamePhaseStep = GamePhaseStep;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CampsiteRuntime.AbandonedCampsitePlacedSpawner.SpawnCampsite
// (Native, Event, Public, BlueprintEvent)

void AAbandonedCampsitePlacedSpawner::SpawnCampsite()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SpawnCampsite");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CampsiteRuntime.CampsiteConversationComponent.StartConversation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AFortPlayerController*            InstigatingController                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCampsiteConversationComponent::StartConversation(class AFortPlayerController* InstigatingController)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StartConversation");

	Params::CampsiteConversationComponent_StartConversation Parms{};

	Parms.InstigatingController = InstigatingController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CampsiteRuntime.CampsiteFunctionLibraryNative.IsItemAvailable
// (Final, BlueprintAuthorityOnly, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortItem*                        FortItem                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCampsiteFunctionLibraryNative::IsItemAvailable(class UObject* WorldContextObject, const class UFortItem* FortItem)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("IsItemAvailable");

	Params::CampsiteFunctionLibraryNative_IsItemAvailable Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FortItem = FortItem;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CampsiteRuntime.CampsiteFunctionLibraryNative.IsItemDefinitionAvailable
// (Final, BlueprintAuthorityOnly, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortItemDefinition*              FortItem                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCampsiteFunctionLibraryNative::IsItemDefinitionAvailable(class UObject* WorldContextObject, const class UFortItemDefinition* FortItem)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("IsItemDefinitionAvailable");

	Params::CampsiteFunctionLibraryNative_IsItemDefinitionAvailable Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FortItem = FortItem;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CampsiteRuntime.CampsiteFunctionLibraryNative.IsItemEntryAvailable
// (Final, BlueprintAuthorityOnly, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortItemEntry                   FortItem                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCampsiteFunctionLibraryNative::IsItemEntryAvailable(class UObject* WorldContextObject, const struct FFortItemEntry& FortItem)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("IsItemEntryAvailable");

	Params::CampsiteFunctionLibraryNative_IsItemEntryAvailable Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FortItem = std::move(FortItem);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CampsiteRuntime.CampsiteImprovementComponent.CreateIndicator
// (Final, Native, Protected, BlueprintCallable)

void UCampsiteImprovementComponent::CreateIndicator()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CreateIndicator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CampsiteRuntime.CampsiteImprovementComponent.OnRep_ImprovementOwnerSquadId
// (Final, Native, Protected)

void UCampsiteImprovementComponent::OnRep_ImprovementOwnerSquadId()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ImprovementOwnerSquadId");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CampsiteRuntime.CampsiteImprovementComponent.RemoveIndicator
// (Final, Native, Protected, BlueprintCallable)

void UCampsiteImprovementComponent::RemoveIndicator()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveIndicator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CampsiteRuntime.CampsiteImprovementComponent.SetImprovementOwnerSquadId
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   SquadId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCampsiteImprovementComponent::SetImprovementOwnerSquadId(int32 SquadId)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetImprovementOwnerSquadId");

	Params::CampsiteImprovementComponent_SetImprovementOwnerSquadId Parms{};

	Parms.SquadId = SquadId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CampsiteRuntime.FortGameStateComponent_Campsite.ClaimUnusedBotName
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutBotName                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortGameStateComponent_Campsite::ClaimUnusedBotName(class FString* OutBotName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClaimUnusedBotName");

	Params::FortGameStateComponent_Campsite_ClaimUnusedBotName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutBotName != nullptr)
		*OutBotName = std::move(Parms.OutBotName);
}


// Function CampsiteRuntime.FortGameStateComponent_Campsite.RegisterCampsiteLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewCampsiteLocation                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortGameStateComponent_Campsite::RegisterCampsiteLocation(const struct FVector& NewCampsiteLocation)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RegisterCampsiteLocation");

	Params::FortGameStateComponent_Campsite_RegisterCampsiteLocation Parms{};

	Parms.NewCampsiteLocation = std::move(NewCampsiteLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CampsiteRuntime.FortGameStateComponent_Campsite.RegisterPreplacedCampsite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AAbandonedCampsitePlacedSpawner*  PreplacedCampsiteSpawnPoint                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortGameStateComponent_Campsite::RegisterPreplacedCampsite(class AAbandonedCampsitePlacedSpawner* PreplacedCampsiteSpawnPoint)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RegisterPreplacedCampsite");

	Params::FortGameStateComponent_Campsite_RegisterPreplacedCampsite Parms{};

	Parms.PreplacedCampsiteSpawnPoint = PreplacedCampsiteSpawnPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

