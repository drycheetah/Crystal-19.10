#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_HidingProp_WilliePete

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "B_HidingProp_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_HidingProp_WilliePete.B_HidingProp_WilliePete_C
// 0x01D8 (0x1330 - 0x1158)
class AB_HidingProp_WilliePete_C final : public AB_HidingProp_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_B_HidingProp_WilliePete_C;          // 0x1158(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   overlapCylinder;                                   // 0x1160(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        WilliePete_Ambient_Loop;                           // 0x1168(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Geyser;                                            // 0x1170(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Whirlpool_01;                                    // 0x1178(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_WilliePete_SurfaceVerticalSplash;                // 0x1180(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortProjectileMovementComponent*       OverlappedFortProjectileMovementComponent;         // 0x1188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UProjectileMovementComponent*           OverlappedStandardProjectileMovementComponent;     // 0x1190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TeleportingNonPawn;                                // 0x1198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             SphereOverlapResult;                               // 0x11A0(0x009C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         ProjectileSpeedCeiling;                            // 0x123C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ProjectileExitFVectorRotation;                     // 0x1240(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         WaterLevel;                                        // 0x124C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Exit;                                           // 0x1250(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Enter;                                          // 0x1258(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         EnabledValue;                                      // 0x1260(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         LaunchHeightValue;                                 // 0x1288(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPlayerPawnAthena*                  LaunchPawn;                                        // 0x12B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            LaunchGrantedEffectHandle;                         // 0x12B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  T_Quest;                                           // 0x12C0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 SpawnedWaterBody;                                  // 0x12E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_ScreenFX;                                       // 0x12E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          isOnTestMap;                                       // 0x12F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12F1[0x7];                                     // 0x12F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Launch_Sound;                                      // 0x12F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AdjustedLocation;                                  // 0x1300(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          skipAnimForLaunch;                                 // 0x130C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_130D[0x3];                                     // 0x130D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawnAthena*                  ExitingPawn;                                       // 0x1310(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMovementComponent*                     OverlappedMovementComponent;                       // 0x1318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProjectileSpeedMult;                               // 0x1320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PickupSpeedMult;                                   // 0x1324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSetSilentDie;                                     // 0x1328(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bSetSpawnedWaterBody;                              // 0x1329(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__overlapCylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Complete_Setup();
	void ExecuteUbergraph_B_HidingProp_WilliePete(int32 EntryPoint);
	void HelperLocationLogger(const class FString& InString);
	void Non_Pawn_Actor_Destroyed(class AActor* DestroyedActor);
	void Non_Pawn_Teleport(class AActor* TeleportingActor);
	void OnReady_74044DD44988556292500EB8F289359F(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void OnRep_AdjustedLocation();
	void OnRep_bSetSilentDie();
	void OnRep_bSetSpawnedWaterBody();
	void ReceiveBeginPlay();
	void Remove_GE();
	void ResetGravity(const struct FHitResult& Hit);
	void StopHiding(const class AFortPawn* Pawn_0);
	void TeleportExitSpeed(const struct FVector& ExitFVector, float EnterSpeed, float OverrideSpeed, float MinimumSpeed, bool ForceSpeedOverride, struct FVector* TeleportExitVelocity);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_HidingProp_WilliePete_C">();
	}
	static class AB_HidingProp_WilliePete_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_HidingProp_WilliePete_C>();
	}
};
static_assert(alignof(AB_HidingProp_WilliePete_C) == 0x000008, "Wrong alignment on AB_HidingProp_WilliePete_C");
static_assert(sizeof(AB_HidingProp_WilliePete_C) == 0x001330, "Wrong size on AB_HidingProp_WilliePete_C");
static_assert(offsetof(AB_HidingProp_WilliePete_C, UberGraphFrame_B_HidingProp_WilliePete_C) == 0x001158, "Member 'AB_HidingProp_WilliePete_C::UberGraphFrame_B_HidingProp_WilliePete_C' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, overlapCylinder) == 0x001160, "Member 'AB_HidingProp_WilliePete_C::overlapCylinder' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, WilliePete_Ambient_Loop) == 0x001168, "Member 'AB_HidingProp_WilliePete_C::WilliePete_Ambient_Loop' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, Geyser) == 0x001170, "Member 'AB_HidingProp_WilliePete_C::Geyser' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, S_Whirlpool_01) == 0x001178, "Member 'AB_HidingProp_WilliePete_C::S_Whirlpool_01' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, P_WilliePete_SurfaceVerticalSplash) == 0x001180, "Member 'AB_HidingProp_WilliePete_C::P_WilliePete_SurfaceVerticalSplash' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, OverlappedFortProjectileMovementComponent) == 0x001188, "Member 'AB_HidingProp_WilliePete_C::OverlappedFortProjectileMovementComponent' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, OverlappedStandardProjectileMovementComponent) == 0x001190, "Member 'AB_HidingProp_WilliePete_C::OverlappedStandardProjectileMovementComponent' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, TeleportingNonPawn) == 0x001198, "Member 'AB_HidingProp_WilliePete_C::TeleportingNonPawn' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, SphereOverlapResult) == 0x0011A0, "Member 'AB_HidingProp_WilliePete_C::SphereOverlapResult' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, ProjectileSpeedCeiling) == 0x00123C, "Member 'AB_HidingProp_WilliePete_C::ProjectileSpeedCeiling' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, ProjectileExitFVectorRotation) == 0x001240, "Member 'AB_HidingProp_WilliePete_C::ProjectileExitFVectorRotation' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, WaterLevel) == 0x00124C, "Member 'AB_HidingProp_WilliePete_C::WaterLevel' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, GC_Exit) == 0x001250, "Member 'AB_HidingProp_WilliePete_C::GC_Exit' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, GC_Enter) == 0x001258, "Member 'AB_HidingProp_WilliePete_C::GC_Enter' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, EnabledValue) == 0x001260, "Member 'AB_HidingProp_WilliePete_C::EnabledValue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, LaunchHeightValue) == 0x001288, "Member 'AB_HidingProp_WilliePete_C::LaunchHeightValue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, LaunchPawn) == 0x0012B0, "Member 'AB_HidingProp_WilliePete_C::LaunchPawn' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, LaunchGrantedEffectHandle) == 0x0012B8, "Member 'AB_HidingProp_WilliePete_C::LaunchGrantedEffectHandle' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, T_Quest) == 0x0012C0, "Member 'AB_HidingProp_WilliePete_C::T_Quest' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, SpawnedWaterBody) == 0x0012E0, "Member 'AB_HidingProp_WilliePete_C::SpawnedWaterBody' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, GC_ScreenFX) == 0x0012E8, "Member 'AB_HidingProp_WilliePete_C::GC_ScreenFX' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, isOnTestMap) == 0x0012F0, "Member 'AB_HidingProp_WilliePete_C::isOnTestMap' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, Launch_Sound) == 0x0012F8, "Member 'AB_HidingProp_WilliePete_C::Launch_Sound' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, AdjustedLocation) == 0x001300, "Member 'AB_HidingProp_WilliePete_C::AdjustedLocation' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, skipAnimForLaunch) == 0x00130C, "Member 'AB_HidingProp_WilliePete_C::skipAnimForLaunch' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, ExitingPawn) == 0x001310, "Member 'AB_HidingProp_WilliePete_C::ExitingPawn' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, OverlappedMovementComponent) == 0x001318, "Member 'AB_HidingProp_WilliePete_C::OverlappedMovementComponent' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, ProjectileSpeedMult) == 0x001320, "Member 'AB_HidingProp_WilliePete_C::ProjectileSpeedMult' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, PickupSpeedMult) == 0x001324, "Member 'AB_HidingProp_WilliePete_C::PickupSpeedMult' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, bSetSilentDie) == 0x001328, "Member 'AB_HidingProp_WilliePete_C::bSetSilentDie' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_WilliePete_C, bSetSpawnedWaterBody) == 0x001329, "Member 'AB_HidingProp_WilliePete_C::bSetSpawnedWaterBody' has a wrong offset!");

}

